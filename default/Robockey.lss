
Robockey.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  000028a0  00002934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  0080021c  0080021c  00002a50  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006f9  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000347e  00000000  00000000  00003389  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001702  00000000  00000000  00006807  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028a4  00000000  00000000  00007f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  0000a7b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000945  00000000  00000000  0000acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001843  00000000  00000000  0000b5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000ce38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 12 01 	jmp	0x224	; 0x224 <__ctors_end>
       4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       c:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_3>
      10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      28:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_10>
      2c:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_11>
      30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      34:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      38:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      58:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      5c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      60:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      68:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      6c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      70:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      74:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      7c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      80:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      84:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      8c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      90:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      94:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      98:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      9c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      ac:	cd 08       	sbc	r12, r13
      ae:	ca 08       	sbc	r12, r10
      b0:	c7 08       	sbc	r12, r7
      b2:	c4 08       	sbc	r12, r4
      b4:	c1 08       	sbc	r12, r1
      b6:	be 08       	sbc	r11, r14
      b8:	bb 08       	sbc	r11, r11
      ba:	b8 08       	sbc	r11, r8
      bc:	b5 08       	sbc	r11, r5
      be:	b2 08       	sbc	r11, r2
      c0:	af 08       	sbc	r10, r15
      c2:	ac 08       	sbc	r10, r12
      c4:	a9 08       	sbc	r10, r9
      c6:	a6 08       	sbc	r10, r6
      c8:	a3 08       	sbc	r10, r3
      ca:	a0 08       	sbc	r10, r0
      cc:	9d 08       	sbc	r9, r13
      ce:	9a 08       	sbc	r9, r10
      d0:	97 08       	sbc	r9, r7
      d2:	94 08       	sbc	r9, r4
      d4:	91 08       	sbc	r9, r1
      d6:	8e 08       	sbc	r8, r14
      d8:	8b 08       	sbc	r8, r11
      da:	88 08       	sbc	r8, r8
      dc:	85 08       	sbc	r8, r5
      de:	82 08       	sbc	r8, r2
      e0:	7f 08       	sbc	r7, r15
      e2:	7c 08       	sbc	r7, r12
      e4:	79 08       	sbc	r7, r9
      e6:	76 08       	sbc	r7, r6
      e8:	73 08       	sbc	r7, r3
      ea:	70 08       	sbc	r7, r0
      ec:	6d 08       	sbc	r6, r13
      ee:	6a 08       	sbc	r6, r10
      f0:	67 08       	sbc	r6, r7
      f2:	64 08       	sbc	r6, r4
      f4:	61 08       	sbc	r6, r1
      f6:	5e 08       	sbc	r5, r14
      f8:	5b 08       	sbc	r5, r11
      fa:	58 08       	sbc	r5, r8
      fc:	55 08       	sbc	r5, r5
      fe:	52 08       	sbc	r5, r2
     100:	4f 08       	sbc	r4, r15
     102:	4c 08       	sbc	r4, r12
     104:	49 08       	sbc	r4, r9
     106:	46 08       	sbc	r4, r6
     108:	43 08       	sbc	r4, r3
     10a:	40 08       	sbc	r4, r0
     10c:	3d 08       	sbc	r3, r13
     10e:	3a 08       	sbc	r3, r10
     110:	37 08       	sbc	r3, r7
     112:	34 08       	sbc	r3, r4
     114:	31 08       	sbc	r3, r1
     116:	2e 08       	sbc	r2, r14
     118:	2b 08       	sbc	r2, r11
     11a:	28 08       	sbc	r2, r8
     11c:	25 08       	sbc	r2, r5
     11e:	22 08       	sbc	r2, r2
     120:	1f 08       	sbc	r1, r15
     122:	1c 08       	sbc	r1, r12
     124:	19 08       	sbc	r1, r9
     126:	16 08       	sbc	r1, r6
     128:	13 08       	sbc	r1, r3
     12a:	10 08       	sbc	r1, r0
     12c:	0d 08       	sbc	r0, r13
     12e:	08 4a       	sbci	r16, 0xA8	; 168
     130:	d7 3b       	cpi	r29, 0xB7	; 183
     132:	3b ce       	rjmp	.-906    	; 0xfffffdaa <__eeprom_end+0xff7efdaa>
     134:	01 6e       	ori	r16, 0xE1	; 225
     136:	84 bc       	out	0x24, r8	; 36
     138:	bf fd       	.word	0xfdbf	; ????
     13a:	c1 2f       	mov	r28, r17
     13c:	3d 6c       	ori	r19, 0xCD	; 205
     13e:	74 31       	cpi	r23, 0x14	; 20
     140:	9a bd       	out	0x2a, r25	; 42
     142:	56 83       	std	Z+6, r21	; 0x06
     144:	3d da       	rcall	.-2950   	; 0xfffff5c0 <__eeprom_end+0xff7ef5c0>
     146:	3d 00       	.word	0x003d	; ????
     148:	c7 7f       	andi	r28, 0xF7	; 247
     14a:	11 be       	out	0x31, r1	; 49
     14c:	d9 e4       	ldi	r29, 0x49	; 73
     14e:	bb 4c       	sbci	r27, 0xCB	; 203
     150:	3e 91       	ld	r19, -X
     152:	6b aa       	std	Y+51, r6	; 0x33
     154:	aa be       	out	0x3a, r10	; 58
     156:	00 00       	nop
     158:	00 80       	ld	r0, Z
     15a:	3f 0a       	sbc	r3, r31

0000015b <__c.1685>:
     15b:	0a 00                                               ..

0000015d <__c.1683>:
     15d:	20 64 65 6c 20 79 20 3a 20 00                        del y : .

00000167 <__c.1681>:
     167:	20 64 65 6c 5f 78 20 3a 20 00                        del_x : .

00000171 <descriptor_list>:
     171:	00 01 00 00 a5 01 12 00 02 00 00 b7 01 43 00 03     .............C..
     181:	00 00 fa 01 04 01 03 09 04 fe 01 12 02 03 09 04     ................
     191:	12 02 06 03 03 09 04 1a 02 08                       ..........

0000019b <endpoint_config_table>:
     19b:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001a5 <device_descriptor>:
     1a5:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1b5:	03 01                                               ..

000001b7 <config1_descriptor>:
     1b7:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1c7:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1d7:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1e7:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1f7:	40 00 00                                            @..

000001fa <string0>:
     1fa:	04 03 09 04                                         ....

000001fe <string1>:
     1fe:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     20e:	65 00 00 00                                         e...

00000212 <string2>:
     212:	06 03 4d 00 32 00 00 00                             ..M.2...

0000021a <string3>:
     21a:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

00000224 <__ctors_end>:
     224:	11 24       	eor	r1, r1
     226:	1f be       	out	0x3f, r1	; 63
     228:	cf ef       	ldi	r28, 0xFF	; 255
     22a:	da e0       	ldi	r29, 0x0A	; 10
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	cd bf       	out	0x3d, r28	; 61

00000230 <__do_copy_data>:
     230:	12 e0       	ldi	r17, 0x02	; 2
     232:	a0 e0       	ldi	r26, 0x00	; 0
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	e0 ea       	ldi	r30, 0xA0	; 160
     238:	f8 e2       	ldi	r31, 0x28	; 40
     23a:	02 c0       	rjmp	.+4      	; 0x240 <.do_copy_data_start>

0000023c <.do_copy_data_loop>:
     23c:	05 90       	lpm	r0, Z+
     23e:	0d 92       	st	X+, r0

00000240 <.do_copy_data_start>:
     240:	ac 31       	cpi	r26, 0x1C	; 28
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <.do_copy_data_loop>

00000246 <__do_clear_bss>:
     246:	12 e0       	ldi	r17, 0x02	; 2
     248:	ac e1       	ldi	r26, 0x1C	; 28
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a0 36       	cpi	r26, 0x60	; 96
     252:	b1 07       	cpc	r27, r17
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 31 01 	call	0x262	; 0x262 <main>
     25a:	0c 94 4e 14 	jmp	0x289c	; 0x289c <_exit>

0000025e <__bad_interrupt>:
     25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000262 <main>:
int average_cnt = 0;



int main(void)
{
     262:	3f 92       	push	r3
     264:	4f 92       	push	r4
     266:	5f 92       	push	r5
     268:	6f 92       	push	r6
     26a:	7f 92       	push	r7
     26c:	8f 92       	push	r8
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
	m_usb_init();
     284:	0e 94 05 07 	call	0xe0a	; 0xe0a <m_usb_init>
	while(!m_usb_isconnected())
     288:	0e 94 1e 07 	call	0xe3c	; 0xe3c <m_usb_isconnected>
     28c:	88 23       	and	r24, r24
     28e:	e1 f3       	breq	.-8      	; 0x288 <main+0x26>
	{
		//m_green(ON);
	} 


	init_all();
     290:	0e 94 78 03 	call	0x6f0	; 0x6f0 <init_all>
		{
			char* wireless_buffer = get_wireless_buffer();
		}
		if(m_usb_isconnected()){
		blob_status = m_wii_read(blobs);
		m_red(TOGGLE);
     294:	90 e4       	ldi	r25, 0x40	; 64
     296:	39 2e       	mov	r3, r25
	init_all();
	static unsigned int blobs[12];
	static char blob_status;
	while(1)
	{
		if(wireless_buffer_full())
     298:	0e 94 6e 03 	call	0x6dc	; 0x6dc <wireless_buffer_full>
     29c:	88 23       	and	r24, r24
     29e:	11 f0       	breq	.+4      	; 0x2a4 <main+0x42>
		{
			char* wireless_buffer = get_wireless_buffer();
     2a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <get_wireless_buffer>
		}
		if(m_usb_isconnected()){
     2a4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <m_usb_isconnected>
     2a8:	88 23       	and	r24, r24
     2aa:	b1 f3       	breq	.-20     	; 0x298 <main+0x36>
		blob_status = m_wii_read(blobs);
     2ac:	8b e3       	ldi	r24, 0x3B	; 59
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	0e 94 b5 05 	call	0xb6a	; 0xb6a <m_wii_read>
     2b4:	80 93 3a 02 	sts	0x023A, r24
		m_red(TOGGLE);
     2b8:	6e 9a       	sbi	0x0d, 6	; 13
     2ba:	9e b1       	in	r25, 0x0e	; 14
     2bc:	93 25       	eor	r25, r3
     2be:	9e b9       	out	0x0e, r25	; 14
		if(blob_status){
     2c0:	88 23       	and	r24, r24
     2c2:	51 f3       	breq	.-44     	; 0x298 <main+0x36>
     2c4:	8b e3       	ldi	r24, 0x3B	; 59
     2c6:	48 2e       	mov	r4, r24
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	58 2e       	mov	r5, r24
     2cc:	e2 01       	movw	r28, r4
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	6f 2e       	mov	r6, r31
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	7f 2e       	mov	r7, r31
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	8f 2e       	mov	r8, r31
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	9f 2e       	mov	r9, r31
     2e0:	f0 2d       	mov	r31, r0
     2e2:	64 01       	movw	r12, r8
     2e4:	53 01       	movw	r10, r6
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	10 e0       	ldi	r17, 0x00	; 0
		  average_cnt=0;
		  average_X=0;
		  average_Y=0;
		  for(int i=0;i<11;i+=3){
		    if(blobs[i]<1023){
     2ea:	68 81       	ld	r22, Y
     2ec:	79 81       	ldd	r23, Y+1	; 0x01
     2ee:	83 e0       	ldi	r24, 0x03	; 3
     2f0:	6f 3f       	cpi	r22, 0xFF	; 255
     2f2:	78 07       	cpc	r23, r24
     2f4:	e0 f4       	brcc	.+56     	; 0x32e <main+0xcc>
			  average_cnt++; 
     2f6:	0f 5f       	subi	r16, 0xFF	; 255
     2f8:	1f 4f       	sbci	r17, 0xFF	; 255
	          average_X += blobs[i];
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__floatunsisf>
     302:	9b 01       	movw	r18, r22
     304:	ac 01       	movw	r20, r24
     306:	c6 01       	movw	r24, r12
     308:	b5 01       	movw	r22, r10
     30a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__addsf3>
     30e:	5b 01       	movw	r10, r22
     310:	6c 01       	movw	r12, r24
		      average_Y += blobs[i+1];
     312:	6a 81       	ldd	r22, Y+2	; 0x02
     314:	7b 81       	ldd	r23, Y+3	; 0x03
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__floatunsisf>
     31e:	9b 01       	movw	r18, r22
     320:	ac 01       	movw	r20, r24
     322:	c4 01       	movw	r24, r8
     324:	b3 01       	movw	r22, r6
     326:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__addsf3>
     32a:	3b 01       	movw	r6, r22
     32c:	4c 01       	movw	r8, r24
     32e:	26 96       	adiw	r28, 0x06	; 6
		m_red(TOGGLE);
		if(blob_status){
		  average_cnt=0;
		  average_X=0;
		  average_Y=0;
		  for(int i=0;i<11;i+=3){
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	c3 35       	cpi	r28, 0x53	; 83
     334:	d9 07       	cpc	r29, r25
     336:	c9 f6       	brne	.-78     	; 0x2ea <main+0x88>
     338:	00 93 38 02 	sts	0x0238, r16
     33c:	10 93 39 02 	sts	0x0239, r17
			  average_cnt++; 
	          average_X += blobs[i];
		      average_Y += blobs[i+1];
			}
		  }
		  average_X = average_X / average_cnt;
     340:	b8 01       	movw	r22, r16
     342:	88 27       	eor	r24, r24
     344:	77 fd       	sbrc	r23, 7
     346:	80 95       	com	r24
     348:	98 2f       	mov	r25, r24
     34a:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     34e:	7b 01       	movw	r14, r22
     350:	8c 01       	movw	r16, r24
     352:	c6 01       	movw	r24, r12
     354:	b5 01       	movw	r22, r10
     356:	a8 01       	movw	r20, r16
     358:	97 01       	movw	r18, r14
     35a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__divsf3>
     35e:	5b 01       	movw	r10, r22
     360:	6c 01       	movw	r12, r24
     362:	60 93 1c 02 	sts	0x021C, r22
     366:	70 93 1d 02 	sts	0x021D, r23
     36a:	80 93 1e 02 	sts	0x021E, r24
     36e:	90 93 1f 02 	sts	0x021F, r25
		  average_Y = average_Y / average_cnt;
     372:	c4 01       	movw	r24, r8
     374:	b3 01       	movw	r22, r6
     376:	a8 01       	movw	r20, r16
     378:	97 01       	movw	r18, r14
     37a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__divsf3>
     37e:	7b 01       	movw	r14, r22
     380:	8c 01       	movw	r16, r24
     382:	60 93 20 02 	sts	0x0220, r22
     386:	70 93 21 02 	sts	0x0221, r23
     38a:	80 93 22 02 	sts	0x0222, r24
     38e:	90 93 23 02 	sts	0x0223, r25
		  if(first==true){
     392:	80 91 0b 01 	lds	r24, 0x010B
     396:	88 23       	and	r24, r24
     398:	09 f4       	brne	.+2      	; 0x39c <main+0x13a>
     39a:	d2 c0       	rjmp	.+420    	; 0x540 <main+0x2de>
		    set_left(50);
     39c:	82 e3       	ldi	r24, 0x32	; 50
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 32 03 	call	0x664	; 0x664 <set_left>
			set_right(50);
     3a4:	82 e3       	ldi	r24, 0x32	; 50
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 4c 03 	call	0x698	; 0x698 <set_right>
			m_red(ON);
     3ac:	6e 9a       	sbi	0x0d, 6	; 13
     3ae:	76 98       	cbi	0x0e, 6	; 14
			wait(1);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 1f 03 	call	0x63e	; 0x63e <wait>
			m_red(OFF);
     3b8:	6e 9a       	sbi	0x0d, 6	; 13
     3ba:	76 9a       	sbi	0x0e, 6	; 14
			set_left(0);
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 32 03 	call	0x664	; 0x664 <set_left>
			set_right(0);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 4c 03 	call	0x698	; 0x698 <set_right>
			first = false;
     3cc:	10 92 0b 01 	sts	0x010B, r1
			last_x = average_X;
     3d0:	80 91 1c 02 	lds	r24, 0x021C
     3d4:	90 91 1d 02 	lds	r25, 0x021D
     3d8:	a0 91 1e 02 	lds	r26, 0x021E
     3dc:	b0 91 1f 02 	lds	r27, 0x021F
     3e0:	80 93 24 02 	sts	0x0224, r24
     3e4:	90 93 25 02 	sts	0x0225, r25
     3e8:	a0 93 26 02 	sts	0x0226, r26
     3ec:	b0 93 27 02 	sts	0x0227, r27
			last_y = average_Y;
     3f0:	80 91 20 02 	lds	r24, 0x0220
     3f4:	90 91 21 02 	lds	r25, 0x0221
     3f8:	a0 91 22 02 	lds	r26, 0x0222
     3fc:	b0 91 23 02 	lds	r27, 0x0223
     400:	80 93 28 02 	sts	0x0228, r24
     404:	90 93 29 02 	sts	0x0229, r25
     408:	a0 93 2a 02 	sts	0x022A, r26
     40c:	b0 93 2b 02 	sts	0x022B, r27
		    blob_status = m_wii_read(blobs);
     410:	ce 01       	movw	r24, r28
     412:	48 97       	sbiw	r24, 0x18	; 24
     414:	0e 94 b5 05 	call	0xb6a	; 0xb6a <m_wii_read>
     418:	80 93 3a 02 	sts	0x023A, r24
		    if(blob_status){
     41c:	88 23       	and	r24, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <main+0x1c0>
     420:	6a c0       	rjmp	.+212    	; 0x4f6 <main+0x294>
     422:	60 90 20 02 	lds	r6, 0x0220
     426:	70 90 21 02 	lds	r7, 0x0221
     42a:	80 90 22 02 	lds	r8, 0x0222
     42e:	90 90 23 02 	lds	r9, 0x0223
     432:	a0 90 1c 02 	lds	r10, 0x021C
     436:	b0 90 1d 02 	lds	r11, 0x021D
     43a:	c0 90 1e 02 	lds	r12, 0x021E
     43e:	d0 90 1f 02 	lds	r13, 0x021F
     442:	00 91 38 02 	lds	r16, 0x0238
     446:	10 91 39 02 	lds	r17, 0x0239
		      for(int i=0;i<11;i+=3){
		        if(blobs[i]<1023){
     44a:	f2 01       	movw	r30, r4
     44c:	60 81       	ld	r22, Z
     44e:	71 81       	ldd	r23, Z+1	; 0x01
     450:	f3 e0       	ldi	r31, 0x03	; 3
     452:	6f 3f       	cpi	r22, 0xFF	; 255
     454:	7f 07       	cpc	r23, r31
     456:	e8 f4       	brcc	.+58     	; 0x492 <main+0x230>
			      average_cnt++; 
     458:	0f 5f       	subi	r16, 0xFF	; 255
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
	              average_X += blobs[i];
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__floatunsisf>
     464:	9b 01       	movw	r18, r22
     466:	ac 01       	movw	r20, r24
     468:	c6 01       	movw	r24, r12
     46a:	b5 01       	movw	r22, r10
     46c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__addsf3>
     470:	5b 01       	movw	r10, r22
     472:	6c 01       	movw	r12, r24
		          average_Y += blobs[i+1];
     474:	f2 01       	movw	r30, r4
     476:	62 81       	ldd	r22, Z+2	; 0x02
     478:	73 81       	ldd	r23, Z+3	; 0x03
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__floatunsisf>
     482:	9b 01       	movw	r18, r22
     484:	ac 01       	movw	r20, r24
     486:	c4 01       	movw	r24, r8
     488:	b3 01       	movw	r22, r6
     48a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__addsf3>
     48e:	3b 01       	movw	r6, r22
     490:	4c 01       	movw	r8, r24
     492:	86 e0       	ldi	r24, 0x06	; 6
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	48 0e       	add	r4, r24
     498:	59 1e       	adc	r5, r25
			first = false;
			last_x = average_X;
			last_y = average_Y;
		    blob_status = m_wii_read(blobs);
		    if(blob_status){
		      for(int i=0;i<11;i+=3){
     49a:	93 e5       	ldi	r25, 0x53	; 83
     49c:	49 16       	cp	r4, r25
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	59 06       	cpc	r5, r25
     4a2:	99 f6       	brne	.-90     	; 0x44a <main+0x1e8>
     4a4:	00 93 38 02 	sts	0x0238, r16
     4a8:	10 93 39 02 	sts	0x0239, r17
			      average_cnt++; 
	              average_X += blobs[i];
		          average_Y += blobs[i+1];
		     	} 
		      }
		      average_X = average_X / average_cnt;
     4ac:	b8 01       	movw	r22, r16
     4ae:	88 27       	eor	r24, r24
     4b0:	77 fd       	sbrc	r23, 7
     4b2:	80 95       	com	r24
     4b4:	98 2f       	mov	r25, r24
     4b6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__floatsisf>
     4ba:	7b 01       	movw	r14, r22
     4bc:	8c 01       	movw	r16, r24
     4be:	c6 01       	movw	r24, r12
     4c0:	b5 01       	movw	r22, r10
     4c2:	a8 01       	movw	r20, r16
     4c4:	97 01       	movw	r18, r14
     4c6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__divsf3>
     4ca:	60 93 1c 02 	sts	0x021C, r22
     4ce:	70 93 1d 02 	sts	0x021D, r23
     4d2:	80 93 1e 02 	sts	0x021E, r24
     4d6:	90 93 1f 02 	sts	0x021F, r25
		      average_Y = average_Y / average_cnt;
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a8 01       	movw	r20, r16
     4e0:	97 01       	movw	r18, r14
     4e2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__divsf3>
     4e6:	60 93 20 02 	sts	0x0220, r22
     4ea:	70 93 21 02 	sts	0x0221, r23
     4ee:	80 93 22 02 	sts	0x0222, r24
     4f2:	90 93 23 02 	sts	0x0223, r25
			}
			del_x = average_X - last_x;
     4f6:	a0 90 1c 02 	lds	r10, 0x021C
     4fa:	b0 90 1d 02 	lds	r11, 0x021D
     4fe:	c0 90 1e 02 	lds	r12, 0x021E
     502:	d0 90 1f 02 	lds	r13, 0x021F
     506:	c6 01       	movw	r24, r12
     508:	b5 01       	movw	r22, r10
     50a:	20 91 24 02 	lds	r18, 0x0224
     50e:	30 91 25 02 	lds	r19, 0x0225
     512:	40 91 26 02 	lds	r20, 0x0226
     516:	50 91 27 02 	lds	r21, 0x0227
     51a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__subsf3>
     51e:	60 93 2c 02 	sts	0x022C, r22
     522:	70 93 2d 02 	sts	0x022D, r23
     526:	80 93 2e 02 	sts	0x022E, r24
     52a:	90 93 2f 02 	sts	0x022F, r25
			del_y = average_Y - last_y;
     52e:	e0 90 20 02 	lds	r14, 0x0220
     532:	f0 90 21 02 	lds	r15, 0x0221
     536:	00 91 22 02 	lds	r16, 0x0222
     53a:	10 91 23 02 	lds	r17, 0x0223
     53e:	16 c0       	rjmp	.+44     	; 0x56c <main+0x30a>
		    last_x = average_X;
			last_y = average_Y;
		  }
		  else{
		  	m_green(OFF);
     540:	6a 9a       	sbi	0x0d, 2	; 13
     542:	72 9a       	sbi	0x0e, 2	; 14
		  	del_x = average_X - last_x;
     544:	c6 01       	movw	r24, r12
     546:	b5 01       	movw	r22, r10
     548:	20 91 24 02 	lds	r18, 0x0224
     54c:	30 91 25 02 	lds	r19, 0x0225
     550:	40 91 26 02 	lds	r20, 0x0226
     554:	50 91 27 02 	lds	r21, 0x0227
     558:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__subsf3>
     55c:	60 93 2c 02 	sts	0x022C, r22
     560:	70 93 2d 02 	sts	0x022D, r23
     564:	80 93 2e 02 	sts	0x022E, r24
     568:	90 93 2f 02 	sts	0x022F, r25
			del_y = average_Y - last_y;
     56c:	c8 01       	movw	r24, r16
     56e:	b7 01       	movw	r22, r14
     570:	20 91 28 02 	lds	r18, 0x0228
     574:	30 91 29 02 	lds	r19, 0x0229
     578:	40 91 2a 02 	lds	r20, 0x022A
     57c:	50 91 2b 02 	lds	r21, 0x022B
     580:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__subsf3>
     584:	60 93 30 02 	sts	0x0230, r22
     588:	70 93 31 02 	sts	0x0231, r23
     58c:	80 93 32 02 	sts	0x0232, r24
     590:	90 93 33 02 	sts	0x0233, r25
			last_x = average_X;
     594:	a0 92 24 02 	sts	0x0224, r10
     598:	b0 92 25 02 	sts	0x0225, r11
     59c:	c0 92 26 02 	sts	0x0226, r12
     5a0:	d0 92 27 02 	sts	0x0227, r13
			last_y = average_Y;
     5a4:	e0 92 28 02 	sts	0x0228, r14
     5a8:	f0 92 29 02 	sts	0x0229, r15
     5ac:	00 93 2a 02 	sts	0x022A, r16
     5b0:	10 93 2b 02 	sts	0x022B, r17
		  }
		  angle = atan(del_y/del_x);
     5b4:	60 91 30 02 	lds	r22, 0x0230
     5b8:	70 91 31 02 	lds	r23, 0x0231
     5bc:	80 91 32 02 	lds	r24, 0x0232
     5c0:	90 91 33 02 	lds	r25, 0x0233
     5c4:	20 91 2c 02 	lds	r18, 0x022C
     5c8:	30 91 2d 02 	lds	r19, 0x022D
     5cc:	40 91 2e 02 	lds	r20, 0x022E
     5d0:	50 91 2f 02 	lds	r21, 0x022F
     5d4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__divsf3>
     5d8:	0e 94 9d 12 	call	0x253a	; 0x253a <atan>
     5dc:	60 93 34 02 	sts	0x0234, r22
     5e0:	70 93 35 02 	sts	0x0235, r23
     5e4:	80 93 36 02 	sts	0x0236, r24
     5e8:	90 93 37 02 	sts	0x0237, r25
		  m_usb_tx_string(" del_x : ");
     5ec:	87 e6       	ldi	r24, 0x67	; 103
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 df 0a 	call	0x15be	; 0x15be <print_P>
      	  m_usb_tx_uint((unsigned int)del_x);
     5f4:	60 91 2c 02 	lds	r22, 0x022C
     5f8:	70 91 2d 02 	lds	r23, 0x022D
     5fc:	80 91 2e 02 	lds	r24, 0x022E
     600:	90 91 2f 02 	lds	r25, 0x022F
     604:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fixunssfsi>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	0e 94 82 0b 	call	0x1704	; 0x1704 <m_usb_tx_uint>
		  m_usb_tx_string(" del y : ");
     610:	8d e5       	ldi	r24, 0x5D	; 93
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 df 0a 	call	0x15be	; 0x15be <print_P>
		  m_usb_tx_uint((unsigned int)(del_y));
     618:	60 91 30 02 	lds	r22, 0x0230
     61c:	70 91 31 02 	lds	r23, 0x0231
     620:	80 91 32 02 	lds	r24, 0x0232
     624:	90 91 33 02 	lds	r25, 0x0233
     628:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__fixunssfsi>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	0e 94 82 0b 	call	0x1704	; 0x1704 <m_usb_tx_uint>
		  m_usb_tx_string("\n");
     634:	8b e5       	ldi	r24, 0x5B	; 91
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 df 0a 	call	0x15be	; 0x15be <print_P>
     63c:	2d ce       	rjmp	.-934    	; 0x298 <main+0x36>

0000063e <wait>:
}



void wait(int n)
{
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     642:	60 e9       	ldi	r22, 0x90	; 144
     644:	71 e0       	ldi	r23, 0x01	; 1
     646:	0a c0       	rjmp	.+20     	; 0x65c <wait+0x1e>
	for(int i = 0; i < n; i++)
     648:	20 e1       	ldi	r18, 0x10	; 16
     64a:	37 e2       	ldi	r19, 0x27	; 39
     64c:	fb 01       	movw	r30, r22
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	f1 f7       	brne	.-4      	; 0x64e <wait+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     652:	21 50       	subi	r18, 0x01	; 1
     654:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     656:	d1 f7       	brne	.-12     	; 0x64c <wait+0xe>
     658:	4f 5f       	subi	r20, 0xFF	; 255
     65a:	5f 4f       	sbci	r21, 0xFF	; 255
     65c:	48 17       	cp	r20, r24
     65e:	59 07       	cpc	r21, r25
     660:	9c f3       	brlt	.-26     	; 0x648 <wait+0xa>
	{
		m_wait(1000);
	}
}
     662:	08 95       	ret

00000664 <set_left>:

// B5 and C6
void set_left(int n)
{
	int pwm = n;
	if(n < 0)
     664:	97 ff       	sbrs	r25, 7
     666:	06 c0       	rjmp	.+12     	; 0x674 <set_left+0x10>
	{
		pwm = -n;
     668:	22 27       	eor	r18, r18
     66a:	33 27       	eor	r19, r19
     66c:	28 1b       	sub	r18, r24
     66e:	39 0b       	sbc	r19, r25
		clear(PORTC, 6);
     670:	46 98       	cbi	0x08, 6	; 8
     672:	02 c0       	rjmp	.+4      	; 0x678 <set_left+0x14>
	}
	else
	{
		set(PORTC, 6);
     674:	46 9a       	sbi	0x08, 6	; 8
     676:	9c 01       	movw	r18, r24
	}
	OCR1A = pwm * 65535;
     678:	b9 01       	movw	r22, r18
     67a:	88 27       	eor	r24, r24
     67c:	77 fd       	sbrc	r23, 7
     67e:	80 95       	com	r24
     680:	98 2f       	mov	r25, r24
     682:	2f ef       	ldi	r18, 0xFF	; 255
     684:	3f ef       	ldi	r19, 0xFF	; 255
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsi3>
     68e:	70 93 89 00 	sts	0x0089, r23
     692:	60 93 88 00 	sts	0x0088, r22

}
     696:	08 95       	ret

00000698 <set_right>:
	
// B6 and C7
void set_right(int n)
{
	int pwm = n;
	if(n < 0)
     698:	97 ff       	sbrs	r25, 7
     69a:	06 c0       	rjmp	.+12     	; 0x6a8 <set_right+0x10>
	{
		pwm = -n;
     69c:	22 27       	eor	r18, r18
     69e:	33 27       	eor	r19, r19
     6a0:	28 1b       	sub	r18, r24
     6a2:	39 0b       	sbc	r19, r25
		clear(PORTC, 7);
     6a4:	47 98       	cbi	0x08, 7	; 8
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <set_right+0x14>
	}
	else
	{
		set(PORTC, 7);
     6a8:	47 9a       	sbi	0x08, 7	; 8
     6aa:	9c 01       	movw	r18, r24
	}
	OCR1B = pwm * 65535;
     6ac:	b9 01       	movw	r22, r18
     6ae:	88 27       	eor	r24, r24
     6b0:	77 fd       	sbrc	r23, 7
     6b2:	80 95       	com	r24
     6b4:	98 2f       	mov	r25, r24
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	3f ef       	ldi	r19, 0xFF	; 255
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsi3>
     6c2:	70 93 8b 00 	sts	0x008B, r23
     6c6:	60 93 8a 00 	sts	0x008A, r22
}
     6ca:	08 95       	ret

000006cc <wireless_callback>:

void wireless_callback(char* c)
{
	wireless_buffer = c;
     6cc:	90 93 59 02 	sts	0x0259, r25
     6d0:	80 93 58 02 	sts	0x0258, r24
	wireless_buffer_f = true;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 57 02 	sts	0x0257, r24
}
     6da:	08 95       	ret

000006dc <wireless_buffer_full>:

bool wireless_buffer_full()
{
	return wireless_buffer_f;
}
     6dc:	80 91 57 02 	lds	r24, 0x0257
     6e0:	08 95       	ret

000006e2 <get_wireless_buffer>:

char* get_wireless_buffer()
{
	wireless_buffer_f = false;
     6e2:	10 92 57 02 	sts	0x0257, r1
	return wireless_buffer;
	
}
     6e6:	80 91 58 02 	lds	r24, 0x0258
     6ea:	90 91 59 02 	lds	r25, 0x0259
     6ee:	08 95       	ret

000006f0 <init_all>:
char* wireless_buffer;
void wireless_callback(char*);

void init_all()
{
	m_clockdivide(0);
     6f0:	80 e8       	ldi	r24, 0x80	; 128
     6f2:	80 93 61 00 	sts	0x0061, r24
     6f6:	10 92 61 00 	sts	0x0061, r1
	m_disableJTAG();
     6fa:	85 bf       	out	0x35, r24	; 53
     6fc:	85 bf       	out	0x35, r24	; 53

	//initializing mWii
	char wii_status = m_wii_open();
     6fe:	0e 94 42 06 	call	0xc84	; 0xc84 <m_wii_open>
	if(wii_status){
     702:	88 23       	and	r24, r24
     704:	19 f0       	breq	.+6      	; 0x70c <init_all+0x1c>
	  m_green(ON);
     706:	6a 9a       	sbi	0x0d, 2	; 13
     708:	72 98       	cbi	0x0e, 2	; 14
     70a:	01 c0       	rjmp	.+2      	; 0x70e <init_all+0x1e>
	}else
	  m_red(ON);
     70c:	6e 9a       	sbi	0x0d, 6	; 13
     70e:	76 98       	cbi	0x0e, 6	; 14
	
	//init_communication(CHANNEL, ADDRESS, PACKET_SIZE);


	// set timer clock source
	clear(TCCR1B, CS12);
     710:	80 91 81 00 	lds	r24, 0x0081
     714:	8b 7f       	andi	r24, 0xFB	; 251
     716:	80 93 81 00 	sts	0x0081, r24
	clear(TCCR1B, CS11);
     71a:	80 91 81 00 	lds	r24, 0x0081
     71e:	8d 7f       	andi	r24, 0xFD	; 253
     720:	80 93 81 00 	sts	0x0081, r24
	set(TCCR1B, CS10);
     724:	80 91 81 00 	lds	r24, 0x0081
     728:	81 60       	ori	r24, 0x01	; 1
     72a:	80 93 81 00 	sts	0x0081, r24

	// Set to up to ICR1 PWM mode
	ICR1 = 0xffff;
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	9f ef       	ldi	r25, 0xFF	; 255
     732:	90 93 87 00 	sts	0x0087, r25
     736:	80 93 86 00 	sts	0x0086, r24
	set(TCCR1B, WGM13);
     73a:	80 91 81 00 	lds	r24, 0x0081
     73e:	80 61       	ori	r24, 0x10	; 16
     740:	80 93 81 00 	sts	0x0081, r24
	set(TCCR1B, WGM12);
     744:	80 91 81 00 	lds	r24, 0x0081
     748:	88 60       	ori	r24, 0x08	; 8
     74a:	80 93 81 00 	sts	0x0081, r24
	set(TCCR1A, WGM11);
     74e:	80 91 80 00 	lds	r24, 0x0080
     752:	82 60       	ori	r24, 0x02	; 2
     754:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, WGM10);
     758:	80 91 80 00 	lds	r24, 0x0080
     75c:	8e 7f       	andi	r24, 0xFE	; 254
     75e:	80 93 80 00 	sts	0x0080, r24

	// set there to be an output at B5
	set(DDRB, 5);
     762:	25 9a       	sbi	0x04, 5	; 4
	set(TCCR1A, COM1A1);
     764:	80 91 80 00 	lds	r24, 0x0080
     768:	80 68       	ori	r24, 0x80	; 128
     76a:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, COM1A0);
     76e:	80 91 80 00 	lds	r24, 0x0080
     772:	8f 7b       	andi	r24, 0xBF	; 191
     774:	80 93 80 00 	sts	0x0080, r24

	// set there to be an output at B6
	set(DDRB, 6);
     778:	26 9a       	sbi	0x04, 6	; 4
	set(TCCR1A, COM1B1);
     77a:	80 91 80 00 	lds	r24, 0x0080
     77e:	80 62       	ori	r24, 0x20	; 32
     780:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, COM1B0);
     784:	80 91 80 00 	lds	r24, 0x0080
     788:	8f 7e       	andi	r24, 0xEF	; 239
     78a:	80 93 80 00 	sts	0x0080, r24

	// don't use the one on pin B7
	clear(TCCR1A, COM1C1);
     78e:	80 91 80 00 	lds	r24, 0x0080
     792:	87 7f       	andi	r24, 0xF7	; 247
     794:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, COM1C0);
     798:	80 91 80 00 	lds	r24, 0x0080
     79c:	8b 7f       	andi	r24, 0xFB	; 251
     79e:	80 93 80 00 	sts	0x0080, r24

	OCR1A = 0;
     7a2:	10 92 89 00 	sts	0x0089, r1
     7a6:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     7aa:	10 92 8b 00 	sts	0x008B, r1
     7ae:	10 92 8a 00 	sts	0x008A, r1

	
	// set the directions pins to enable output
	set(DDRC, 6);
     7b2:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC, 7);
     7b4:	3f 9a       	sbi	0x07, 7	; 7
	
	clear(PORTC, 6);
     7b6:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC, 7);
     7b8:	47 98       	cbi	0x08, 7	; 8
}
     7ba:	08 95       	ret

000007bc <send_message_to_bot>:
		}
	}
}

void send_message_to_bot(char* c, char address)
{
     7bc:	9c 01       	movw	r18, r24
     7be:	46 2f       	mov	r20, r22
	m_rf_send(address, c, address);
     7c0:	86 2f       	mov	r24, r22
     7c2:	b9 01       	movw	r22, r18
     7c4:	0e 94 ca 04 	call	0x994	; 0x994 <m_rf_send>
}
     7c8:	08 95       	ret

000007ca <send_message>:
	m_rf_read(&buffer, packet_length);
	wireless_callback(&buffer);
}

void send_message(char* c)
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
     7d0:	80 91 5a 02 	lds	r24, 0x025A
     7d4:	90 91 5b 02 	lds	r25, 0x025B
     7d8:	84 97       	sbiw	r24, 0x24	; 36
     7da:	29 f0       	breq	.+10     	; 0x7e6 <send_message+0x1c>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, address);
     7dc:	84 e2       	ldi	r24, 0x24	; 36
     7de:	be 01       	movw	r22, r28
     7e0:	44 e2       	ldi	r20, 0x24	; 36
     7e2:	0e 94 ca 04 	call	0x994	; 0x994 <m_rf_send>

void send_message(char* c)
{
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
     7e6:	80 91 5a 02 	lds	r24, 0x025A
     7ea:	90 91 5b 02 	lds	r25, 0x025B
     7ee:	85 97       	sbiw	r24, 0x25	; 37
     7f0:	29 f0       	breq	.+10     	; 0x7fc <send_message+0x32>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, address);
     7f2:	85 e2       	ldi	r24, 0x25	; 37
     7f4:	be 01       	movw	r22, r28
     7f6:	45 e2       	ldi	r20, 0x25	; 37
     7f8:	0e 94 ca 04 	call	0x994	; 0x994 <m_rf_send>

void send_message(char* c)
{
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
     7fc:	80 91 5a 02 	lds	r24, 0x025A
     800:	90 91 5b 02 	lds	r25, 0x025B
     804:	86 97       	sbiw	r24, 0x26	; 38
     806:	29 f0       	breq	.+10     	; 0x812 <send_message+0x48>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, address);
     808:	86 e2       	ldi	r24, 0x26	; 38
     80a:	be 01       	movw	r22, r28
     80c:	46 e2       	ldi	r20, 0x26	; 38
     80e:	0e 94 ca 04 	call	0x994	; 0x994 <m_rf_send>
		{
			send_message_to_bot(c, i);

		}
	}
}
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <__vector_3>:
	m_rf_open(channel, address, packet_length);
}


ISR(INT2_vect)
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	0f 92       	push	r0
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
	char buffer;
	m_rf_read(&buffer, packet_length);
     848:	8e 01       	movw	r16, r28
     84a:	0f 5f       	subi	r16, 0xFF	; 255
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	c8 01       	movw	r24, r16
     850:	60 91 5c 02 	lds	r22, 0x025C
     854:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <m_rf_read>
	wireless_callback(&buffer);
     858:	c8 01       	movw	r24, r16
     85a:	0e 94 66 03 	call	0x6cc	; 0x6cc <wireless_callback>
}
     85e:	0f 90       	pop	r0
     860:	cf 91       	pop	r28
     862:	df 91       	pop	r29
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <init_communication>:
#include "common_robockey.h"

int channel, address, packet_length;

void init_communication(int c, int a, int l)
{
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	c8 2e       	mov	r12, r24
     898:	19 2f       	mov	r17, r25
     89a:	d6 2e       	mov	r13, r22
     89c:	07 2f       	mov	r16, r23
     89e:	7a 01       	movw	r14, r20
	m_bus_init();
     8a0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <m_bus_init>
	channel = c;
     8a4:	c0 92 5e 02 	sts	0x025E, r12
     8a8:	10 93 5f 02 	sts	0x025F, r17
	address = a;
     8ac:	d0 92 5a 02 	sts	0x025A, r13
     8b0:	00 93 5b 02 	sts	0x025B, r16
	packet_length = l;
     8b4:	e0 92 5c 02 	sts	0x025C, r14
     8b8:	f0 92 5d 02 	sts	0x025D, r15

	m_rf_open(channel, address, packet_length);
     8bc:	8c 2d       	mov	r24, r12
     8be:	6d 2d       	mov	r22, r13
     8c0:	4e 2d       	mov	r20, r14
     8c2:	0e 94 17 05 	call	0xa2e	; 0xa2e <m_rf_open>
}
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	08 95       	ret

000008d4 <m_bus_init>:
#include "m_bus.h"

void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     8d4:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     8d6:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     8d8:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     8da:	8c e0       	ldi	r24, 0x0C	; 12
     8dc:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     8e0:	e9 e6       	ldi	r30, 0x69	; 105
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	80 62       	ori	r24, 0x20	; 32
     8e8:	80 83       	st	Z, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7e       	andi	r24, 0xEF	; 239
     8ee:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     8f0:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     8f2:	78 94       	sei
     8f4:	08 95       	ret

000008f6 <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
     8f6:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     8f8:	84 ea       	ldi	r24, 0xA4	; 164
     8fa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     8fe:	80 91 bc 00 	lds	r24, 0x00BC
     902:	87 ff       	sbrs	r24, 7
     904:	fc cf       	rjmp	.-8      	; 0x8fe <m_rf_read+0x8>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     906:	81 e5       	ldi	r24, 0x51	; 81
     908:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     90c:	84 e8       	ldi	r24, 0x84	; 132
     90e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     912:	80 91 bc 00 	lds	r24, 0x00BC
     916:	87 ff       	sbrs	r24, 7
     918:	fc cf       	rjmp	.-8      	; 0x912 <m_rf_read+0x1c>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     91a:	80 91 b9 00 	lds	r24, 0x00B9
     91e:	88 7f       	andi	r24, 0xF8	; 248
     920:	88 34       	cpi	r24, 0x48	; 72
     922:	91 f0       	breq	.+36     	; 0x948 <m_rf_read+0x52>
		return 0; // not connected/listening
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     924:	84 ec       	ldi	r24, 0xC4	; 196
     926:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     92a:	80 91 bc 00 	lds	r24, 0x00BC
     92e:	87 ff       	sbrs	r24, 7
     930:	fc cf       	rjmp	.-8      	; 0x92a <m_rf_read+0x34>
	bytes = TWDR;
     932:	80 91 bb 00 	lds	r24, 0x00BB
	if(bytes != packet_length){
     936:	86 17       	cp	r24, r22
     938:	39 f4       	brne	.+14     	; 0x948 <m_rf_read+0x52>
     93a:	a0 e0       	ldi	r26, 0x00	; 0
     93c:	b0 e0       	ldi	r27, 0x00	; 0
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	61 50       	subi	r22, 0x01	; 1
     942:	70 40       	sbci	r23, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     944:	94 ec       	ldi	r25, 0xC4	; 196
     946:	12 c0       	rjmp	.+36     	; 0x96c <m_rf_read+0x76>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     948:	84 e9       	ldi	r24, 0x94	; 148
     94a:	80 93 bc 00 	sts	0x00BC, r24
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	08 95       	ret
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     952:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     956:	80 91 bc 00 	lds	r24, 0x00BC
     95a:	87 ff       	sbrs	r24, 7
     95c:	fc cf       	rjmp	.-8      	; 0x956 <m_rf_read+0x60>
		buffer[i] = TWDR;
     95e:	80 91 bb 00 	lds	r24, 0x00BB
     962:	f9 01       	movw	r30, r18
     964:	ea 0f       	add	r30, r26
     966:	fb 1f       	adc	r31, r27
     968:	80 83       	st	Z, r24
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	a6 17       	cp	r26, r22
     96e:	b7 07       	cpc	r27, r23
     970:	84 f3       	brlt	.-32     	; 0x952 <m_rf_read+0x5c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     972:	84 e8       	ldi	r24, 0x84	; 132
     974:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     978:	80 91 bc 00 	lds	r24, 0x00BC
     97c:	87 ff       	sbrs	r24, 7
     97e:	fc cf       	rjmp	.-8      	; 0x978 <m_rf_read+0x82>
	buffer[i++] = TWDR;
     980:	80 91 bb 00 	lds	r24, 0x00BB
     984:	a2 0f       	add	r26, r18
     986:	b3 1f       	adc	r27, r19
     988:	8c 93       	st	X, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     98a:	84 e9       	ldi	r24, 0x94	; 148
     98c:	80 93 bc 00 	sts	0x00BC, r24
     990:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
     992:	08 95       	ret

00000994 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
     994:	98 2f       	mov	r25, r24
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
     996:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     998:	84 ea       	ldi	r24, 0xA4	; 164
     99a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     99e:	80 91 bc 00 	lds	r24, 0x00BC
     9a2:	87 ff       	sbrs	r24, 7
     9a4:	fc cf       	rjmp	.-8      	; 0x99e <m_rf_send+0xa>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     9a6:	80 e5       	ldi	r24, 0x50	; 80
     9a8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     9ac:	84 e8       	ldi	r24, 0x84	; 132
     9ae:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     9b2:	80 91 bc 00 	lds	r24, 0x00BC
     9b6:	87 ff       	sbrs	r24, 7
     9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <m_rf_send+0x1e>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     9ba:	80 91 b9 00 	lds	r24, 0x00B9
     9be:	88 7f       	andi	r24, 0xF8	; 248
     9c0:	80 32       	cpi	r24, 0x20	; 32
     9c2:	31 f4       	brne	.+12     	; 0x9d0 <m_rf_send+0x3c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     9c4:	84 e9       	ldi	r24, 0x94	; 148
     9c6:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
     9ca:	78 94       	sei
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 95       	ret
		return 0;
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     9d6:	84 e8       	ldi	r24, 0x84	; 132
     9d8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     9dc:	80 91 bc 00 	lds	r24, 0x00BC
     9e0:	87 ff       	sbrs	r24, 7
     9e2:	fc cf       	rjmp	.-8      	; 0x9dc <m_rf_send+0x48>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
     9e4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     9e8:	84 e8       	ldi	r24, 0x84	; 132
     9ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     9ee:	80 91 bc 00 	lds	r24, 0x00BC
     9f2:	87 ff       	sbrs	r24, 7
     9f4:	fc cf       	rjmp	.-8      	; 0x9ee <m_rf_send+0x5a>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0

	// SEND DATA
	for(i=0;i<packet_length;i++){
     9fa:	50 e0       	ldi	r21, 0x00	; 0
		TWDR = buffer[i];
		TWCR = (1<<TWINT) | (1<<TWEN);
     9fc:	94 e8       	ldi	r25, 0x84	; 132
     9fe:	0e c0       	rjmp	.+28     	; 0xa1c <m_rf_send+0x88>
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
     a00:	fb 01       	movw	r30, r22
     a02:	e2 0f       	add	r30, r18
     a04:	f3 1f       	adc	r31, r19
     a06:	80 81       	ld	r24, Z
     a08:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
     a0c:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){};
     a10:	80 91 bc 00 	lds	r24, 0x00BC
     a14:	87 ff       	sbrs	r24, 7
     a16:	fc cf       	rjmp	.-8      	; 0xa10 <m_rf_send+0x7c>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
     a18:	2f 5f       	subi	r18, 0xFF	; 255
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	24 17       	cp	r18, r20
     a1e:	35 07       	cpc	r19, r21
     a20:	7c f3       	brlt	.-34     	; 0xa00 <m_rf_send+0x6c>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     a22:	84 e9       	ldi	r24, 0x94	; 148
     a24:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
     a28:	78 94       	sei
     a2a:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
     a2c:	08 95       	ret

00000a2e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	18 2f       	mov	r17, r24
     a36:	06 2f       	mov	r16, r22
     a38:	f4 2e       	mov	r15, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     a3a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     a3e:	84 ea       	ldi	r24, 0xA4	; 164
     a40:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a44:	80 91 bc 00 	lds	r24, 0x00BC
     a48:	87 ff       	sbrs	r24, 7
     a4a:	fc cf       	rjmp	.-8      	; 0xa44 <m_rf_open+0x16>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     a4c:	80 e5       	ldi	r24, 0x50	; 80
     a4e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     a52:	84 e8       	ldi	r24, 0x84	; 132
     a54:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a58:	80 91 bc 00 	lds	r24, 0x00BC
     a5c:	87 ff       	sbrs	r24, 7
     a5e:	fc cf       	rjmp	.-8      	; 0xa58 <m_rf_open+0x2a>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     a60:	80 91 b9 00 	lds	r24, 0x00B9
     a64:	88 7f       	andi	r24, 0xF8	; 248
     a66:	80 32       	cpi	r24, 0x20	; 32
     a68:	29 f4       	brne	.+10     	; 0xa74 <m_rf_open+0x46>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     a6a:	84 e9       	ldi	r24, 0x94	; 148
     a6c:	80 93 bc 00 	sts	0x00BC, r24
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	29 c0       	rjmp	.+82     	; 0xac6 <m_rf_open+0x98>
		return 0;
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     a7a:	84 e8       	ldi	r24, 0x84	; 132
     a7c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a80:	80 91 bc 00 	lds	r24, 0x00BC
     a84:	87 ff       	sbrs	r24, 7
     a86:	fc cf       	rjmp	.-8      	; 0xa80 <m_rf_open+0x52>
	
	// SEND DATA
	TWDR = channel;
     a88:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     a8c:	84 e8       	ldi	r24, 0x84	; 132
     a8e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a92:	80 91 bc 00 	lds	r24, 0x00BC
     a96:	87 ff       	sbrs	r24, 7
     a98:	fc cf       	rjmp	.-8      	; 0xa92 <m_rf_open+0x64>
	
	TWDR = RXaddress;
     a9a:	00 93 bb 00 	sts	0x00BB, r16
	TWCR = (1<<TWINT) | (1<<TWEN);
     a9e:	84 e8       	ldi	r24, 0x84	; 132
     aa0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     aa4:	80 91 bc 00 	lds	r24, 0x00BC
     aa8:	87 ff       	sbrs	r24, 7
     aaa:	fc cf       	rjmp	.-8      	; 0xaa4 <m_rf_open+0x76>
	
	TWDR = packet_length;
     aac:	f0 92 bb 00 	sts	0x00BB, r15
	TWCR = (1<<TWINT) | (1<<TWEN);
     ab0:	84 e8       	ldi	r24, 0x84	; 132
     ab2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     ab6:	80 91 bc 00 	lds	r24, 0x00BC
     aba:	87 ff       	sbrs	r24, 7
     abc:	fc cf       	rjmp	.-8      	; 0xab6 <m_rf_open+0x88>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     abe:	84 e9       	ldi	r24, 0x94	; 148
     ac0:	80 93 bc 00 	sts	0x00BC, r24
     ac4:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	08 95       	ret

00000ace <twi_wait>:
		return 0;					// comm failure
	}
}

unsigned char twi_wait(void)
{
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int wait=0;
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     ad2:	80 91 bc 00 	lds	r24, 0x00BC
     ad6:	87 fd       	sbrc	r24, 7
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <twi_wait+0x18>
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	83 e0       	ldi	r24, 0x03	; 3
     ae0:	29 3e       	cpi	r18, 0xE9	; 233
     ae2:	38 07       	cpc	r19, r24
     ae4:	b1 f7       	brne	.-20     	; 0xad2 <twi_wait+0x4>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	28 5e       	subi	r18, 0xE8	; 232
     aea:	33 40       	sbci	r19, 0x03	; 3
     aec:	09 f0       	breq	.+2      	; 0xaf0 <twi_wait+0x22>
     aee:	81 e0       	ldi	r24, 0x01	; 1
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     af0:	08 95       	ret

00000af2 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     af2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     af6:	84 e8       	ldi	r24, 0x84	; 132
     af8:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
     afc:	0e 94 67 05 	call	0xace	; 0xace <twi_wait>
     b00:	88 23       	and	r24, r24
     b02:	19 f0       	breq	.+6      	; 0xb0a <__stack+0xb>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     b04:	80 91 b9 00 	lds	r24, 0x00B9
     b08:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     b0a:	08 95       	ret

00000b0c <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     b0c:	1f 93       	push	r17
     b0e:	18 2f       	mov	r17, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     b10:	84 ea       	ldi	r24, 0xA4	; 164
     b12:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
     b16:	0e 94 67 05 	call	0xace	; 0xace <twi_wait>
     b1a:	88 23       	and	r24, r24
     b1c:	69 f0       	breq	.+26     	; 0xb38 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     b1e:	11 0f       	add	r17, r17
     b20:	81 2f       	mov	r24, r17
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     b28:	88 34       	cpi	r24, 0x48	; 72
     b2a:	11 f0       	breq	.+4      	; 0xb30 <start_read+0x24>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <start_read+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     b30:	84 e9       	ldi	r24, 0x94	; 148
     b32:	80 93 bc 00 	sts	0x00BC, r24
     b36:	80 e0       	ldi	r24, 0x00	; 0
		return 0;	// failure
	}	
	return 1;	// success
}	
     b38:	1f 91       	pop	r17
     b3a:	08 95       	ret

00000b3c <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     b3c:	1f 93       	push	r17
     b3e:	18 2f       	mov	r17, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     b40:	84 ea       	ldi	r24, 0xA4	; 164
     b42:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
     b46:	0e 94 67 05 	call	0xace	; 0xace <twi_wait>
     b4a:	88 23       	and	r24, r24
     b4c:	61 f0       	breq	.+24     	; 0xb66 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     b4e:	81 2f       	mov	r24, r17
     b50:	88 0f       	add	r24, r24
     b52:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     b56:	80 32       	cpi	r24, 0x20	; 32
     b58:	11 f0       	breq	.+4      	; 0xb5e <start_write+0x22>
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <start_write+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     b5e:	84 e9       	ldi	r24, 0x94	; 148
     b60:	80 93 bc 00 	sts	0x00BC, r24
     b64:	80 e0       	ldi	r24, 0x00	; 0
		return 0;	// failure
	}	
	return 1;	// success
}	
     b66:	1f 91       	pop	r17
     b68:	08 95       	ret

00000b6a <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	60 97       	sbiw	r28, 0x10	; 16
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	18 2f       	mov	r17, r24
     b84:	09 2f       	mov	r16, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     b86:	88 e5       	ldi	r24, 0x58	; 88
     b88:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <m_wii_read+0x28>
     b90:	69 c0       	rjmp	.+210    	; 0xc64 <m_wii_read+0xfa>
	if(!send_byte(0x36)){return 0;}
     b92:	86 e3       	ldi	r24, 0x36	; 54
     b94:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     b98:	88 23       	and	r24, r24
     b9a:	09 f4       	brne	.+2      	; 0xb9e <m_wii_read+0x34>
     b9c:	63 c0       	rjmp	.+198    	; 0xc64 <m_wii_read+0xfa>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b9e:	84 e9       	ldi	r24, 0x94	; 148
     ba0:	80 93 bc 00 	sts	0x00BC, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ba4:	85 e8       	ldi	r24, 0x85	; 133
     ba6:	8a 95       	dec	r24
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <m_wii_read+0x3c>
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     baa:	88 e5       	ldi	r24, 0x58	; 88
     bac:	0e 94 86 05 	call	0xb0c	; 0xb0c <start_read>
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <m_wii_read+0x4c>
     bb4:	57 c0       	rjmp	.+174    	; 0xc64 <m_wii_read+0xfa>
}

char m_wii_read(unsigned int* blob_data)
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     bb6:	fe 01       	movw	r30, r28
     bb8:	31 96       	adiw	r30, 0x01	; 1
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	df 01       	movw	r26, r30
     bbe:	1d 92       	st	X+, r1
     bc0:	8a 95       	dec	r24
     bc2:	e9 f7       	brne	.-6      	; 0xbbe <m_wii_read+0x54>
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     bc4:	94 ec       	ldi	r25, 0xC4	; 196
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     bc6:	9e 01       	movw	r18, r28
     bc8:	20 5f       	subi	r18, 0xF0	; 240
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     bcc:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     bd0:	80 91 bc 00 	lds	r24, 0x00BC
     bd4:	87 ff       	sbrs	r24, 7
     bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <m_wii_read+0x66>
		temp[i] = TWDR;
     bd8:	80 91 bb 00 	lds	r24, 0x00BB
     bdc:	81 93       	st	Z+, r24
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     bde:	e2 17       	cp	r30, r18
     be0:	f3 07       	cpc	r31, r19
     be2:	a1 f7       	brne	.-24     	; 0xbcc <m_wii_read+0x62>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     be4:	84 e8       	ldi	r24, 0x84	; 132
     be6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     bea:	80 91 bc 00 	lds	r24, 0x00BC
     bee:	87 ff       	sbrs	r24, 7
     bf0:	fc cf       	rjmp	.-8      	; 0xbea <m_wii_read+0x80>
	temp[15] = TWDR;
     bf2:	80 91 bb 00 	lds	r24, 0x00BB
     bf6:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     bf8:	84 e9       	ldi	r24, 0x94	; 148
     bfa:	80 93 bc 00 	sts	0x00BC, r24
     bfe:	de 01       	movw	r26, r28
     c00:	12 96       	adiw	r26, 0x02	; 2
     c02:	21 2f       	mov	r18, r17
     c04:	30 2f       	mov	r19, r16
     c06:	c9 01       	movw	r24, r18
     c08:	fc 01       	movw	r30, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     c0a:	be 01       	movw	r22, r28
     c0c:	62 5f       	subi	r22, 0xF2	; 242
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	2c 91       	ld	r18, X
     c14:	12 97       	sbiw	r26, 0x02	; 2
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	c9 01       	movw	r24, r18
     c1a:	80 73       	andi	r24, 0x30	; 48
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	54 e0       	ldi	r21, 0x04	; 4
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	5a 95       	dec	r21
     c26:	e1 f7       	brne	.-8      	; 0xc20 <m_wii_read+0xb6>
     c28:	4c 91       	ld	r20, X
     c2a:	84 0f       	add	r24, r20
     c2c:	91 1d       	adc	r25, r1
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     c32:	c9 01       	movw	r24, r18
     c34:	80 7c       	andi	r24, 0xC0	; 192
     c36:	90 70       	andi	r25, 0x00	; 0
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	4c 91       	ld	r20, X
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	84 0f       	add	r24, r20
     c48:	91 1d       	adc	r25, r1
     c4a:	93 83       	std	Z+3, r25	; 0x03
     c4c:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     c4e:	2f 70       	andi	r18, 0x0F	; 15
     c50:	30 70       	andi	r19, 0x00	; 0
     c52:	35 83       	std	Z+5, r19	; 0x05
     c54:	24 83       	std	Z+4, r18	; 0x04
     c56:	13 96       	adiw	r26, 0x03	; 3
     c58:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     c5a:	a6 17       	cp	r26, r22
     c5c:	b7 07       	cpc	r27, r23
     c5e:	c1 f6       	brne	.-80     	; 0xc10 <m_wii_read+0xa6>
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <m_wii_read+0xfc>
     c64:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     c66:	60 96       	adiw	r28, 0x10	; 16
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     c7c:	84 e9       	ldi	r24, 0x94	; 148
     c7e:	80 93 bc 00 	sts	0x00BC, r24
     c82:	08 95       	ret

00000c84 <m_wii_open>:
unsigned char send_byte(unsigned char byte);
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
	m_bus_init();
     c8a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     c8e:	88 e5       	ldi	r24, 0x58	; 88
     c90:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     c94:	88 23       	and	r24, r24
     c96:	09 f4       	brne	.+2      	; 0xc9a <m_wii_open+0x16>
     c98:	b3 c0       	rjmp	.+358    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x30)){return 0;}
     c9a:	80 e3       	ldi	r24, 0x30	; 48
     c9c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <m_wii_open+0x22>
     ca4:	ad c0       	rjmp	.+346    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x01)){return 0;}
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <m_wii_open+0x2e>
     cb0:	a7 c0       	rjmp	.+334    	; 0xe00 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     cb2:	84 e9       	ldi	r24, 0x94	; 148
     cb4:	80 93 bc 00 	sts	0x00BC, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb8:	80 e4       	ldi	r24, 0x40	; 64
     cba:	9c e9       	ldi	r25, 0x9C	; 156
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <m_wii_open+0x38>
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     cc0:	88 e5       	ldi	r24, 0x58	; 88
     cc2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <m_wii_open+0x48>
     cca:	9a c0       	rjmp	.+308    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <m_wii_open+0x54>
     cd6:	94 c0       	rjmp	.+296    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     cde:	88 23       	and	r24, r24
     ce0:	09 f4       	brne	.+2      	; 0xce4 <m_wii_open+0x60>
     ce2:	8e c0       	rjmp	.+284    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     cea:	88 23       	and	r24, r24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <m_wii_open+0x6c>
     cee:	88 c0       	rjmp	.+272    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     cf6:	88 23       	and	r24, r24
     cf8:	09 f4       	brne	.+2      	; 0xcfc <m_wii_open+0x78>
     cfa:	82 c0       	rjmp	.+260    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <m_wii_open+0x84>
     d06:	7c c0       	rjmp	.+248    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d0e:	88 23       	and	r24, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <m_wii_open+0x90>
     d12:	76 c0       	rjmp	.+236    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d1a:	88 23       	and	r24, r24
     d1c:	09 f4       	brne	.+2      	; 0xd20 <m_wii_open+0x9c>
     d1e:	70 c0       	rjmp	.+224    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x90)){return 0;} // p0
     d20:	80 e9       	ldi	r24, 0x90	; 144
     d22:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d26:	88 23       	and	r24, r24
     d28:	09 f4       	brne	.+2      	; 0xd2c <m_wii_open+0xa8>
     d2a:	6a c0       	rjmp	.+212    	; 0xe00 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d2c:	14 e9       	ldi	r17, 0x94	; 148
     d2e:	10 93 bc 00 	sts	0x00BC, r17
     d32:	c0 e4       	ldi	r28, 0x40	; 64
     d34:	dc e9       	ldi	r29, 0x9C	; 156
     d36:	ce 01       	movw	r24, r28
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <m_wii_open+0xb4>
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     d3c:	88 e5       	ldi	r24, 0x58	; 88
     d3e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     d42:	88 23       	and	r24, r24
     d44:	09 f4       	brne	.+2      	; 0xd48 <m_wii_open+0xc4>
     d46:	5c c0       	rjmp	.+184    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x07)){return 0;}
     d48:	87 e0       	ldi	r24, 0x07	; 7
     d4a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <m_wii_open+0xd0>
     d52:	56 c0       	rjmp	.+172    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <m_wii_open+0xdc>
     d5e:	50 c0       	rjmp	.+160    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x41)){return 0;} // p1
     d60:	81 e4       	ldi	r24, 0x41	; 65
     d62:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <m_wii_open+0xe8>
     d6a:	4a c0       	rjmp	.+148    	; 0xe00 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d6c:	10 93 bc 00 	sts	0x00BC, r17
     d70:	ce 01       	movw	r24, r28
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <m_wii_open+0xee>
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     d76:	88 e5       	ldi	r24, 0x58	; 88
     d78:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     d7c:	88 23       	and	r24, r24
     d7e:	09 f4       	brne	.+2      	; 0xd82 <m_wii_open+0xfe>
     d80:	3f c0       	rjmp	.+126    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x1A)){return 0;}
     d82:	8a e1       	ldi	r24, 0x1A	; 26
     d84:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d88:	88 23       	and	r24, r24
     d8a:	09 f4       	brne	.+2      	; 0xd8e <m_wii_open+0x10a>
     d8c:	39 c0       	rjmp	.+114    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x40)){return 0;} // p2
     d8e:	80 e4       	ldi	r24, 0x40	; 64
     d90:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d94:	88 23       	and	r24, r24
     d96:	a1 f1       	breq	.+104    	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;} // p3
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     d9e:	88 23       	and	r24, r24
     da0:	79 f1       	breq	.+94     	; 0xe00 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     da2:	10 93 bc 00 	sts	0x00BC, r17
     da6:	ce 01       	movw	r24, r28
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <m_wii_open+0x124>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     dac:	88 e5       	ldi	r24, 0x58	; 88
     dae:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     db2:	88 23       	and	r24, r24
     db4:	29 f1       	breq	.+74     	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x33)){return 0;}
     db6:	83 e3       	ldi	r24, 0x33	; 51
     db8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     dbc:	88 23       	and	r24, r24
     dbe:	01 f1       	breq	.+64     	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x03)){return 0;}
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     dc6:	88 23       	and	r24, r24
     dc8:	d9 f0       	breq	.+54     	; 0xe00 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     dca:	10 93 bc 00 	sts	0x00BC, r17
     dce:	ce 01       	movw	r24, r28
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <m_wii_open+0x14c>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     dd4:	88 e5       	ldi	r24, 0x58	; 88
     dd6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <start_write>
     dda:	88 23       	and	r24, r24
     ddc:	89 f0       	breq	.+34     	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x30)){return 0;}
     dde:	80 e3       	ldi	r24, 0x30	; 48
     de0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     de4:	88 23       	and	r24, r24
     de6:	61 f0       	breq	.+24     	; 0xe00 <m_wii_open+0x17c>
	if(!send_byte(0x08)){return 0;}
     de8:	88 e0       	ldi	r24, 0x08	; 8
     dea:	0e 94 79 05 	call	0xaf2	; 0xaf2 <send_byte>
     dee:	88 23       	and	r24, r24
     df0:	39 f0       	breq	.+14     	; 0xe00 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     df2:	10 93 bc 00 	sts	0x00BC, r17
     df6:	ce 01       	movw	r24, r28
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <m_wii_open+0x174>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <m_wii_open+0x17e>
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     e00:	80 e0       	ldi	r24, 0x00	; 0
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	08 95       	ret

00000e0a <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     e10:	80 ea       	ldi	r24, 0xA0	; 160
     e12:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     e16:	82 e1       	ldi	r24, 0x12	; 18
     e18:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     e1a:	09 b4       	in	r0, 0x29	; 41
     e1c:	00 fe       	sbrs	r0, 0
     e1e:	fd cf       	rjmp	.-6      	; 0xe1a <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     e20:	80 e9       	ldi	r24, 0x90	; 144
     e22:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     e26:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     e2a:	10 92 53 02 	sts	0x0253, r1
	cdc_line_rtsdtr = 0;
     e2e:	10 92 54 02 	sts	0x0254, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     e32:	8c e0       	ldi	r24, 0x0C	; 12
     e34:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     e38:	78 94       	sei
}
     e3a:	08 95       	ret

00000e3c <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
     e3c:	80 91 53 02 	lds	r24, 0x0253
}
     e40:	08 95       	ret

00000e42 <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     e42:	2f b7       	in	r18, 0x3f	; 63
	cli();
     e44:	f8 94       	cli
	if (!usb_configuration) {
     e46:	80 91 53 02 	lds	r24, 0x0253
     e4a:	88 23       	and	r24, r24
     e4c:	39 f0       	breq	.+14     	; 0xe5c <m_usb_rx_char+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     e54:	80 91 e8 00 	lds	r24, 0x00E8
     e58:	85 fd       	sbrc	r24, 5
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <m_usb_rx_char+0x20>
		// no data in buffer
		SREG = intr_state;
     e5c:	2f bf       	out	0x3f, r18	; 63
     e5e:	9f ef       	ldi	r25, 0xFF	; 255
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <m_usb_rx_char+0x34>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     e62:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     e66:	80 91 e8 00 	lds	r24, 0x00E8
     e6a:	85 fd       	sbrc	r24, 5
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <m_usb_rx_char+0x32>
     e6e:	8b e6       	ldi	r24, 0x6B	; 107
     e70:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     e74:	2f bf       	out	0x3f, r18	; 63
	return (char)c;
}
     e76:	89 2f       	mov	r24, r25
     e78:	08 95       	ret

00000e7a <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     e7a:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e7c:	f8 94       	cli
	if (usb_configuration) {
     e7e:	80 91 53 02 	lds	r24, 0x0253
     e82:	88 23       	and	r24, r24
     e84:	29 f0       	breq	.+10     	; 0xe90 <m_usb_rx_available+0x16>
		UENUM = CDC_RX_ENDPOINT;
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     e8c:	80 91 f2 00 	lds	r24, 0x00F2
	}
	SREG = intr_state;
     e90:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     e92:	08 95       	ret

00000e94 <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     e94:	80 91 53 02 	lds	r24, 0x0253
     e98:	88 23       	and	r24, r24
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <m_usb_rx_flush+0x24>
		intr_state = SREG;
     e9c:	9f b7       	in	r25, 0x3f	; 63
		cli();
     e9e:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     ea6:	2b e6       	ldi	r18, 0x6B	; 107
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <m_usb_rx_flush+0x1a>
     eaa:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     eae:	80 91 e8 00 	lds	r24, 0x00E8
     eb2:	85 fd       	sbrc	r24, 5
     eb4:	fa cf       	rjmp	.-12     	; 0xeaa <m_usb_rx_flush+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     eb6:	9f bf       	out	0x3f, r25	; 63
     eb8:	08 95       	ret

00000eba <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     eba:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     ebc:	80 91 53 02 	lds	r24, 0x0253
     ec0:	88 23       	and	r24, r24
     ec2:	d9 f1       	breq	.+118    	; 0xf3a <m_usb_tx_char+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     ec4:	2f b7       	in	r18, 0x3f	; 63
	cli();
     ec6:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     ece:	80 91 56 02 	lds	r24, 0x0256
     ed2:	88 23       	and	r24, r24
     ed4:	41 f0       	breq	.+16     	; 0xee6 <m_usb_tx_char+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     ed6:	80 91 e8 00 	lds	r24, 0x00E8
     eda:	85 fd       	sbrc	r24, 5
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <m_usb_tx_char+0x28>
			SREG = intr_state;
     ede:	2f bf       	out	0x3f, r18	; 63
     ee0:	12 c0       	rjmp	.+36     	; 0xf06 <m_usb_tx_char+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     ee2:	10 92 56 02 	sts	0x0256, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     ee6:	90 91 e4 00 	lds	r25, 0x00E4
     eea:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     eec:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     eee:	80 91 e8 00 	lds	r24, 0x00E8
     ef2:	85 fd       	sbrc	r24, 5
     ef4:	13 c0       	rjmp	.+38     	; 0xf1c <m_usb_tx_char+0x62>
		SREG = intr_state;
     ef6:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     ef8:	80 91 e4 00 	lds	r24, 0x00E4
     efc:	89 17       	cp	r24, r25
     efe:	29 f4       	brne	.+10     	; 0xf0a <m_usb_tx_char+0x50>
			transmit_previous_timeout = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 56 02 	sts	0x0256, r24
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     f0a:	80 91 53 02 	lds	r24, 0x0253
     f0e:	88 23       	and	r24, r24
     f10:	a1 f0       	breq	.+40     	; 0xf3a <m_usb_tx_char+0x80>
		// get ready to try checking again
		intr_state = SREG;
     f12:	2f b7       	in	r18, 0x3f	; 63
		cli();
     f14:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     f16:	30 93 e9 00 	sts	0x00E9, r19
     f1a:	e9 cf       	rjmp	.-46     	; 0xeee <m_usb_tx_char+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     f1c:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     f20:	80 91 e8 00 	lds	r24, 0x00E8
     f24:	85 fd       	sbrc	r24, 5
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <m_usb_tx_char+0x74>
     f28:	8a e3       	ldi	r24, 0x3A	; 58
     f2a:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     f2e:	85 e0       	ldi	r24, 0x05	; 5
     f30:	80 93 55 02 	sts	0x0255, r24
	SREG = intr_state;
     f34:	2f bf       	out	0x3f, r18	; 63
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	08 95       	ret
	return 0;
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
}
     f3c:	08 95       	ret

00000f3e <usb_serial_putchar_nowait>:


// transmit a character, but do not wait if the buffer is full,
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
     f3e:	28 2f       	mov	r18, r24
	uint8_t intr_state;

	if (!usb_configuration) return -1;
     f40:	80 91 53 02 	lds	r24, 0x0253
     f44:	88 23       	and	r24, r24
     f46:	51 f0       	breq	.+20     	; 0xf5c <usb_serial_putchar_nowait+0x1e>
	intr_state = SREG;
     f48:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f4a:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     f52:	80 91 e8 00 	lds	r24, 0x00E8
     f56:	85 fd       	sbrc	r24, 5
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <usb_serial_putchar_nowait+0x22>
		// buffer is full
		SREG = intr_state;
     f5a:	9f bf       	out	0x3f, r25	; 63
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	08 95       	ret
		return -1;
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     f60:	20 93 f1 00 	sts	0x00F1, r18
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     f64:	80 91 e8 00 	lds	r24, 0x00E8
     f68:	85 fd       	sbrc	r24, 5
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <usb_serial_putchar_nowait+0x34>
     f6c:	8a e3       	ldi	r24, 0x3A	; 58
     f6e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	80 93 55 02 	sts	0x0255, r24
	SREG = intr_state;
     f78:	9f bf       	out	0x3f, r25	; 63
     f7a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     f7c:	08 95       	ret

00000f7e <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     f84:	80 91 53 02 	lds	r24, 0x0253
     f88:	88 23       	and	r24, r24
     f8a:	09 f4       	brne	.+2      	; 0xf8e <usb_serial_write+0x10>
     f8c:	1c c1       	rjmp	.+568    	; 0x11c6 <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     f8e:	3f b7       	in	r19, 0x3f	; 63
	cli();
     f90:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     f92:	84 e0       	ldi	r24, 0x04	; 4
     f94:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     f98:	80 91 56 02 	lds	r24, 0x0256
     f9c:	88 23       	and	r24, r24
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <usb_serial_write+0x24>
     fa0:	07 c1       	rjmp	.+526    	; 0x11b0 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
     fa2:	80 91 e8 00 	lds	r24, 0x00E8
     fa6:	85 fd       	sbrc	r24, 5
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <usb_serial_write+0x30>
			SREG = intr_state;
     faa:	3f bf       	out	0x3f, r19	; 63
     fac:	0c c1       	rjmp	.+536    	; 0x11c6 <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     fae:	10 92 56 02 	sts	0x0256, r1
     fb2:	fe c0       	rjmp	.+508    	; 0x11b0 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     fb4:	90 91 e4 00 	lds	r25, 0x00E4
     fb8:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     fba:	80 91 e8 00 	lds	r24, 0x00E8
     fbe:	85 fd       	sbrc	r24, 5
     fc0:	13 c0       	rjmp	.+38     	; 0xfe8 <usb_serial_write+0x6a>
			SREG = intr_state;
     fc2:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     fc4:	80 91 e4 00 	lds	r24, 0x00E4
     fc8:	89 17       	cp	r24, r25
     fca:	21 f4       	brne	.+8      	; 0xfd4 <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 56 02 	sts	0x0256, r24
     fd2:	f9 c0       	rjmp	.+498    	; 0x11c6 <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     fd4:	80 91 53 02 	lds	r24, 0x0253
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <usb_serial_write+0x60>
     fdc:	f4 c0       	rjmp	.+488    	; 0x11c6 <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     fde:	3f b7       	in	r19, 0x3f	; 63
			cli();
     fe0:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     fe2:	50 93 e9 00 	sts	0x00E9, r21
     fe6:	e9 cf       	rjmp	.-46     	; 0xfba <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     fe8:	80 91 f2 00 	lds	r24, 0x00F2
     fec:	2a 2f       	mov	r18, r26
     fee:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     ff0:	82 2f       	mov	r24, r18
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	68 17       	cp	r22, r24
     ff6:	79 07       	cpc	r23, r25
     ff8:	08 f4       	brcc	.+2      	; 0xffc <usb_serial_write+0x7e>
     ffa:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     ffc:	82 2f       	mov	r24, r18
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	81 34       	cpi	r24, 0x41	; 65
    1002:	91 05       	cpc	r25, r1
    1004:	08 f0       	brcs	.+2      	; 0x1008 <usb_serial_write+0x8a>
    1006:	c6 c0       	rjmp	.+396    	; 0x1194 <usb_serial_write+0x216>
    1008:	8a 5a       	subi	r24, 0xAA	; 170
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	fc 01       	movw	r30, r24
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	05 90       	lpm	r0, Z+
    1014:	f4 91       	lpm	r31, Z+
    1016:	e0 2d       	mov	r30, r0
    1018:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
    101a:	89 91       	ld	r24, Y+
    101c:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
    1020:	89 91       	ld	r24, Y+
    1022:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
    1026:	89 91       	ld	r24, Y+
    1028:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
    102c:	89 91       	ld	r24, Y+
    102e:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
    1032:	89 91       	ld	r24, Y+
    1034:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
    1038:	89 91       	ld	r24, Y+
    103a:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
    103e:	89 91       	ld	r24, Y+
    1040:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
    1044:	89 91       	ld	r24, Y+
    1046:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
    104a:	89 91       	ld	r24, Y+
    104c:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
    1050:	89 91       	ld	r24, Y+
    1052:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
    1056:	89 91       	ld	r24, Y+
    1058:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
    105c:	89 91       	ld	r24, Y+
    105e:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
    1062:	89 91       	ld	r24, Y+
    1064:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
    1068:	89 91       	ld	r24, Y+
    106a:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
    106e:	89 91       	ld	r24, Y+
    1070:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
    1074:	89 91       	ld	r24, Y+
    1076:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
    107a:	89 91       	ld	r24, Y+
    107c:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
    1080:	89 91       	ld	r24, Y+
    1082:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
    1086:	89 91       	ld	r24, Y+
    1088:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
    108c:	89 91       	ld	r24, Y+
    108e:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
    1092:	89 91       	ld	r24, Y+
    1094:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
    1098:	89 91       	ld	r24, Y+
    109a:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
    109e:	89 91       	ld	r24, Y+
    10a0:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
    10a4:	89 91       	ld	r24, Y+
    10a6:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
    10aa:	89 91       	ld	r24, Y+
    10ac:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
    10b0:	89 91       	ld	r24, Y+
    10b2:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
    10b6:	89 91       	ld	r24, Y+
    10b8:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
    10bc:	89 91       	ld	r24, Y+
    10be:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
    10c2:	89 91       	ld	r24, Y+
    10c4:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
    10c8:	89 91       	ld	r24, Y+
    10ca:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
    10ce:	89 91       	ld	r24, Y+
    10d0:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
    10d4:	89 91       	ld	r24, Y+
    10d6:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
    10da:	89 91       	ld	r24, Y+
    10dc:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
    10e0:	89 91       	ld	r24, Y+
    10e2:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
    10e6:	89 91       	ld	r24, Y+
    10e8:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
    10ec:	89 91       	ld	r24, Y+
    10ee:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
    10f2:	89 91       	ld	r24, Y+
    10f4:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
    10f8:	89 91       	ld	r24, Y+
    10fa:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
    10fe:	89 91       	ld	r24, Y+
    1100:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
    1104:	89 91       	ld	r24, Y+
    1106:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
    110a:	89 91       	ld	r24, Y+
    110c:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
    1110:	89 91       	ld	r24, Y+
    1112:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
    1116:	89 91       	ld	r24, Y+
    1118:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
    111c:	89 91       	ld	r24, Y+
    111e:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
    1122:	89 91       	ld	r24, Y+
    1124:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
    1128:	89 91       	ld	r24, Y+
    112a:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
    112e:	89 91       	ld	r24, Y+
    1130:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
    1134:	89 91       	ld	r24, Y+
    1136:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    113a:	89 91       	ld	r24, Y+
    113c:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
    1140:	89 91       	ld	r24, Y+
    1142:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
    1146:	89 91       	ld	r24, Y+
    1148:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
    114c:	89 91       	ld	r24, Y+
    114e:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
    1152:	89 91       	ld	r24, Y+
    1154:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
    1158:	89 91       	ld	r24, Y+
    115a:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
    115e:	89 91       	ld	r24, Y+
    1160:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
    1164:	89 91       	ld	r24, Y+
    1166:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
    116a:	89 91       	ld	r24, Y+
    116c:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
    1170:	89 91       	ld	r24, Y+
    1172:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
    1176:	89 91       	ld	r24, Y+
    1178:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
    117c:	89 91       	ld	r24, Y+
    117e:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
    1182:	89 91       	ld	r24, Y+
    1184:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
    1188:	89 91       	ld	r24, Y+
    118a:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
    118e:	89 91       	ld	r24, Y+
    1190:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
    1194:	89 91       	ld	r24, Y+
    1196:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    119a:	80 91 e8 00 	lds	r24, 0x00E8
    119e:	85 fd       	sbrc	r24, 5
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <usb_serial_write+0x228>
    11a2:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
    11a6:	62 1b       	sub	r22, r18
    11a8:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    11aa:	40 93 55 02 	sts	0x0255, r20
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
    11b0:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    11b2:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    11b4:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    11b6:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    11b8:	61 15       	cp	r22, r1
    11ba:	71 05       	cpc	r23, r1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <usb_serial_write+0x242>
    11be:	fa ce       	rjmp	.-524    	; 0xfb4 <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    11c0:	3f bf       	out	0x3f, r19	; 63
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <usb_serial_write+0x24a>
	return 0;
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <m_usb_tx_push>:
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
	uint8_t intr_state;

	intr_state = SREG;
    11ce:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11d0:	f8 94       	cli
	if (transmit_flush_timer) {
    11d2:	80 91 55 02 	lds	r24, 0x0255
    11d6:	88 23       	and	r24, r24
    11d8:	41 f0       	breq	.+16     	; 0x11ea <m_usb_tx_push+0x1c>
		UENUM = CDC_TX_ENDPOINT;
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	80 93 e9 00 	sts	0x00E9, r24
		UEINTX = 0x3A;
    11e0:	8a e3       	ldi	r24, 0x3A	; 58
    11e2:	80 93 e8 00 	sts	0x00E8, r24
		transmit_flush_timer = 0;
    11e6:	10 92 55 02 	sts	0x0255, r1
	}
	SREG = intr_state;
    11ea:	9f bf       	out	0x3f, r25	; 63
}
    11ec:	08 95       	ret

000011ee <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
    11ee:	60 91 0c 01 	lds	r22, 0x010C
    11f2:	70 91 0d 01 	lds	r23, 0x010D
	return *(uint32_t *)cdc_line_coding;
}
    11f6:	80 91 0e 01 	lds	r24, 0x010E
    11fa:	90 91 0f 01 	lds	r25, 0x010F
    11fe:	08 95       	ret

00001200 <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
	return cdc_line_coding[4];
}
    1200:	80 91 10 01 	lds	r24, 0x0110
    1204:	08 95       	ret

00001206 <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
	return cdc_line_coding[5];
}
    1206:	80 91 11 01 	lds	r24, 0x0111
    120a:	08 95       	ret

0000120c <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
	return cdc_line_coding[6];
}
    120c:	80 91 12 01 	lds	r24, 0x0112
    1210:	08 95       	ret

00001212 <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
    1212:	80 91 54 02 	lds	r24, 0x0254
    1216:	08 95       	ret

00001218 <usb_serial_set_control>:
// lost because you weren't listening at the right time, like it
// would in real serial communication.
// TODO: this function is untested.  Does it work?  Please email
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
    1218:	38 2f       	mov	r19, r24
	uint8_t intr_state;

	intr_state = SREG;
    121a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    121c:	f8 94       	cli
	if (!usb_configuration) {
    121e:	80 91 53 02 	lds	r24, 0x0253
    1222:	88 23       	and	r24, r24
    1224:	39 f0       	breq	.+14     	; 0x1234 <usb_serial_set_control+0x1c>
		// we're not enumerated/configured
		SREG = intr_state;
		return -1;
	}

	UENUM = CDC_ACM_ENDPOINT;
    1226:	22 e0       	ldi	r18, 0x02	; 2
    1228:	20 93 e9 00 	sts	0x00E9, r18
	if (!(UEINTX & (1<<RWAL))) {
    122c:	80 91 e8 00 	lds	r24, 0x00E8
    1230:	85 fd       	sbrc	r24, 5
    1232:	03 c0       	rjmp	.+6      	; 0x123a <usb_serial_set_control+0x22>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
    1234:	9f bf       	out	0x3f, r25	; 63
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	08 95       	ret
		return -1;
	}
	UEDATX = 0xA1;
    123a:	81 ea       	ldi	r24, 0xA1	; 161
    123c:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0x20;
    1240:	80 e2       	ldi	r24, 0x20	; 32
    1242:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
    1246:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
    124a:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
    124e:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
    1252:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 2;
    1256:	20 93 f1 00 	sts	0x00F1, r18
	UEDATX = 0;
    125a:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = signals;
    125e:	30 93 f1 00 	sts	0x00F1, r19
	UEDATX = 0;
    1262:	10 92 f1 00 	sts	0x00F1, r1
	UEINTX = 0x3A;
    1266:	8a e3       	ldi	r24, 0x3A	; 58
    1268:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    126c:	9f bf       	out	0x3f, r25	; 63
    126e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    1270:	08 95       	ret

00001272 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    1280:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    1284:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    1288:	98 2f       	mov	r25, r24
    128a:	83 ff       	sbrs	r24, 3
    128c:	11 c0       	rjmp	.+34     	; 0x12b0 <__vector_10+0x3e>
		UENUM = 0;
    128e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    1298:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    129c:	82 e1       	ldi	r24, 0x12	; 18
    129e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    12a8:	10 92 53 02 	sts	0x0253, r1
		cdc_line_rtsdtr = 0;
    12ac:	10 92 54 02 	sts	0x0254, r1
        }
	if (intbits & (1<<SOFI)) {
    12b0:	92 ff       	sbrs	r25, 2
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <__vector_10+0x68>
		if (usb_configuration) {
    12b4:	80 91 53 02 	lds	r24, 0x0253
    12b8:	88 23       	and	r24, r24
    12ba:	79 f0       	breq	.+30     	; 0x12da <__vector_10+0x68>
			t = transmit_flush_timer;
    12bc:	80 91 55 02 	lds	r24, 0x0255
			if (t) {
    12c0:	88 23       	and	r24, r24
    12c2:	59 f0       	breq	.+22     	; 0x12da <__vector_10+0x68>
				transmit_flush_timer = --t;
    12c4:	81 50       	subi	r24, 0x01	; 1
    12c6:	80 93 55 02 	sts	0x0255, r24
				if (!t) {
    12ca:	88 23       	and	r24, r24
    12cc:	31 f4       	brne	.+12     	; 0x12da <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
    12ce:	84 e0       	ldi	r24, 0x04	; 4
    12d0:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    12d4:	8a e3       	ldi	r24, 0x3A	; 58
    12d6:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    130e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1312:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1316:	83 ff       	sbrs	r24, 3
    1318:	3c c1       	rjmp	.+632    	; 0x1592 <__vector_11+0x2aa>
                bmRequestType = UEDATX;
    131a:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    131e:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    1322:	80 91 f1 00 	lds	r24, 0x00F1
    1326:	68 2f       	mov	r22, r24
    1328:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    132a:	20 91 f1 00 	lds	r18, 0x00F1
    132e:	92 2f       	mov	r25, r18
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	68 2b       	or	r22, r24
    1334:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    1336:	80 91 f1 00 	lds	r24, 0x00F1
    133a:	a8 2f       	mov	r26, r24
    133c:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    133e:	20 91 f1 00 	lds	r18, 0x00F1
    1342:	92 2f       	mov	r25, r18
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	a8 2b       	or	r26, r24
    1348:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    134a:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    134e:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1352:	82 ef       	ldi	r24, 0xF2	; 242
    1354:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1358:	36 30       	cpi	r19, 0x06	; 6
    135a:	09 f0       	breq	.+2      	; 0x135e <__vector_11+0x76>
    135c:	5a c0       	rjmp	.+180    	; 0x1412 <__vector_11+0x12a>
    135e:	28 e7       	ldi	r18, 0x78	; 120
    1360:	31 e0       	ldi	r19, 0x01	; 1
    1362:	a9 01       	movw	r20, r18
    1364:	45 50       	subi	r20, 0x05	; 5
    1366:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    1368:	f9 01       	movw	r30, r18
    136a:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    136c:	85 91       	lpm	r24, Z+
    136e:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    1370:	86 17       	cp	r24, r22
    1372:	97 07       	cpc	r25, r23
    1374:	01 f5       	brne	.+64     	; 0x13b6 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    1376:	fa 01       	movw	r30, r20
    1378:	85 91       	lpm	r24, Z+
    137a:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    137c:	8a 17       	cp	r24, r26
    137e:	9b 07       	cpc	r25, r27
    1380:	d1 f4       	brne	.+52     	; 0x13b6 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    1382:	9a 01       	movw	r18, r20
    1384:	2e 5f       	subi	r18, 0xFE	; 254
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1388:	f9 01       	movw	r30, r18
    138a:	65 91       	lpm	r22, Z+
    138c:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    138e:	2e 5f       	subi	r18, 0xFE	; 254
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	f9 01       	movw	r30, r18
    1394:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    1396:	21 2f       	mov	r18, r17
    1398:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    139a:	90 2f       	mov	r25, r16
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	28 2b       	or	r18, r24
    13a0:	39 2b       	or	r19, r25
    13a2:	2f 3f       	cpi	r18, 0xFF	; 255
    13a4:	31 05       	cpc	r19, r1
    13a6:	19 f0       	breq	.+6      	; 0x13ae <__vector_11+0xc6>
    13a8:	10 f0       	brcs	.+4      	; 0x13ae <__vector_11+0xc6>
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	24 17       	cp	r18, r20
    13b0:	58 f4       	brcc	.+22     	; 0x13c8 <__vector_11+0xe0>
    13b2:	42 2f       	mov	r20, r18
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <__vector_11+0xe0>
    13b6:	29 5f       	subi	r18, 0xF9	; 249
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	49 5f       	subi	r20, 0xF9	; 249
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	22 3a       	cpi	r18, 0xA2	; 162
    13c2:	3f 07       	cpc	r19, r31
    13c4:	89 f6       	brne	.-94     	; 0x1368 <__vector_11+0x80>
    13c6:	e5 c0       	rjmp	.+458    	; 0x1592 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    13c8:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    13ca:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	c9 01       	movw	r24, r18
    13d4:	85 70       	andi	r24, 0x05	; 5
    13d6:	90 70       	andi	r25, 0x00	; 0
    13d8:	89 2b       	or	r24, r25
    13da:	b9 f3       	breq	.-18     	; 0x13ca <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    13dc:	22 fd       	sbrc	r18, 2
    13de:	dc c0       	rjmp	.+440    	; 0x1598 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    13e0:	34 2f       	mov	r19, r20
    13e2:	41 31       	cpi	r20, 0x11	; 17
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <__vector_11+0x100>
    13e6:	30 e1       	ldi	r19, 0x10	; 16
    13e8:	23 2f       	mov	r18, r19
    13ea:	cb 01       	movw	r24, r22
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <__vector_11+0x112>
				for (i = n; i; i--) {
    13ee:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	e4 91       	lpm	r30, Z+
    13f4:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    13f8:	21 50       	subi	r18, 0x01	; 1
    13fa:	22 23       	and	r18, r18
    13fc:	c1 f7       	brne	.-16     	; 0x13ee <__vector_11+0x106>
    13fe:	63 0f       	add	r22, r19
    1400:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1402:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1404:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1408:	44 23       	and	r20, r20
    140a:	f9 f6       	brne	.-66     	; 0x13ca <__vector_11+0xe2>
    140c:	30 31       	cpi	r19, 0x10	; 16
    140e:	e9 f2       	breq	.-70     	; 0x13ca <__vector_11+0xe2>
    1410:	c3 c0       	rjmp	.+390    	; 0x1598 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1412:	35 30       	cpi	r19, 0x05	; 5
    1414:	61 f4       	brne	.+24     	; 0x142e <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1416:	8e ef       	ldi	r24, 0xFE	; 254
    1418:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    141c:	80 91 e8 00 	lds	r24, 0x00E8
    1420:	80 ff       	sbrs	r24, 0
    1422:	fc cf       	rjmp	.-8      	; 0x141c <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1424:	86 2f       	mov	r24, r22
    1426:	80 68       	ori	r24, 0x80	; 128
    1428:	80 93 e3 00 	sts	0x00E3, r24
    142c:	b5 c0       	rjmp	.+362    	; 0x1598 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    142e:	39 30       	cpi	r19, 0x09	; 9
    1430:	51 f5       	brne	.+84     	; 0x1486 <__vector_11+0x19e>
    1432:	44 23       	and	r20, r20
    1434:	09 f0       	breq	.+2      	; 0x1438 <__vector_11+0x150>
    1436:	ad c0       	rjmp	.+346    	; 0x1592 <__vector_11+0x2aa>
			usb_configuration = wValue;
    1438:	60 93 53 02 	sts	0x0253, r22
			cdc_line_rtsdtr = 0;
    143c:	10 92 54 02 	sts	0x0254, r1
			transmit_flush_timer = 0;
    1440:	10 92 55 02 	sts	0x0255, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1444:	8e ef       	ldi	r24, 0xFE	; 254
    1446:	80 93 e8 00 	sts	0x00E8, r24
    144a:	8b e9       	ldi	r24, 0x9B	; 155
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1450:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    1454:	fc 01       	movw	r30, r24
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	e4 91       	lpm	r30, Z+
				UECONX = en;
    145a:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    145e:	ee 23       	and	r30, r30
    1460:	69 f0       	breq	.+26     	; 0x147c <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
    1462:	ac 01       	movw	r20, r24
    1464:	4f 5f       	subi	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	fc 01       	movw	r30, r24
    146a:	84 91       	lpm	r24, Z+
    146c:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    1470:	ca 01       	movw	r24, r20
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	fa 01       	movw	r30, r20
    1476:	34 91       	lpm	r19, Z+
    1478:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    147c:	2f 5f       	subi	r18, 0xFF	; 255
    147e:	25 30       	cpi	r18, 0x05	; 5
    1480:	39 f7       	brne	.-50     	; 0x1450 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1482:	8e e1       	ldi	r24, 0x1E	; 30
    1484:	81 c0       	rjmp	.+258    	; 0x1588 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1486:	38 30       	cpi	r19, 0x08	; 8
    1488:	61 f4       	brne	.+24     	; 0x14a2 <__vector_11+0x1ba>
    148a:	40 38       	cpi	r20, 0x80	; 128
    148c:	09 f0       	breq	.+2      	; 0x1490 <__vector_11+0x1a8>
    148e:	81 c0       	rjmp	.+258    	; 0x1592 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1490:	80 91 e8 00 	lds	r24, 0x00E8
    1494:	80 ff       	sbrs	r24, 0
    1496:	fc cf       	rjmp	.-8      	; 0x1490 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1498:	80 91 53 02 	lds	r24, 0x0253
    149c:	80 93 f1 00 	sts	0x00F1, r24
    14a0:	50 c0       	rjmp	.+160    	; 0x1542 <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    14a2:	31 32       	cpi	r19, 0x21	; 33
    14a4:	89 f4       	brne	.+34     	; 0x14c8 <__vector_11+0x1e0>
    14a6:	41 3a       	cpi	r20, 0xA1	; 161
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__vector_11+0x1c4>
    14aa:	73 c0       	rjmp	.+230    	; 0x1592 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    14ac:	80 91 e8 00 	lds	r24, 0x00E8
    14b0:	80 ff       	sbrs	r24, 0
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <__vector_11+0x1c4>
    14b4:	ec e0       	ldi	r30, 0x0C	; 12
    14b6:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    14b8:	81 91       	ld	r24, Z+
    14ba:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	e3 31       	cpi	r30, 0x13	; 19
    14c2:	f8 07       	cpc	r31, r24
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__vector_11+0x1d0>
    14c6:	3d c0       	rjmp	.+122    	; 0x1542 <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    14c8:	30 32       	cpi	r19, 0x20	; 32
    14ca:	a1 f4       	brne	.+40     	; 0x14f4 <__vector_11+0x20c>
    14cc:	41 32       	cpi	r20, 0x21	; 33
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <__vector_11+0x1ea>
    14d0:	60 c0       	rjmp	.+192    	; 0x1592 <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    14d2:	80 91 e8 00 	lds	r24, 0x00E8
    14d6:	82 ff       	sbrs	r24, 2
    14d8:	fc cf       	rjmp	.-8      	; 0x14d2 <__vector_11+0x1ea>
    14da:	ec e0       	ldi	r30, 0x0C	; 12
    14dc:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    14de:	80 91 f1 00 	lds	r24, 0x00F1
    14e2:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	e3 31       	cpi	r30, 0x13	; 19
    14e8:	f8 07       	cpc	r31, r24
    14ea:	c9 f7       	brne	.-14     	; 0x14de <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    14ec:	8b ef       	ldi	r24, 0xFB	; 251
    14ee:	80 93 e8 00 	sts	0x00E8, r24
    14f2:	27 c0       	rjmp	.+78     	; 0x1542 <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    14f4:	32 32       	cpi	r19, 0x22	; 34
    14f6:	51 f4       	brne	.+20     	; 0x150c <__vector_11+0x224>
    14f8:	41 32       	cpi	r20, 0x21	; 33
    14fa:	09 f0       	breq	.+2      	; 0x14fe <__vector_11+0x216>
    14fc:	4a c0       	rjmp	.+148    	; 0x1592 <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    14fe:	60 93 54 02 	sts	0x0254, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1502:	80 91 e8 00 	lds	r24, 0x00E8
    1506:	80 ff       	sbrs	r24, 0
    1508:	fc cf       	rjmp	.-8      	; 0x1502 <__vector_11+0x21a>
    150a:	1b c0       	rjmp	.+54     	; 0x1542 <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    150c:	33 23       	and	r19, r19
    150e:	e9 f4       	brne	.+58     	; 0x154a <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1510:	80 91 e8 00 	lds	r24, 0x00E8
    1514:	80 ff       	sbrs	r24, 0
    1516:	fc cf       	rjmp	.-8      	; 0x1510 <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1518:	42 38       	cpi	r20, 0x82	; 130
    151a:	11 f0       	breq	.+4      	; 0x1520 <__vector_11+0x238>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0d c0       	rjmp	.+26     	; 0x153a <__vector_11+0x252>
				UENUM = wIndex;
    1520:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    1524:	80 91 eb 00 	lds	r24, 0x00EB
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	25 e0       	ldi	r18, 0x05	; 5
    152c:	96 95       	lsr	r25
    152e:	87 95       	ror	r24
    1530:	2a 95       	dec	r18
    1532:	e1 f7       	brne	.-8      	; 0x152c <__vector_11+0x244>
    1534:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    1536:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    153a:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    153e:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1542:	8e ef       	ldi	r24, 0xFE	; 254
    1544:	80 93 e8 00 	sts	0x00E8, r24
    1548:	27 c0       	rjmp	.+78     	; 0x1598 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    154a:	31 30       	cpi	r19, 0x01	; 1
    154c:	11 f0       	breq	.+4      	; 0x1552 <__vector_11+0x26a>
    154e:	33 30       	cpi	r19, 0x03	; 3
    1550:	01 f5       	brne	.+64     	; 0x1592 <__vector_11+0x2aa>
    1552:	42 30       	cpi	r20, 0x02	; 2
    1554:	f1 f4       	brne	.+60     	; 0x1592 <__vector_11+0x2aa>
    1556:	67 2b       	or	r22, r23
    1558:	e1 f4       	brne	.+56     	; 0x1592 <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    155a:	2a 2f       	mov	r18, r26
    155c:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    155e:	82 2f       	mov	r24, r18
    1560:	81 50       	subi	r24, 0x01	; 1
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	b0 f4       	brcc	.+44     	; 0x1592 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1566:	8e ef       	ldi	r24, 0xFE	; 254
    1568:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    156c:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    1570:	33 30       	cpi	r19, 0x03	; 3
    1572:	79 f0       	breq	.+30     	; 0x1592 <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <__vector_11+0x29c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	2a 95       	dec	r18
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <__vector_11+0x298>
    1588:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    158c:	10 92 ea 00 	sts	0x00EA, r1
    1590:	03 c0       	rjmp	.+6      	; 0x1598 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1592:	81 e2       	ldi	r24, 0x21	; 33
    1594:	80 93 eb 00 	sts	0x00EB, r24
}
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	0f 90       	pop	r0
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	0f 90       	pop	r0
    15ba:	1f 90       	pop	r1
    15bc:	18 95       	reti

000015be <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	ec 01       	movw	r28, r24
    15c6:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    15c8:	21 96       	adiw	r28, 0x01	; 1
    15ca:	14 91       	lpm	r17, Z+
		if (!c) break;
    15cc:	11 23       	and	r17, r17
    15ce:	49 f0       	breq	.+18     	; 0x15e2 <print_P+0x24>
		if (c == '\n') usb_tx_char('\r');
    15d0:	1a 30       	cpi	r17, 0x0A	; 10
    15d2:	19 f4       	brne	.+6      	; 0x15da <print_P+0x1c>
    15d4:	8d e0       	ldi	r24, 0x0D	; 13
    15d6:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>
		usb_tx_char(c);
    15da:	81 2f       	mov	r24, r17
    15dc:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>
    15e0:	f2 cf       	rjmp	.-28     	; 0x15c6 <print_P+0x8>
	}
}
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	08 95       	ret

000015ea <phex1>:

void phex1(unsigned char c)
{
    15ea:	98 2f       	mov	r25, r24
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
    15ec:	8a 30       	cpi	r24, 0x0A	; 10
    15ee:	10 f0       	brcs	.+4      	; 0x15f4 <phex1+0xa>
    15f0:	87 e3       	ldi	r24, 0x37	; 55
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <phex1+0xc>
    15f4:	80 e3       	ldi	r24, 0x30	; 48
    15f6:	89 0f       	add	r24, r25
    15f8:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>
}
    15fc:	08 95       	ret

000015fe <phex>:

void phex(unsigned char c)
{
    15fe:	1f 93       	push	r17
    1600:	18 2f       	mov	r17, r24
	phex1(c >> 4);
    1602:	82 95       	swap	r24
    1604:	8f 70       	andi	r24, 0x0F	; 15
    1606:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <phex1>
	phex1(c & 15);
    160a:	81 2f       	mov	r24, r17
    160c:	8f 70       	andi	r24, 0x0F	; 15
    160e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <phex1>
}
    1612:	1f 91       	pop	r17
    1614:	08 95       	ret

00001616 <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
    1616:	1f 93       	push	r17
    1618:	18 2f       	mov	r17, r24
	phex(i >> 8);
    161a:	89 2f       	mov	r24, r25
    161c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <phex>
	phex(i);
    1620:	81 2f       	mov	r24, r17
    1622:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <phex>
}
    1626:	1f 91       	pop	r17
    1628:	08 95       	ret

0000162a <m_usb_tx_hex8>:

void m_usb_tx_hex8(unsigned char i)
{
	phex(i);
    162a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <phex>
}
    162e:	08 95       	ret

00001630 <m_usb_tx_ulong>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_ulong(unsigned long i)
{
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	2a 97       	sbiw	r28, 0x0a	; 10
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
    164c:	8e 01       	movw	r16, r28
    164e:	0f 5f       	subi	r16, 0xFF	; 255
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	2a e0       	ldi	r18, 0x0A	; 10
    1654:	f8 01       	movw	r30, r16
    1656:	11 92       	st	Z+, r1
    1658:	2a 95       	dec	r18
    165a:	e9 f7       	brne	.-6      	; 0x1656 <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
    165c:	a8 01       	movw	r20, r16
    165e:	2a e0       	ldi	r18, 0x0A	; 10
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	0e 94 62 12 	call	0x24c4	; 0x24c4 <ultoa>
	for(i=0;i<10;i++){
    1666:	3b e0       	ldi	r19, 0x0B	; 11
    1668:	e3 2e       	mov	r14, r19
    166a:	f1 2c       	mov	r15, r1
    166c:	ec 0e       	add	r14, r28
    166e:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    1670:	f8 01       	movw	r30, r16
    1672:	81 91       	ld	r24, Z+
    1674:	8f 01       	movw	r16, r30
    1676:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
    167a:	0e 15       	cp	r16, r14
    167c:	1f 05       	cpc	r17, r15
    167e:	c1 f7       	brne	.-16     	; 0x1670 <m_usb_tx_ulong+0x40>
		m_usb_tx_char(string[i]);
	}
}
    1680:	2a 96       	adiw	r28, 0x0a	; 10
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	1f 91       	pop	r17
    1692:	0f 91       	pop	r16
    1694:	ff 90       	pop	r15
    1696:	ef 90       	pop	r14
    1698:	08 95       	ret

0000169a <m_usb_tx_long>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_long(long i)
{
    169a:	ef 92       	push	r14
    169c:	ff 92       	push	r15
    169e:	0f 93       	push	r16
    16a0:	1f 93       	push	r17
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	2b 97       	sbiw	r28, 0x0b	; 11
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    16b6:	8e 01       	movw	r16, r28
    16b8:	0f 5f       	subi	r16, 0xFF	; 255
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	2b e0       	ldi	r18, 0x0B	; 11
    16be:	f8 01       	movw	r30, r16
    16c0:	11 92       	st	Z+, r1
    16c2:	2a 95       	dec	r18
    16c4:	e9 f7       	brne	.-6      	; 0x16c0 <m_usb_tx_long+0x26>
	ltoa(i,string,10);
    16c6:	a8 01       	movw	r20, r16
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	0e 94 2e 12 	call	0x245c	; 0x245c <ltoa>
	for(i=0;i<11;i++){
    16d0:	4c e0       	ldi	r20, 0x0C	; 12
    16d2:	e4 2e       	mov	r14, r20
    16d4:	f1 2c       	mov	r15, r1
    16d6:	ec 0e       	add	r14, r28
    16d8:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    16da:	f8 01       	movw	r30, r16
    16dc:	81 91       	ld	r24, Z+
    16de:	8f 01       	movw	r16, r30
    16e0:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    16e4:	0e 15       	cp	r16, r14
    16e6:	1f 05       	cpc	r17, r15
    16e8:	c1 f7       	brne	.-16     	; 0x16da <m_usb_tx_long+0x40>
		m_usb_tx_char(string[i]);
	}
}
    16ea:	2b 96       	adiw	r28, 0x0b	; 11
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	08 95       	ret

00001704 <m_usb_tx_uint>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_uint(unsigned int i)
{
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <m_usb_tx_uint+0xe>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <m_usb_tx_uint+0x10>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	char string[5] = {0,0,0,0,0};
    171a:	8e 01       	movw	r16, r28
    171c:	0f 5f       	subi	r16, 0xFF	; 255
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	25 e0       	ldi	r18, 0x05	; 5
    1722:	f8 01       	movw	r30, r16
    1724:	11 92       	st	Z+, r1
    1726:	2a 95       	dec	r18
    1728:	e9 f7       	brne	.-6      	; 0x1724 <m_usb_tx_uint+0x20>
	utoa(i,string,10);
    172a:	b8 01       	movw	r22, r16
    172c:	4a e0       	ldi	r20, 0x0A	; 10
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	0e 94 87 12 	call	0x250e	; 0x250e <utoa>
	for(i=0;i<5;i++){
    1734:	56 e0       	ldi	r21, 0x06	; 6
    1736:	e5 2e       	mov	r14, r21
    1738:	f1 2c       	mov	r15, r1
    173a:	ec 0e       	add	r14, r28
    173c:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    173e:	f8 01       	movw	r30, r16
    1740:	81 91       	ld	r24, Z+
    1742:	8f 01       	movw	r16, r30
    1744:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    1748:	0e 15       	cp	r16, r14
    174a:	1f 05       	cpc	r17, r15
    174c:	c1 f7       	brne	.-16     	; 0x173e <m_usb_tx_uint+0x3a>
		m_usb_tx_char(string[i]);
	}
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	08 95       	ret

00001766 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <m_usb_tx_int+0xe>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <m_usb_tx_int+0x10>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <m_usb_tx_int+0x12>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	char string[6] = {0,0,0,0,0,0};
    177c:	8e 01       	movw	r16, r28
    177e:	0f 5f       	subi	r16, 0xFF	; 255
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	26 e0       	ldi	r18, 0x06	; 6
    1784:	f8 01       	movw	r30, r16
    1786:	11 92       	st	Z+, r1
    1788:	2a 95       	dec	r18
    178a:	e9 f7       	brne	.-6      	; 0x1786 <m_usb_tx_int+0x20>
	itoa(i,string,10);
    178c:	b8 01       	movw	r22, r16
    178e:	4a e0       	ldi	r20, 0x0A	; 10
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	0e 94 0d 12 	call	0x241a	; 0x241a <itoa>
	for(i=0;i<6;i++){
    1796:	67 e0       	ldi	r22, 0x07	; 7
    1798:	e6 2e       	mov	r14, r22
    179a:	f1 2c       	mov	r15, r1
    179c:	ec 0e       	add	r14, r28
    179e:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    17a0:	f8 01       	movw	r30, r16
    17a2:	81 91       	ld	r24, Z+
    17a4:	8f 01       	movw	r16, r30
    17a6:	0e 94 5d 07 	call	0xeba	; 0xeba <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[6] = {0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<6;i++){
    17aa:	0e 15       	cp	r16, r14
    17ac:	1f 05       	cpc	r17, r15
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <m_usb_tx_int+0x3a>
		m_usb_tx_char(string[i]);
	}
}
    17b0:	26 96       	adiw	r28, 0x06	; 6
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret

000017ca <__fixunssfsi>:
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	7b 01       	movw	r14, r22
    17d4:	8c 01       	movw	r16, r24
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	5f e4       	ldi	r21, 0x4F	; 79
    17de:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__gesf2>
    17e2:	88 23       	and	r24, r24
    17e4:	8c f0       	brlt	.+34     	; 0x1808 <__fixunssfsi+0x3e>
    17e6:	c8 01       	movw	r24, r16
    17e8:	b7 01       	movw	r22, r14
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	5f e4       	ldi	r21, 0x4F	; 79
    17f2:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__subsf3>
    17f6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__fixsfsi>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	20 50       	subi	r18, 0x00	; 0
    1800:	30 40       	sbci	r19, 0x00	; 0
    1802:	40 40       	sbci	r20, 0x00	; 0
    1804:	50 48       	sbci	r21, 0x80	; 128
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <__fixunssfsi+0x4a>
    1808:	c8 01       	movw	r24, r16
    180a:	b7 01       	movw	r22, r14
    180c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__fixsfsi>
    1810:	9b 01       	movw	r18, r22
    1812:	ac 01       	movw	r20, r24
    1814:	b9 01       	movw	r22, r18
    1816:	ca 01       	movw	r24, r20
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <_fpadd_parts>:
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e7 e1       	ldi	r30, 0x17	; 23
    1828:	fc e0       	ldi	r31, 0x0C	; 12
    182a:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__prologue_saves__>
    182e:	dc 01       	movw	r26, r24
    1830:	2b 01       	movw	r4, r22
    1832:	fa 01       	movw	r30, r20
    1834:	9c 91       	ld	r25, X
    1836:	92 30       	cpi	r25, 0x02	; 2
    1838:	08 f4       	brcc	.+2      	; 0x183c <_fpadd_parts+0x1a>
    183a:	39 c1       	rjmp	.+626    	; 0x1aae <_fpadd_parts+0x28c>
    183c:	eb 01       	movw	r28, r22
    183e:	88 81       	ld	r24, Y
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	08 f4       	brcc	.+2      	; 0x1846 <_fpadd_parts+0x24>
    1844:	33 c1       	rjmp	.+614    	; 0x1aac <_fpadd_parts+0x28a>
    1846:	94 30       	cpi	r25, 0x04	; 4
    1848:	69 f4       	brne	.+26     	; 0x1864 <_fpadd_parts+0x42>
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	09 f0       	breq	.+2      	; 0x1850 <_fpadd_parts+0x2e>
    184e:	2f c1       	rjmp	.+606    	; 0x1aae <_fpadd_parts+0x28c>
    1850:	11 96       	adiw	r26, 0x01	; 1
    1852:	9c 91       	ld	r25, X
    1854:	11 97       	sbiw	r26, 0x01	; 1
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	98 17       	cp	r25, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <_fpadd_parts+0x3c>
    185c:	28 c1       	rjmp	.+592    	; 0x1aae <_fpadd_parts+0x28c>
    185e:	a3 e1       	ldi	r26, 0x13	; 19
    1860:	b1 e0       	ldi	r27, 0x01	; 1
    1862:	25 c1       	rjmp	.+586    	; 0x1aae <_fpadd_parts+0x28c>
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	09 f4       	brne	.+2      	; 0x186a <_fpadd_parts+0x48>
    1868:	21 c1       	rjmp	.+578    	; 0x1aac <_fpadd_parts+0x28a>
    186a:	82 30       	cpi	r24, 0x02	; 2
    186c:	a9 f4       	brne	.+42     	; 0x1898 <_fpadd_parts+0x76>
    186e:	92 30       	cpi	r25, 0x02	; 2
    1870:	09 f0       	breq	.+2      	; 0x1874 <_fpadd_parts+0x52>
    1872:	1d c1       	rjmp	.+570    	; 0x1aae <_fpadd_parts+0x28c>
    1874:	9a 01       	movw	r18, r20
    1876:	ad 01       	movw	r20, r26
    1878:	88 e0       	ldi	r24, 0x08	; 8
    187a:	ea 01       	movw	r28, r20
    187c:	09 90       	ld	r0, Y+
    187e:	ae 01       	movw	r20, r28
    1880:	e9 01       	movw	r28, r18
    1882:	09 92       	st	Y+, r0
    1884:	9e 01       	movw	r18, r28
    1886:	81 50       	subi	r24, 0x01	; 1
    1888:	c1 f7       	brne	.-16     	; 0x187a <_fpadd_parts+0x58>
    188a:	e2 01       	movw	r28, r4
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	9c 91       	ld	r25, X
    1892:	89 23       	and	r24, r25
    1894:	81 83       	std	Z+1, r24	; 0x01
    1896:	08 c1       	rjmp	.+528    	; 0x1aa8 <_fpadd_parts+0x286>
    1898:	92 30       	cpi	r25, 0x02	; 2
    189a:	09 f4       	brne	.+2      	; 0x189e <_fpadd_parts+0x7c>
    189c:	07 c1       	rjmp	.+526    	; 0x1aac <_fpadd_parts+0x28a>
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	2d 90       	ld	r2, X+
    18a2:	3c 90       	ld	r3, X
    18a4:	13 97       	sbiw	r26, 0x03	; 3
    18a6:	eb 01       	movw	r28, r22
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	14 96       	adiw	r26, 0x04	; 4
    18ae:	ad 90       	ld	r10, X+
    18b0:	bd 90       	ld	r11, X+
    18b2:	cd 90       	ld	r12, X+
    18b4:	dc 90       	ld	r13, X
    18b6:	17 97       	sbiw	r26, 0x07	; 7
    18b8:	ec 80       	ldd	r14, Y+4	; 0x04
    18ba:	fd 80       	ldd	r15, Y+5	; 0x05
    18bc:	0e 81       	ldd	r16, Y+6	; 0x06
    18be:	1f 81       	ldd	r17, Y+7	; 0x07
    18c0:	91 01       	movw	r18, r2
    18c2:	28 1b       	sub	r18, r24
    18c4:	39 0b       	sbc	r19, r25
    18c6:	b9 01       	movw	r22, r18
    18c8:	37 ff       	sbrs	r19, 7
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <_fpadd_parts+0xb2>
    18cc:	66 27       	eor	r22, r22
    18ce:	77 27       	eor	r23, r23
    18d0:	62 1b       	sub	r22, r18
    18d2:	73 0b       	sbc	r23, r19
    18d4:	60 32       	cpi	r22, 0x20	; 32
    18d6:	71 05       	cpc	r23, r1
    18d8:	0c f0       	brlt	.+2      	; 0x18dc <_fpadd_parts+0xba>
    18da:	61 c0       	rjmp	.+194    	; 0x199e <_fpadd_parts+0x17c>
    18dc:	12 16       	cp	r1, r18
    18de:	13 06       	cpc	r1, r19
    18e0:	6c f5       	brge	.+90     	; 0x193c <_fpadd_parts+0x11a>
    18e2:	37 01       	movw	r6, r14
    18e4:	48 01       	movw	r8, r16
    18e6:	06 2e       	mov	r0, r22
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <_fpadd_parts+0xd0>
    18ea:	96 94       	lsr	r9
    18ec:	87 94       	ror	r8
    18ee:	77 94       	ror	r7
    18f0:	67 94       	ror	r6
    18f2:	0a 94       	dec	r0
    18f4:	d2 f7       	brpl	.-12     	; 0x18ea <_fpadd_parts+0xc8>
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <_fpadd_parts+0xe6>
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	55 1f       	adc	r21, r21
    1908:	6a 95       	dec	r22
    190a:	d2 f7       	brpl	.-12     	; 0x1900 <_fpadd_parts+0xde>
    190c:	21 50       	subi	r18, 0x01	; 1
    190e:	30 40       	sbci	r19, 0x00	; 0
    1910:	40 40       	sbci	r20, 0x00	; 0
    1912:	50 40       	sbci	r21, 0x00	; 0
    1914:	2e 21       	and	r18, r14
    1916:	3f 21       	and	r19, r15
    1918:	40 23       	and	r20, r16
    191a:	51 23       	and	r21, r17
    191c:	21 15       	cp	r18, r1
    191e:	31 05       	cpc	r19, r1
    1920:	41 05       	cpc	r20, r1
    1922:	51 05       	cpc	r21, r1
    1924:	21 f0       	breq	.+8      	; 0x192e <_fpadd_parts+0x10c>
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	79 01       	movw	r14, r18
    1930:	8a 01       	movw	r16, r20
    1932:	e6 28       	or	r14, r6
    1934:	f7 28       	or	r15, r7
    1936:	08 29       	or	r16, r8
    1938:	19 29       	or	r17, r9
    193a:	3c c0       	rjmp	.+120    	; 0x19b4 <_fpadd_parts+0x192>
    193c:	23 2b       	or	r18, r19
    193e:	d1 f1       	breq	.+116    	; 0x19b4 <_fpadd_parts+0x192>
    1940:	26 0e       	add	r2, r22
    1942:	37 1e       	adc	r3, r23
    1944:	35 01       	movw	r6, r10
    1946:	46 01       	movw	r8, r12
    1948:	06 2e       	mov	r0, r22
    194a:	04 c0       	rjmp	.+8      	; 0x1954 <_fpadd_parts+0x132>
    194c:	96 94       	lsr	r9
    194e:	87 94       	ror	r8
    1950:	77 94       	ror	r7
    1952:	67 94       	ror	r6
    1954:	0a 94       	dec	r0
    1956:	d2 f7       	brpl	.-12     	; 0x194c <_fpadd_parts+0x12a>
    1958:	21 e0       	ldi	r18, 0x01	; 1
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	04 c0       	rjmp	.+8      	; 0x196a <_fpadd_parts+0x148>
    1962:	22 0f       	add	r18, r18
    1964:	33 1f       	adc	r19, r19
    1966:	44 1f       	adc	r20, r20
    1968:	55 1f       	adc	r21, r21
    196a:	6a 95       	dec	r22
    196c:	d2 f7       	brpl	.-12     	; 0x1962 <_fpadd_parts+0x140>
    196e:	21 50       	subi	r18, 0x01	; 1
    1970:	30 40       	sbci	r19, 0x00	; 0
    1972:	40 40       	sbci	r20, 0x00	; 0
    1974:	50 40       	sbci	r21, 0x00	; 0
    1976:	2a 21       	and	r18, r10
    1978:	3b 21       	and	r19, r11
    197a:	4c 21       	and	r20, r12
    197c:	5d 21       	and	r21, r13
    197e:	21 15       	cp	r18, r1
    1980:	31 05       	cpc	r19, r1
    1982:	41 05       	cpc	r20, r1
    1984:	51 05       	cpc	r21, r1
    1986:	21 f0       	breq	.+8      	; 0x1990 <_fpadd_parts+0x16e>
    1988:	21 e0       	ldi	r18, 0x01	; 1
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	59 01       	movw	r10, r18
    1992:	6a 01       	movw	r12, r20
    1994:	a6 28       	or	r10, r6
    1996:	b7 28       	or	r11, r7
    1998:	c8 28       	or	r12, r8
    199a:	d9 28       	or	r13, r9
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <_fpadd_parts+0x192>
    199e:	82 15       	cp	r24, r2
    19a0:	93 05       	cpc	r25, r3
    19a2:	2c f0       	brlt	.+10     	; 0x19ae <_fpadd_parts+0x18c>
    19a4:	1c 01       	movw	r2, r24
    19a6:	aa 24       	eor	r10, r10
    19a8:	bb 24       	eor	r11, r11
    19aa:	65 01       	movw	r12, r10
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <_fpadd_parts+0x192>
    19ae:	ee 24       	eor	r14, r14
    19b0:	ff 24       	eor	r15, r15
    19b2:	87 01       	movw	r16, r14
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	9c 91       	ld	r25, X
    19b8:	d2 01       	movw	r26, r4
    19ba:	11 96       	adiw	r26, 0x01	; 1
    19bc:	8c 91       	ld	r24, X
    19be:	98 17       	cp	r25, r24
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <_fpadd_parts+0x1a2>
    19c2:	45 c0       	rjmp	.+138    	; 0x1a4e <_fpadd_parts+0x22c>
    19c4:	99 23       	and	r25, r25
    19c6:	39 f0       	breq	.+14     	; 0x19d6 <_fpadd_parts+0x1b4>
    19c8:	a8 01       	movw	r20, r16
    19ca:	97 01       	movw	r18, r14
    19cc:	2a 19       	sub	r18, r10
    19ce:	3b 09       	sbc	r19, r11
    19d0:	4c 09       	sbc	r20, r12
    19d2:	5d 09       	sbc	r21, r13
    19d4:	06 c0       	rjmp	.+12     	; 0x19e2 <_fpadd_parts+0x1c0>
    19d6:	a6 01       	movw	r20, r12
    19d8:	95 01       	movw	r18, r10
    19da:	2e 19       	sub	r18, r14
    19dc:	3f 09       	sbc	r19, r15
    19de:	40 0b       	sbc	r20, r16
    19e0:	51 0b       	sbc	r21, r17
    19e2:	57 fd       	sbrc	r21, 7
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <_fpadd_parts+0x1d4>
    19e6:	11 82       	std	Z+1, r1	; 0x01
    19e8:	33 82       	std	Z+3, r3	; 0x03
    19ea:	22 82       	std	Z+2, r2	; 0x02
    19ec:	24 83       	std	Z+4, r18	; 0x04
    19ee:	35 83       	std	Z+5, r19	; 0x05
    19f0:	46 83       	std	Z+6, r20	; 0x06
    19f2:	57 83       	std	Z+7, r21	; 0x07
    19f4:	1d c0       	rjmp	.+58     	; 0x1a30 <_fpadd_parts+0x20e>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	81 83       	std	Z+1, r24	; 0x01
    19fa:	33 82       	std	Z+3, r3	; 0x03
    19fc:	22 82       	std	Z+2, r2	; 0x02
    19fe:	88 27       	eor	r24, r24
    1a00:	99 27       	eor	r25, r25
    1a02:	dc 01       	movw	r26, r24
    1a04:	82 1b       	sub	r24, r18
    1a06:	93 0b       	sbc	r25, r19
    1a08:	a4 0b       	sbc	r26, r20
    1a0a:	b5 0b       	sbc	r27, r21
    1a0c:	84 83       	std	Z+4, r24	; 0x04
    1a0e:	95 83       	std	Z+5, r25	; 0x05
    1a10:	a6 83       	std	Z+6, r26	; 0x06
    1a12:	b7 83       	std	Z+7, r27	; 0x07
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <_fpadd_parts+0x20e>
    1a16:	22 0f       	add	r18, r18
    1a18:	33 1f       	adc	r19, r19
    1a1a:	44 1f       	adc	r20, r20
    1a1c:	55 1f       	adc	r21, r21
    1a1e:	24 83       	std	Z+4, r18	; 0x04
    1a20:	35 83       	std	Z+5, r19	; 0x05
    1a22:	46 83       	std	Z+6, r20	; 0x06
    1a24:	57 83       	std	Z+7, r21	; 0x07
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	93 83       	std	Z+3, r25	; 0x03
    1a2e:	82 83       	std	Z+2, r24	; 0x02
    1a30:	24 81       	ldd	r18, Z+4	; 0x04
    1a32:	35 81       	ldd	r19, Z+5	; 0x05
    1a34:	46 81       	ldd	r20, Z+6	; 0x06
    1a36:	57 81       	ldd	r21, Z+7	; 0x07
    1a38:	da 01       	movw	r26, r20
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	a1 09       	sbc	r26, r1
    1a40:	b1 09       	sbc	r27, r1
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	af 4f       	sbci	r26, 0xFF	; 255
    1a48:	bf 43       	sbci	r27, 0x3F	; 63
    1a4a:	28 f3       	brcs	.-54     	; 0x1a16 <_fpadd_parts+0x1f4>
    1a4c:	0b c0       	rjmp	.+22     	; 0x1a64 <_fpadd_parts+0x242>
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	33 82       	std	Z+3, r3	; 0x03
    1a52:	22 82       	std	Z+2, r2	; 0x02
    1a54:	ea 0c       	add	r14, r10
    1a56:	fb 1c       	adc	r15, r11
    1a58:	0c 1d       	adc	r16, r12
    1a5a:	1d 1d       	adc	r17, r13
    1a5c:	e4 82       	std	Z+4, r14	; 0x04
    1a5e:	f5 82       	std	Z+5, r15	; 0x05
    1a60:	06 83       	std	Z+6, r16	; 0x06
    1a62:	17 83       	std	Z+7, r17	; 0x07
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	80 83       	st	Z, r24
    1a68:	24 81       	ldd	r18, Z+4	; 0x04
    1a6a:	35 81       	ldd	r19, Z+5	; 0x05
    1a6c:	46 81       	ldd	r20, Z+6	; 0x06
    1a6e:	57 81       	ldd	r21, Z+7	; 0x07
    1a70:	57 ff       	sbrs	r21, 7
    1a72:	1a c0       	rjmp	.+52     	; 0x1aa8 <_fpadd_parts+0x286>
    1a74:	c9 01       	movw	r24, r18
    1a76:	aa 27       	eor	r26, r26
    1a78:	97 fd       	sbrc	r25, 7
    1a7a:	a0 95       	com	r26
    1a7c:	ba 2f       	mov	r27, r26
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	90 70       	andi	r25, 0x00	; 0
    1a82:	a0 70       	andi	r26, 0x00	; 0
    1a84:	b0 70       	andi	r27, 0x00	; 0
    1a86:	56 95       	lsr	r21
    1a88:	47 95       	ror	r20
    1a8a:	37 95       	ror	r19
    1a8c:	27 95       	ror	r18
    1a8e:	82 2b       	or	r24, r18
    1a90:	93 2b       	or	r25, r19
    1a92:	a4 2b       	or	r26, r20
    1a94:	b5 2b       	or	r27, r21
    1a96:	84 83       	std	Z+4, r24	; 0x04
    1a98:	95 83       	std	Z+5, r25	; 0x05
    1a9a:	a6 83       	std	Z+6, r26	; 0x06
    1a9c:	b7 83       	std	Z+7, r27	; 0x07
    1a9e:	82 81       	ldd	r24, Z+2	; 0x02
    1aa0:	93 81       	ldd	r25, Z+3	; 0x03
    1aa2:	01 96       	adiw	r24, 0x01	; 1
    1aa4:	93 83       	std	Z+3, r25	; 0x03
    1aa6:	82 83       	std	Z+2, r24	; 0x02
    1aa8:	df 01       	movw	r26, r30
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <_fpadd_parts+0x28c>
    1aac:	d2 01       	movw	r26, r4
    1aae:	cd 01       	movw	r24, r26
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	e2 e1       	ldi	r30, 0x12	; 18
    1ab6:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__epilogue_restores__>

00001aba <__subsf3>:
    1aba:	a0 e2       	ldi	r26, 0x20	; 32
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e6       	ldi	r30, 0x63	; 99
    1ac0:	fd e0       	ldi	r31, 0x0D	; 13
    1ac2:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
    1ac6:	69 83       	std	Y+1, r22	; 0x01
    1ac8:	7a 83       	std	Y+2, r23	; 0x02
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	3e 83       	std	Y+6, r19	; 0x06
    1ad2:	4f 83       	std	Y+7, r20	; 0x07
    1ad4:	58 87       	std	Y+8, r21	; 0x08
    1ad6:	e9 e0       	ldi	r30, 0x09	; 9
    1ad8:	ee 2e       	mov	r14, r30
    1ada:	f1 2c       	mov	r15, r1
    1adc:	ec 0e       	add	r14, r28
    1ade:	fd 1e       	adc	r15, r29
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1aea:	8e 01       	movw	r16, r28
    1aec:	0f 5e       	subi	r16, 0xEF	; 239
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	ce 01       	movw	r24, r28
    1af2:	05 96       	adiw	r24, 0x05	; 5
    1af4:	b8 01       	movw	r22, r16
    1af6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1afa:	8a 89       	ldd	r24, Y+18	; 0x12
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	89 27       	eor	r24, r25
    1b00:	8a 8b       	std	Y+18, r24	; 0x12
    1b02:	c7 01       	movw	r24, r14
    1b04:	b8 01       	movw	r22, r16
    1b06:	ae 01       	movw	r20, r28
    1b08:	47 5e       	subi	r20, 0xE7	; 231
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	0e 94 11 0c 	call	0x1822	; 0x1822 <_fpadd_parts>
    1b10:	0e 94 11 10 	call	0x2022	; 0x2022 <__pack_f>
    1b14:	a0 96       	adiw	r28, 0x20	; 32
    1b16:	e6 e0       	ldi	r30, 0x06	; 6
    1b18:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00001b1c <__addsf3>:
    1b1c:	a0 e2       	ldi	r26, 0x20	; 32
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e4 e9       	ldi	r30, 0x94	; 148
    1b22:	fd e0       	ldi	r31, 0x0D	; 13
    1b24:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
    1b28:	69 83       	std	Y+1, r22	; 0x01
    1b2a:	7a 83       	std	Y+2, r23	; 0x02
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	2d 83       	std	Y+5, r18	; 0x05
    1b32:	3e 83       	std	Y+6, r19	; 0x06
    1b34:	4f 83       	std	Y+7, r20	; 0x07
    1b36:	58 87       	std	Y+8, r21	; 0x08
    1b38:	f9 e0       	ldi	r31, 0x09	; 9
    1b3a:	ef 2e       	mov	r14, r31
    1b3c:	f1 2c       	mov	r15, r1
    1b3e:	ec 0e       	add	r14, r28
    1b40:	fd 1e       	adc	r15, r29
    1b42:	ce 01       	movw	r24, r28
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	b7 01       	movw	r22, r14
    1b48:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	0f 5e       	subi	r16, 0xEF	; 239
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	ce 01       	movw	r24, r28
    1b54:	05 96       	adiw	r24, 0x05	; 5
    1b56:	b8 01       	movw	r22, r16
    1b58:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1b5c:	c7 01       	movw	r24, r14
    1b5e:	b8 01       	movw	r22, r16
    1b60:	ae 01       	movw	r20, r28
    1b62:	47 5e       	subi	r20, 0xE7	; 231
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	0e 94 11 0c 	call	0x1822	; 0x1822 <_fpadd_parts>
    1b6a:	0e 94 11 10 	call	0x2022	; 0x2022 <__pack_f>
    1b6e:	a0 96       	adiw	r28, 0x20	; 32
    1b70:	e6 e0       	ldi	r30, 0x06	; 6
    1b72:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00001b76 <__divsf3>:
    1b76:	a8 e1       	ldi	r26, 0x18	; 24
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    1b7c:	fd e0       	ldi	r31, 0x0D	; 13
    1b7e:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__prologue_saves__+0x10>
    1b82:	69 83       	std	Y+1, r22	; 0x01
    1b84:	7a 83       	std	Y+2, r23	; 0x02
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	2d 83       	std	Y+5, r18	; 0x05
    1b8c:	3e 83       	std	Y+6, r19	; 0x06
    1b8e:	4f 83       	std	Y+7, r20	; 0x07
    1b90:	58 87       	std	Y+8, r21	; 0x08
    1b92:	b9 e0       	ldi	r27, 0x09	; 9
    1b94:	eb 2e       	mov	r14, r27
    1b96:	f1 2c       	mov	r15, r1
    1b98:	ec 0e       	add	r14, r28
    1b9a:	fd 1e       	adc	r15, r29
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	b7 01       	movw	r22, r14
    1ba2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1ba6:	8e 01       	movw	r16, r28
    1ba8:	0f 5e       	subi	r16, 0xEF	; 239
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	ce 01       	movw	r24, r28
    1bae:	05 96       	adiw	r24, 0x05	; 5
    1bb0:	b8 01       	movw	r22, r16
    1bb2:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1bb6:	29 85       	ldd	r18, Y+9	; 0x09
    1bb8:	22 30       	cpi	r18, 0x02	; 2
    1bba:	08 f4       	brcc	.+2      	; 0x1bbe <__divsf3+0x48>
    1bbc:	7e c0       	rjmp	.+252    	; 0x1cba <__divsf3+0x144>
    1bbe:	39 89       	ldd	r19, Y+17	; 0x11
    1bc0:	32 30       	cpi	r19, 0x02	; 2
    1bc2:	10 f4       	brcc	.+4      	; 0x1bc8 <__divsf3+0x52>
    1bc4:	b8 01       	movw	r22, r16
    1bc6:	7c c0       	rjmp	.+248    	; 0x1cc0 <__divsf3+0x14a>
    1bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bca:	9a 89       	ldd	r25, Y+18	; 0x12
    1bcc:	89 27       	eor	r24, r25
    1bce:	8a 87       	std	Y+10, r24	; 0x0a
    1bd0:	24 30       	cpi	r18, 0x04	; 4
    1bd2:	11 f0       	breq	.+4      	; 0x1bd8 <__divsf3+0x62>
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 f4       	brne	.+12     	; 0x1be4 <__divsf3+0x6e>
    1bd8:	23 17       	cp	r18, r19
    1bda:	09 f0       	breq	.+2      	; 0x1bde <__divsf3+0x68>
    1bdc:	6e c0       	rjmp	.+220    	; 0x1cba <__divsf3+0x144>
    1bde:	63 e1       	ldi	r22, 0x13	; 19
    1be0:	71 e0       	ldi	r23, 0x01	; 1
    1be2:	6e c0       	rjmp	.+220    	; 0x1cc0 <__divsf3+0x14a>
    1be4:	34 30       	cpi	r19, 0x04	; 4
    1be6:	39 f4       	brne	.+14     	; 0x1bf6 <__divsf3+0x80>
    1be8:	1d 86       	std	Y+13, r1	; 0x0d
    1bea:	1e 86       	std	Y+14, r1	; 0x0e
    1bec:	1f 86       	std	Y+15, r1	; 0x0f
    1bee:	18 8a       	std	Y+16, r1	; 0x10
    1bf0:	1c 86       	std	Y+12, r1	; 0x0c
    1bf2:	1b 86       	std	Y+11, r1	; 0x0b
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <__divsf3+0x88>
    1bf6:	32 30       	cpi	r19, 0x02	; 2
    1bf8:	21 f4       	brne	.+8      	; 0x1c02 <__divsf3+0x8c>
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	89 87       	std	Y+9, r24	; 0x09
    1bfe:	b7 01       	movw	r22, r14
    1c00:	5f c0       	rjmp	.+190    	; 0x1cc0 <__divsf3+0x14a>
    1c02:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c04:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c06:	8b 89       	ldd	r24, Y+19	; 0x13
    1c08:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0a:	28 1b       	sub	r18, r24
    1c0c:	39 0b       	sbc	r19, r25
    1c0e:	3c 87       	std	Y+12, r19	; 0x0c
    1c10:	2b 87       	std	Y+11, r18	; 0x0b
    1c12:	ed 84       	ldd	r14, Y+13	; 0x0d
    1c14:	fe 84       	ldd	r15, Y+14	; 0x0e
    1c16:	0f 85       	ldd	r16, Y+15	; 0x0f
    1c18:	18 89       	ldd	r17, Y+16	; 0x10
    1c1a:	ad 88       	ldd	r10, Y+21	; 0x15
    1c1c:	be 88       	ldd	r11, Y+22	; 0x16
    1c1e:	cf 88       	ldd	r12, Y+23	; 0x17
    1c20:	d8 8c       	ldd	r13, Y+24	; 0x18
    1c22:	ea 14       	cp	r14, r10
    1c24:	fb 04       	cpc	r15, r11
    1c26:	0c 05       	cpc	r16, r12
    1c28:	1d 05       	cpc	r17, r13
    1c2a:	40 f4       	brcc	.+16     	; 0x1c3c <__divsf3+0xc6>
    1c2c:	ee 0c       	add	r14, r14
    1c2e:	ff 1c       	adc	r15, r15
    1c30:	00 1f       	adc	r16, r16
    1c32:	11 1f       	adc	r17, r17
    1c34:	21 50       	subi	r18, 0x01	; 1
    1c36:	30 40       	sbci	r19, 0x00	; 0
    1c38:	3c 87       	std	Y+12, r19	; 0x0c
    1c3a:	2b 87       	std	Y+11, r18	; 0x0b
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	a0 e0       	ldi	r26, 0x00	; 0
    1c4a:	b0 e4       	ldi	r27, 0x40	; 64
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	ea 14       	cp	r14, r10
    1c52:	fb 04       	cpc	r15, r11
    1c54:	0c 05       	cpc	r16, r12
    1c56:	1d 05       	cpc	r17, r13
    1c58:	40 f0       	brcs	.+16     	; 0x1c6a <__divsf3+0xf4>
    1c5a:	28 2b       	or	r18, r24
    1c5c:	39 2b       	or	r19, r25
    1c5e:	4a 2b       	or	r20, r26
    1c60:	5b 2b       	or	r21, r27
    1c62:	ea 18       	sub	r14, r10
    1c64:	fb 08       	sbc	r15, r11
    1c66:	0c 09       	sbc	r16, r12
    1c68:	1d 09       	sbc	r17, r13
    1c6a:	b6 95       	lsr	r27
    1c6c:	a7 95       	ror	r26
    1c6e:	97 95       	ror	r25
    1c70:	87 95       	ror	r24
    1c72:	ee 0c       	add	r14, r14
    1c74:	ff 1c       	adc	r15, r15
    1c76:	00 1f       	adc	r16, r16
    1c78:	11 1f       	adc	r17, r17
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	6f 31       	cpi	r22, 0x1F	; 31
    1c80:	71 05       	cpc	r23, r1
    1c82:	31 f7       	brne	.-52     	; 0x1c50 <__divsf3+0xda>
    1c84:	da 01       	movw	r26, r20
    1c86:	c9 01       	movw	r24, r18
    1c88:	8f 77       	andi	r24, 0x7F	; 127
    1c8a:	90 70       	andi	r25, 0x00	; 0
    1c8c:	a0 70       	andi	r26, 0x00	; 0
    1c8e:	b0 70       	andi	r27, 0x00	; 0
    1c90:	80 34       	cpi	r24, 0x40	; 64
    1c92:	91 05       	cpc	r25, r1
    1c94:	a1 05       	cpc	r26, r1
    1c96:	b1 05       	cpc	r27, r1
    1c98:	61 f4       	brne	.+24     	; 0x1cb2 <__divsf3+0x13c>
    1c9a:	27 fd       	sbrc	r18, 7
    1c9c:	0a c0       	rjmp	.+20     	; 0x1cb2 <__divsf3+0x13c>
    1c9e:	e1 14       	cp	r14, r1
    1ca0:	f1 04       	cpc	r15, r1
    1ca2:	01 05       	cpc	r16, r1
    1ca4:	11 05       	cpc	r17, r1
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <__divsf3+0x13c>
    1ca8:	20 5c       	subi	r18, 0xC0	; 192
    1caa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cac:	4f 4f       	sbci	r20, 0xFF	; 255
    1cae:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb0:	20 78       	andi	r18, 0x80	; 128
    1cb2:	2d 87       	std	Y+13, r18	; 0x0d
    1cb4:	3e 87       	std	Y+14, r19	; 0x0e
    1cb6:	4f 87       	std	Y+15, r20	; 0x0f
    1cb8:	58 8b       	std	Y+16, r21	; 0x10
    1cba:	be 01       	movw	r22, r28
    1cbc:	67 5f       	subi	r22, 0xF7	; 247
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	0e 94 11 10 	call	0x2022	; 0x2022 <__pack_f>
    1cc6:	68 96       	adiw	r28, 0x18	; 24
    1cc8:	ea e0       	ldi	r30, 0x0A	; 10
    1cca:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__epilogue_restores__+0x10>

00001cce <__gesf2>:
    1cce:	a8 e1       	ldi	r26, 0x18	; 24
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__prologue_saves__+0x18>
    1cda:	69 83       	std	Y+1, r22	; 0x01
    1cdc:	7a 83       	std	Y+2, r23	; 0x02
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	2d 83       	std	Y+5, r18	; 0x05
    1ce4:	3e 83       	std	Y+6, r19	; 0x06
    1ce6:	4f 83       	std	Y+7, r20	; 0x07
    1ce8:	58 87       	std	Y+8, r21	; 0x08
    1cea:	89 e0       	ldi	r24, 0x09	; 9
    1cec:	e8 2e       	mov	r14, r24
    1cee:	f1 2c       	mov	r15, r1
    1cf0:	ec 0e       	add	r14, r28
    1cf2:	fd 1e       	adc	r15, r29
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	b7 01       	movw	r22, r14
    1cfa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0f 5e       	subi	r16, 0xEF	; 239
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	ce 01       	movw	r24, r28
    1d06:	05 96       	adiw	r24, 0x05	; 5
    1d08:	b8 01       	movw	r22, r16
    1d0a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	82 30       	cpi	r24, 0x02	; 2
    1d12:	40 f0       	brcs	.+16     	; 0x1d24 <__gesf2+0x56>
    1d14:	89 89       	ldd	r24, Y+17	; 0x11
    1d16:	82 30       	cpi	r24, 0x02	; 2
    1d18:	28 f0       	brcs	.+10     	; 0x1d24 <__gesf2+0x56>
    1d1a:	c7 01       	movw	r24, r14
    1d1c:	b8 01       	movw	r22, r16
    1d1e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__fpcmp_parts_f>
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <__gesf2+0x58>
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	68 96       	adiw	r28, 0x18	; 24
    1d28:	e6 e0       	ldi	r30, 0x06	; 6
    1d2a:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <__epilogue_restores__+0x18>

00001d2e <__floatsisf>:
    1d2e:	a8 e0       	ldi	r26, 0x08	; 8
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ed e9       	ldi	r30, 0x9D	; 157
    1d34:	fe e0       	ldi	r31, 0x0E	; 14
    1d36:	0c 94 df 11 	jmp	0x23be	; 0x23be <__prologue_saves__+0x12>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	da 01       	movw	r26, r20
    1d44:	c9 01       	movw	r24, r18
    1d46:	88 27       	eor	r24, r24
    1d48:	b7 fd       	sbrc	r27, 7
    1d4a:	83 95       	inc	r24
    1d4c:	99 27       	eor	r25, r25
    1d4e:	aa 27       	eor	r26, r26
    1d50:	bb 27       	eor	r27, r27
    1d52:	b8 2e       	mov	r11, r24
    1d54:	21 15       	cp	r18, r1
    1d56:	31 05       	cpc	r19, r1
    1d58:	41 05       	cpc	r20, r1
    1d5a:	51 05       	cpc	r21, r1
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <__floatsisf+0x36>
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	3a c0       	rjmp	.+116    	; 0x1dd8 <__floatsisf+0xaa>
    1d64:	88 23       	and	r24, r24
    1d66:	a9 f0       	breq	.+42     	; 0x1d92 <__floatsisf+0x64>
    1d68:	20 30       	cpi	r18, 0x00	; 0
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	38 07       	cpc	r19, r24
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	48 07       	cpc	r20, r24
    1d72:	80 e8       	ldi	r24, 0x80	; 128
    1d74:	58 07       	cpc	r21, r24
    1d76:	29 f4       	brne	.+10     	; 0x1d82 <__floatsisf+0x54>
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	9f ec       	ldi	r25, 0xCF	; 207
    1d80:	30 c0       	rjmp	.+96     	; 0x1de2 <__floatsisf+0xb4>
    1d82:	ee 24       	eor	r14, r14
    1d84:	ff 24       	eor	r15, r15
    1d86:	87 01       	movw	r16, r14
    1d88:	e2 1a       	sub	r14, r18
    1d8a:	f3 0a       	sbc	r15, r19
    1d8c:	04 0b       	sbc	r16, r20
    1d8e:	15 0b       	sbc	r17, r21
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <__floatsisf+0x68>
    1d92:	79 01       	movw	r14, r18
    1d94:	8a 01       	movw	r16, r20
    1d96:	8e e1       	ldi	r24, 0x1E	; 30
    1d98:	c8 2e       	mov	r12, r24
    1d9a:	d1 2c       	mov	r13, r1
    1d9c:	dc 82       	std	Y+4, r13	; 0x04
    1d9e:	cb 82       	std	Y+3, r12	; 0x03
    1da0:	ed 82       	std	Y+5, r14	; 0x05
    1da2:	fe 82       	std	Y+6, r15	; 0x06
    1da4:	0f 83       	std	Y+7, r16	; 0x07
    1da6:	18 87       	std	Y+8, r17	; 0x08
    1da8:	c8 01       	movw	r24, r16
    1daa:	b7 01       	movw	r22, r14
    1dac:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__clzsi2>
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	18 16       	cp	r1, r24
    1db4:	19 06       	cpc	r1, r25
    1db6:	84 f4       	brge	.+32     	; 0x1dd8 <__floatsisf+0xaa>
    1db8:	08 2e       	mov	r0, r24
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <__floatsisf+0x96>
    1dbc:	ee 0c       	add	r14, r14
    1dbe:	ff 1c       	adc	r15, r15
    1dc0:	00 1f       	adc	r16, r16
    1dc2:	11 1f       	adc	r17, r17
    1dc4:	0a 94       	dec	r0
    1dc6:	d2 f7       	brpl	.-12     	; 0x1dbc <__floatsisf+0x8e>
    1dc8:	ed 82       	std	Y+5, r14	; 0x05
    1dca:	fe 82       	std	Y+6, r15	; 0x06
    1dcc:	0f 83       	std	Y+7, r16	; 0x07
    1dce:	18 87       	std	Y+8, r17	; 0x08
    1dd0:	c8 1a       	sub	r12, r24
    1dd2:	d9 0a       	sbc	r13, r25
    1dd4:	dc 82       	std	Y+4, r13	; 0x04
    1dd6:	cb 82       	std	Y+3, r12	; 0x03
    1dd8:	ba 82       	std	Y+2, r11	; 0x02
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	0e 94 11 10 	call	0x2022	; 0x2022 <__pack_f>
    1de2:	28 96       	adiw	r28, 0x08	; 8
    1de4:	e9 e0       	ldi	r30, 0x09	; 9
    1de6:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__epilogue_restores__+0x12>

00001dea <__fixsfsi>:
    1dea:	ac e0       	ldi	r26, 0x0C	; 12
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	eb ef       	ldi	r30, 0xFB	; 251
    1df0:	fe e0       	ldi	r31, 0x0E	; 14
    1df2:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x20>
    1df6:	69 83       	std	Y+1, r22	; 0x01
    1df8:	7a 83       	std	Y+2, r23	; 0x02
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	9c 83       	std	Y+4, r25	; 0x04
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	be 01       	movw	r22, r28
    1e04:	6b 5f       	subi	r22, 0xFB	; 251
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__unpack_f>
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	61 f1       	breq	.+88     	; 0x1e6a <__fixsfsi+0x80>
    1e12:	82 30       	cpi	r24, 0x02	; 2
    1e14:	50 f1       	brcs	.+84     	; 0x1e6a <__fixsfsi+0x80>
    1e16:	84 30       	cpi	r24, 0x04	; 4
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <__fixsfsi+0x38>
    1e1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e1c:	88 23       	and	r24, r24
    1e1e:	51 f1       	breq	.+84     	; 0x1e74 <__fixsfsi+0x8a>
    1e20:	2e c0       	rjmp	.+92     	; 0x1e7e <__fixsfsi+0x94>
    1e22:	2f 81       	ldd	r18, Y+7	; 0x07
    1e24:	38 85       	ldd	r19, Y+8	; 0x08
    1e26:	37 fd       	sbrc	r19, 7
    1e28:	20 c0       	rjmp	.+64     	; 0x1e6a <__fixsfsi+0x80>
    1e2a:	6e 81       	ldd	r22, Y+6	; 0x06
    1e2c:	2f 31       	cpi	r18, 0x1F	; 31
    1e2e:	31 05       	cpc	r19, r1
    1e30:	1c f0       	brlt	.+6      	; 0x1e38 <__fixsfsi+0x4e>
    1e32:	66 23       	and	r22, r22
    1e34:	f9 f0       	breq	.+62     	; 0x1e74 <__fixsfsi+0x8a>
    1e36:	23 c0       	rjmp	.+70     	; 0x1e7e <__fixsfsi+0x94>
    1e38:	8e e1       	ldi	r24, 0x1E	; 30
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	82 1b       	sub	r24, r18
    1e3e:	93 0b       	sbc	r25, r19
    1e40:	29 85       	ldd	r18, Y+9	; 0x09
    1e42:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e44:	4b 85       	ldd	r20, Y+11	; 0x0b
    1e46:	5c 85       	ldd	r21, Y+12	; 0x0c
    1e48:	04 c0       	rjmp	.+8      	; 0x1e52 <__fixsfsi+0x68>
    1e4a:	56 95       	lsr	r21
    1e4c:	47 95       	ror	r20
    1e4e:	37 95       	ror	r19
    1e50:	27 95       	ror	r18
    1e52:	8a 95       	dec	r24
    1e54:	d2 f7       	brpl	.-12     	; 0x1e4a <__fixsfsi+0x60>
    1e56:	66 23       	and	r22, r22
    1e58:	b1 f0       	breq	.+44     	; 0x1e86 <__fixsfsi+0x9c>
    1e5a:	50 95       	com	r21
    1e5c:	40 95       	com	r20
    1e5e:	30 95       	com	r19
    1e60:	21 95       	neg	r18
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	4f 4f       	sbci	r20, 0xFF	; 255
    1e66:	5f 4f       	sbci	r21, 0xFF	; 255
    1e68:	0e c0       	rjmp	.+28     	; 0x1e86 <__fixsfsi+0x9c>
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	09 c0       	rjmp	.+18     	; 0x1e86 <__fixsfsi+0x9c>
    1e74:	2f ef       	ldi	r18, 0xFF	; 255
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f ef       	ldi	r20, 0xFF	; 255
    1e7a:	5f e7       	ldi	r21, 0x7F	; 127
    1e7c:	04 c0       	rjmp	.+8      	; 0x1e86 <__fixsfsi+0x9c>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	50 e8       	ldi	r21, 0x80	; 128
    1e86:	b9 01       	movw	r22, r18
    1e88:	ca 01       	movw	r24, r20
    1e8a:	2c 96       	adiw	r28, 0x0c	; 12
    1e8c:	e2 e0       	ldi	r30, 0x02	; 2
    1e8e:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x20>

00001e92 <__floatunsisf>:
    1e92:	a8 e0       	ldi	r26, 0x08	; 8
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ef e4       	ldi	r30, 0x4F	; 79
    1e98:	ff e0       	ldi	r31, 0x0F	; 15
    1e9a:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <__prologue_saves__+0x10>
    1e9e:	7b 01       	movw	r14, r22
    1ea0:	8c 01       	movw	r16, r24
    1ea2:	61 15       	cp	r22, r1
    1ea4:	71 05       	cpc	r23, r1
    1ea6:	81 05       	cpc	r24, r1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	19 f4       	brne	.+6      	; 0x1eb2 <__floatunsisf+0x20>
    1eac:	82 e0       	ldi	r24, 0x02	; 2
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	60 c0       	rjmp	.+192    	; 0x1f72 <__floatunsisf+0xe0>
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	8e e1       	ldi	r24, 0x1E	; 30
    1eb8:	c8 2e       	mov	r12, r24
    1eba:	d1 2c       	mov	r13, r1
    1ebc:	dc 82       	std	Y+4, r13	; 0x04
    1ebe:	cb 82       	std	Y+3, r12	; 0x03
    1ec0:	ed 82       	std	Y+5, r14	; 0x05
    1ec2:	fe 82       	std	Y+6, r15	; 0x06
    1ec4:	0f 83       	std	Y+7, r16	; 0x07
    1ec6:	18 87       	std	Y+8, r17	; 0x08
    1ec8:	c8 01       	movw	r24, r16
    1eca:	b7 01       	movw	r22, r14
    1ecc:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__clzsi2>
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	31 97       	sbiw	r30, 0x01	; 1
    1ed4:	f7 ff       	sbrs	r31, 7
    1ed6:	3b c0       	rjmp	.+118    	; 0x1f4e <__floatunsisf+0xbc>
    1ed8:	22 27       	eor	r18, r18
    1eda:	33 27       	eor	r19, r19
    1edc:	2e 1b       	sub	r18, r30
    1ede:	3f 0b       	sbc	r19, r31
    1ee0:	57 01       	movw	r10, r14
    1ee2:	68 01       	movw	r12, r16
    1ee4:	02 2e       	mov	r0, r18
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <__floatunsisf+0x5e>
    1ee8:	d6 94       	lsr	r13
    1eea:	c7 94       	ror	r12
    1eec:	b7 94       	ror	r11
    1eee:	a7 94       	ror	r10
    1ef0:	0a 94       	dec	r0
    1ef2:	d2 f7       	brpl	.-12     	; 0x1ee8 <__floatunsisf+0x56>
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <__floatunsisf+0x7c>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	2a 95       	dec	r18
    1f10:	d2 f7       	brpl	.-12     	; 0x1f06 <__floatunsisf+0x74>
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	a1 09       	sbc	r26, r1
    1f16:	b1 09       	sbc	r27, r1
    1f18:	8e 21       	and	r24, r14
    1f1a:	9f 21       	and	r25, r15
    1f1c:	a0 23       	and	r26, r16
    1f1e:	b1 23       	and	r27, r17
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	a1 05       	cpc	r26, r1
    1f24:	b1 05       	cpc	r27, r1
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <__floatunsisf+0x9e>
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	4a 29       	or	r20, r10
    1f32:	5b 29       	or	r21, r11
    1f34:	6c 29       	or	r22, r12
    1f36:	7d 29       	or	r23, r13
    1f38:	4d 83       	std	Y+5, r20	; 0x05
    1f3a:	5e 83       	std	Y+6, r21	; 0x06
    1f3c:	6f 83       	std	Y+7, r22	; 0x07
    1f3e:	78 87       	std	Y+8, r23	; 0x08
    1f40:	8e e1       	ldi	r24, 0x1E	; 30
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	8e 1b       	sub	r24, r30
    1f46:	9f 0b       	sbc	r25, r31
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
    1f4c:	12 c0       	rjmp	.+36     	; 0x1f72 <__floatunsisf+0xe0>
    1f4e:	30 97       	sbiw	r30, 0x00	; 0
    1f50:	81 f0       	breq	.+32     	; 0x1f72 <__floatunsisf+0xe0>
    1f52:	0e 2e       	mov	r0, r30
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <__floatunsisf+0xcc>
    1f56:	ee 0c       	add	r14, r14
    1f58:	ff 1c       	adc	r15, r15
    1f5a:	00 1f       	adc	r16, r16
    1f5c:	11 1f       	adc	r17, r17
    1f5e:	0a 94       	dec	r0
    1f60:	d2 f7       	brpl	.-12     	; 0x1f56 <__floatunsisf+0xc4>
    1f62:	ed 82       	std	Y+5, r14	; 0x05
    1f64:	fe 82       	std	Y+6, r15	; 0x06
    1f66:	0f 83       	std	Y+7, r16	; 0x07
    1f68:	18 87       	std	Y+8, r17	; 0x08
    1f6a:	ce 1a       	sub	r12, r30
    1f6c:	df 0a       	sbc	r13, r31
    1f6e:	dc 82       	std	Y+4, r13	; 0x04
    1f70:	cb 82       	std	Y+3, r12	; 0x03
    1f72:	1a 82       	std	Y+2, r1	; 0x02
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	0e 94 11 10 	call	0x2022	; 0x2022 <__pack_f>
    1f7c:	28 96       	adiw	r28, 0x08	; 8
    1f7e:	ea e0       	ldi	r30, 0x0A	; 10
    1f80:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__epilogue_restores__+0x10>

00001f84 <__clzsi2>:
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	7b 01       	movw	r14, r22
    1f8e:	8c 01       	movw	r16, r24
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	e8 16       	cp	r14, r24
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	f8 06       	cpc	r15, r24
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	08 07       	cpc	r16, r24
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	18 07       	cpc	r17, r24
    1fa0:	88 f4       	brcc	.+34     	; 0x1fc4 <__clzsi2+0x40>
    1fa2:	8f ef       	ldi	r24, 0xFF	; 255
    1fa4:	e8 16       	cp	r14, r24
    1fa6:	f1 04       	cpc	r15, r1
    1fa8:	01 05       	cpc	r16, r1
    1faa:	11 05       	cpc	r17, r1
    1fac:	31 f0       	breq	.+12     	; 0x1fba <__clzsi2+0x36>
    1fae:	28 f0       	brcs	.+10     	; 0x1fba <__clzsi2+0x36>
    1fb0:	88 e0       	ldi	r24, 0x08	; 8
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	17 c0       	rjmp	.+46     	; 0x1fe8 <__clzsi2+0x64>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 e0       	ldi	r26, 0x00	; 0
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	12 c0       	rjmp	.+36     	; 0x1fe8 <__clzsi2+0x64>
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	e8 16       	cp	r14, r24
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	f8 06       	cpc	r15, r24
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	08 07       	cpc	r16, r24
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	18 07       	cpc	r17, r24
    1fd4:	28 f0       	brcs	.+10     	; 0x1fe0 <__clzsi2+0x5c>
    1fd6:	88 e1       	ldi	r24, 0x18	; 24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <__clzsi2+0x64>
    1fe0:	80 e1       	ldi	r24, 0x10	; 16
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	20 e2       	ldi	r18, 0x20	; 32
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	28 1b       	sub	r18, r24
    1ff2:	39 0b       	sbc	r19, r25
    1ff4:	4a 0b       	sbc	r20, r26
    1ff6:	5b 0b       	sbc	r21, r27
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <__clzsi2+0x7e>
    1ffa:	16 95       	lsr	r17
    1ffc:	07 95       	ror	r16
    1ffe:	f7 94       	ror	r15
    2000:	e7 94       	ror	r14
    2002:	8a 95       	dec	r24
    2004:	d2 f7       	brpl	.-12     	; 0x1ffa <__clzsi2+0x76>
    2006:	f7 01       	movw	r30, r14
    2008:	e5 5e       	subi	r30, 0xE5	; 229
    200a:	fe 4f       	sbci	r31, 0xFE	; 254
    200c:	80 81       	ld	r24, Z
    200e:	28 1b       	sub	r18, r24
    2010:	31 09       	sbc	r19, r1
    2012:	41 09       	sbc	r20, r1
    2014:	51 09       	sbc	r21, r1
    2016:	c9 01       	movw	r24, r18
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	08 95       	ret

00002022 <__pack_f>:
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	fc 01       	movw	r30, r24
    202e:	e4 80       	ldd	r14, Z+4	; 0x04
    2030:	f5 80       	ldd	r15, Z+5	; 0x05
    2032:	06 81       	ldd	r16, Z+6	; 0x06
    2034:	17 81       	ldd	r17, Z+7	; 0x07
    2036:	d1 80       	ldd	r13, Z+1	; 0x01
    2038:	80 81       	ld	r24, Z
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	48 f4       	brcc	.+18     	; 0x2050 <__pack_f+0x2e>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a0 e1       	ldi	r26, 0x10	; 16
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e8 2a       	or	r14, r24
    2048:	f9 2a       	or	r15, r25
    204a:	0a 2b       	or	r16, r26
    204c:	1b 2b       	or	r17, r27
    204e:	a5 c0       	rjmp	.+330    	; 0x219a <__pack_f+0x178>
    2050:	84 30       	cpi	r24, 0x04	; 4
    2052:	09 f4       	brne	.+2      	; 0x2056 <__pack_f+0x34>
    2054:	9f c0       	rjmp	.+318    	; 0x2194 <__pack_f+0x172>
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	21 f4       	brne	.+8      	; 0x2062 <__pack_f+0x40>
    205a:	ee 24       	eor	r14, r14
    205c:	ff 24       	eor	r15, r15
    205e:	87 01       	movw	r16, r14
    2060:	05 c0       	rjmp	.+10     	; 0x206c <__pack_f+0x4a>
    2062:	e1 14       	cp	r14, r1
    2064:	f1 04       	cpc	r15, r1
    2066:	01 05       	cpc	r16, r1
    2068:	11 05       	cpc	r17, r1
    206a:	19 f4       	brne	.+6      	; 0x2072 <__pack_f+0x50>
    206c:	e0 e0       	ldi	r30, 0x00	; 0
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	96 c0       	rjmp	.+300    	; 0x219e <__pack_f+0x17c>
    2072:	62 81       	ldd	r22, Z+2	; 0x02
    2074:	73 81       	ldd	r23, Z+3	; 0x03
    2076:	9f ef       	ldi	r25, 0xFF	; 255
    2078:	62 38       	cpi	r22, 0x82	; 130
    207a:	79 07       	cpc	r23, r25
    207c:	0c f0       	brlt	.+2      	; 0x2080 <__pack_f+0x5e>
    207e:	5b c0       	rjmp	.+182    	; 0x2136 <__pack_f+0x114>
    2080:	22 e8       	ldi	r18, 0x82	; 130
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	26 1b       	sub	r18, r22
    2086:	37 0b       	sbc	r19, r23
    2088:	2a 31       	cpi	r18, 0x1A	; 26
    208a:	31 05       	cpc	r19, r1
    208c:	2c f0       	brlt	.+10     	; 0x2098 <__pack_f+0x76>
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	2a c0       	rjmp	.+84     	; 0x20ec <__pack_f+0xca>
    2098:	b8 01       	movw	r22, r16
    209a:	a7 01       	movw	r20, r14
    209c:	02 2e       	mov	r0, r18
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <__pack_f+0x86>
    20a0:	76 95       	lsr	r23
    20a2:	67 95       	ror	r22
    20a4:	57 95       	ror	r21
    20a6:	47 95       	ror	r20
    20a8:	0a 94       	dec	r0
    20aa:	d2 f7       	brpl	.-12     	; 0x20a0 <__pack_f+0x7e>
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <__pack_f+0x9c>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	aa 1f       	adc	r26, r26
    20bc:	bb 1f       	adc	r27, r27
    20be:	2a 95       	dec	r18
    20c0:	d2 f7       	brpl	.-12     	; 0x20b6 <__pack_f+0x94>
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	a1 09       	sbc	r26, r1
    20c6:	b1 09       	sbc	r27, r1
    20c8:	8e 21       	and	r24, r14
    20ca:	9f 21       	and	r25, r15
    20cc:	a0 23       	and	r26, r16
    20ce:	b1 23       	and	r27, r17
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	a1 05       	cpc	r26, r1
    20d4:	b1 05       	cpc	r27, r1
    20d6:	21 f0       	breq	.+8      	; 0x20e0 <__pack_f+0xbe>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 e0       	ldi	r26, 0x00	; 0
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	9a 01       	movw	r18, r20
    20e2:	ab 01       	movw	r20, r22
    20e4:	28 2b       	or	r18, r24
    20e6:	39 2b       	or	r19, r25
    20e8:	4a 2b       	or	r20, r26
    20ea:	5b 2b       	or	r21, r27
    20ec:	da 01       	movw	r26, r20
    20ee:	c9 01       	movw	r24, r18
    20f0:	8f 77       	andi	r24, 0x7F	; 127
    20f2:	90 70       	andi	r25, 0x00	; 0
    20f4:	a0 70       	andi	r26, 0x00	; 0
    20f6:	b0 70       	andi	r27, 0x00	; 0
    20f8:	80 34       	cpi	r24, 0x40	; 64
    20fa:	91 05       	cpc	r25, r1
    20fc:	a1 05       	cpc	r26, r1
    20fe:	b1 05       	cpc	r27, r1
    2100:	39 f4       	brne	.+14     	; 0x2110 <__pack_f+0xee>
    2102:	27 ff       	sbrs	r18, 7
    2104:	09 c0       	rjmp	.+18     	; 0x2118 <__pack_f+0xf6>
    2106:	20 5c       	subi	r18, 0xC0	; 192
    2108:	3f 4f       	sbci	r19, 0xFF	; 255
    210a:	4f 4f       	sbci	r20, 0xFF	; 255
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <__pack_f+0xf6>
    2110:	21 5c       	subi	r18, 0xC1	; 193
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	4f 4f       	sbci	r20, 0xFF	; 255
    2116:	5f 4f       	sbci	r21, 0xFF	; 255
    2118:	e0 e0       	ldi	r30, 0x00	; 0
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	20 30       	cpi	r18, 0x00	; 0
    211e:	a0 e0       	ldi	r26, 0x00	; 0
    2120:	3a 07       	cpc	r19, r26
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	4a 07       	cpc	r20, r26
    2126:	a0 e4       	ldi	r26, 0x40	; 64
    2128:	5a 07       	cpc	r21, r26
    212a:	10 f0       	brcs	.+4      	; 0x2130 <__pack_f+0x10e>
    212c:	e1 e0       	ldi	r30, 0x01	; 1
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	79 01       	movw	r14, r18
    2132:	8a 01       	movw	r16, r20
    2134:	27 c0       	rjmp	.+78     	; 0x2184 <__pack_f+0x162>
    2136:	60 38       	cpi	r22, 0x80	; 128
    2138:	71 05       	cpc	r23, r1
    213a:	64 f5       	brge	.+88     	; 0x2194 <__pack_f+0x172>
    213c:	fb 01       	movw	r30, r22
    213e:	e1 58       	subi	r30, 0x81	; 129
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	d8 01       	movw	r26, r16
    2144:	c7 01       	movw	r24, r14
    2146:	8f 77       	andi	r24, 0x7F	; 127
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	a0 70       	andi	r26, 0x00	; 0
    214c:	b0 70       	andi	r27, 0x00	; 0
    214e:	80 34       	cpi	r24, 0x40	; 64
    2150:	91 05       	cpc	r25, r1
    2152:	a1 05       	cpc	r26, r1
    2154:	b1 05       	cpc	r27, r1
    2156:	39 f4       	brne	.+14     	; 0x2166 <__pack_f+0x144>
    2158:	e7 fe       	sbrs	r14, 7
    215a:	0d c0       	rjmp	.+26     	; 0x2176 <__pack_f+0x154>
    215c:	80 e4       	ldi	r24, 0x40	; 64
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e0       	ldi	r26, 0x00	; 0
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	04 c0       	rjmp	.+8      	; 0x216e <__pack_f+0x14c>
    2166:	8f e3       	ldi	r24, 0x3F	; 63
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e0       	ldi	r26, 0x00	; 0
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e8 0e       	add	r14, r24
    2170:	f9 1e       	adc	r15, r25
    2172:	0a 1f       	adc	r16, r26
    2174:	1b 1f       	adc	r17, r27
    2176:	17 ff       	sbrs	r17, 7
    2178:	05 c0       	rjmp	.+10     	; 0x2184 <__pack_f+0x162>
    217a:	16 95       	lsr	r17
    217c:	07 95       	ror	r16
    217e:	f7 94       	ror	r15
    2180:	e7 94       	ror	r14
    2182:	31 96       	adiw	r30, 0x01	; 1
    2184:	87 e0       	ldi	r24, 0x07	; 7
    2186:	16 95       	lsr	r17
    2188:	07 95       	ror	r16
    218a:	f7 94       	ror	r15
    218c:	e7 94       	ror	r14
    218e:	8a 95       	dec	r24
    2190:	d1 f7       	brne	.-12     	; 0x2186 <__pack_f+0x164>
    2192:	05 c0       	rjmp	.+10     	; 0x219e <__pack_f+0x17c>
    2194:	ee 24       	eor	r14, r14
    2196:	ff 24       	eor	r15, r15
    2198:	87 01       	movw	r16, r14
    219a:	ef ef       	ldi	r30, 0xFF	; 255
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	6e 2f       	mov	r22, r30
    21a0:	67 95       	ror	r22
    21a2:	66 27       	eor	r22, r22
    21a4:	67 95       	ror	r22
    21a6:	90 2f       	mov	r25, r16
    21a8:	9f 77       	andi	r25, 0x7F	; 127
    21aa:	d7 94       	ror	r13
    21ac:	dd 24       	eor	r13, r13
    21ae:	d7 94       	ror	r13
    21b0:	8e 2f       	mov	r24, r30
    21b2:	86 95       	lsr	r24
    21b4:	49 2f       	mov	r20, r25
    21b6:	46 2b       	or	r20, r22
    21b8:	58 2f       	mov	r21, r24
    21ba:	5d 29       	or	r21, r13
    21bc:	b7 01       	movw	r22, r14
    21be:	ca 01       	movw	r24, r20
    21c0:	1f 91       	pop	r17
    21c2:	0f 91       	pop	r16
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	08 95       	ret

000021cc <__unpack_f>:
    21cc:	fc 01       	movw	r30, r24
    21ce:	db 01       	movw	r26, r22
    21d0:	40 81       	ld	r20, Z
    21d2:	51 81       	ldd	r21, Z+1	; 0x01
    21d4:	22 81       	ldd	r18, Z+2	; 0x02
    21d6:	62 2f       	mov	r22, r18
    21d8:	6f 77       	andi	r22, 0x7F	; 127
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	22 1f       	adc	r18, r18
    21de:	22 27       	eor	r18, r18
    21e0:	22 1f       	adc	r18, r18
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	89 2f       	mov	r24, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	82 2b       	or	r24, r18
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	99 1f       	adc	r25, r25
    21f0:	99 27       	eor	r25, r25
    21f2:	99 1f       	adc	r25, r25
    21f4:	11 96       	adiw	r26, 0x01	; 1
    21f6:	9c 93       	st	X, r25
    21f8:	11 97       	sbiw	r26, 0x01	; 1
    21fa:	21 15       	cp	r18, r1
    21fc:	31 05       	cpc	r19, r1
    21fe:	a9 f5       	brne	.+106    	; 0x226a <__unpack_f+0x9e>
    2200:	41 15       	cp	r20, r1
    2202:	51 05       	cpc	r21, r1
    2204:	61 05       	cpc	r22, r1
    2206:	71 05       	cpc	r23, r1
    2208:	11 f4       	brne	.+4      	; 0x220e <__unpack_f+0x42>
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	37 c0       	rjmp	.+110    	; 0x227c <__unpack_f+0xb0>
    220e:	82 e8       	ldi	r24, 0x82	; 130
    2210:	9f ef       	ldi	r25, 0xFF	; 255
    2212:	13 96       	adiw	r26, 0x03	; 3
    2214:	9c 93       	st	X, r25
    2216:	8e 93       	st	-X, r24
    2218:	12 97       	sbiw	r26, 0x02	; 2
    221a:	9a 01       	movw	r18, r20
    221c:	ab 01       	movw	r20, r22
    221e:	67 e0       	ldi	r22, 0x07	; 7
    2220:	22 0f       	add	r18, r18
    2222:	33 1f       	adc	r19, r19
    2224:	44 1f       	adc	r20, r20
    2226:	55 1f       	adc	r21, r21
    2228:	6a 95       	dec	r22
    222a:	d1 f7       	brne	.-12     	; 0x2220 <__unpack_f+0x54>
    222c:	83 e0       	ldi	r24, 0x03	; 3
    222e:	8c 93       	st	X, r24
    2230:	0d c0       	rjmp	.+26     	; 0x224c <__unpack_f+0x80>
    2232:	22 0f       	add	r18, r18
    2234:	33 1f       	adc	r19, r19
    2236:	44 1f       	adc	r20, r20
    2238:	55 1f       	adc	r21, r21
    223a:	12 96       	adiw	r26, 0x02	; 2
    223c:	8d 91       	ld	r24, X+
    223e:	9c 91       	ld	r25, X
    2240:	13 97       	sbiw	r26, 0x03	; 3
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	13 96       	adiw	r26, 0x03	; 3
    2246:	9c 93       	st	X, r25
    2248:	8e 93       	st	-X, r24
    224a:	12 97       	sbiw	r26, 0x02	; 2
    224c:	20 30       	cpi	r18, 0x00	; 0
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	38 07       	cpc	r19, r24
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	48 07       	cpc	r20, r24
    2256:	80 e4       	ldi	r24, 0x40	; 64
    2258:	58 07       	cpc	r21, r24
    225a:	58 f3       	brcs	.-42     	; 0x2232 <__unpack_f+0x66>
    225c:	14 96       	adiw	r26, 0x04	; 4
    225e:	2d 93       	st	X+, r18
    2260:	3d 93       	st	X+, r19
    2262:	4d 93       	st	X+, r20
    2264:	5c 93       	st	X, r21
    2266:	17 97       	sbiw	r26, 0x07	; 7
    2268:	08 95       	ret
    226a:	2f 3f       	cpi	r18, 0xFF	; 255
    226c:	31 05       	cpc	r19, r1
    226e:	79 f4       	brne	.+30     	; 0x228e <__unpack_f+0xc2>
    2270:	41 15       	cp	r20, r1
    2272:	51 05       	cpc	r21, r1
    2274:	61 05       	cpc	r22, r1
    2276:	71 05       	cpc	r23, r1
    2278:	19 f4       	brne	.+6      	; 0x2280 <__unpack_f+0xb4>
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	8c 93       	st	X, r24
    227e:	08 95       	ret
    2280:	64 ff       	sbrs	r22, 4
    2282:	03 c0       	rjmp	.+6      	; 0x228a <__unpack_f+0xbe>
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	8c 93       	st	X, r24
    2288:	12 c0       	rjmp	.+36     	; 0x22ae <__unpack_f+0xe2>
    228a:	1c 92       	st	X, r1
    228c:	10 c0       	rjmp	.+32     	; 0x22ae <__unpack_f+0xe2>
    228e:	2f 57       	subi	r18, 0x7F	; 127
    2290:	30 40       	sbci	r19, 0x00	; 0
    2292:	13 96       	adiw	r26, 0x03	; 3
    2294:	3c 93       	st	X, r19
    2296:	2e 93       	st	-X, r18
    2298:	12 97       	sbiw	r26, 0x02	; 2
    229a:	83 e0       	ldi	r24, 0x03	; 3
    229c:	8c 93       	st	X, r24
    229e:	87 e0       	ldi	r24, 0x07	; 7
    22a0:	44 0f       	add	r20, r20
    22a2:	55 1f       	adc	r21, r21
    22a4:	66 1f       	adc	r22, r22
    22a6:	77 1f       	adc	r23, r23
    22a8:	8a 95       	dec	r24
    22aa:	d1 f7       	brne	.-12     	; 0x22a0 <__unpack_f+0xd4>
    22ac:	70 64       	ori	r23, 0x40	; 64
    22ae:	14 96       	adiw	r26, 0x04	; 4
    22b0:	4d 93       	st	X+, r20
    22b2:	5d 93       	st	X+, r21
    22b4:	6d 93       	st	X+, r22
    22b6:	7c 93       	st	X, r23
    22b8:	17 97       	sbiw	r26, 0x07	; 7
    22ba:	08 95       	ret

000022bc <__fpcmp_parts_f>:
    22bc:	1f 93       	push	r17
    22be:	dc 01       	movw	r26, r24
    22c0:	fb 01       	movw	r30, r22
    22c2:	9c 91       	ld	r25, X
    22c4:	92 30       	cpi	r25, 0x02	; 2
    22c6:	08 f4       	brcc	.+2      	; 0x22ca <__fpcmp_parts_f+0xe>
    22c8:	47 c0       	rjmp	.+142    	; 0x2358 <__fpcmp_parts_f+0x9c>
    22ca:	80 81       	ld	r24, Z
    22cc:	82 30       	cpi	r24, 0x02	; 2
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <__fpcmp_parts_f+0x16>
    22d0:	43 c0       	rjmp	.+134    	; 0x2358 <__fpcmp_parts_f+0x9c>
    22d2:	94 30       	cpi	r25, 0x04	; 4
    22d4:	51 f4       	brne	.+20     	; 0x22ea <__fpcmp_parts_f+0x2e>
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	1c 91       	ld	r17, X
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	99 f5       	brne	.+102    	; 0x2344 <__fpcmp_parts_f+0x88>
    22de:	81 81       	ldd	r24, Z+1	; 0x01
    22e0:	68 2f       	mov	r22, r24
    22e2:	70 e0       	ldi	r23, 0x00	; 0
    22e4:	61 1b       	sub	r22, r17
    22e6:	71 09       	sbc	r23, r1
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <__fpcmp_parts_f+0xac>
    22ea:	84 30       	cpi	r24, 0x04	; 4
    22ec:	21 f0       	breq	.+8      	; 0x22f6 <__fpcmp_parts_f+0x3a>
    22ee:	92 30       	cpi	r25, 0x02	; 2
    22f0:	31 f4       	brne	.+12     	; 0x22fe <__fpcmp_parts_f+0x42>
    22f2:	82 30       	cpi	r24, 0x02	; 2
    22f4:	b9 f1       	breq	.+110    	; 0x2364 <__fpcmp_parts_f+0xa8>
    22f6:	81 81       	ldd	r24, Z+1	; 0x01
    22f8:	88 23       	and	r24, r24
    22fa:	89 f1       	breq	.+98     	; 0x235e <__fpcmp_parts_f+0xa2>
    22fc:	2d c0       	rjmp	.+90     	; 0x2358 <__fpcmp_parts_f+0x9c>
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	1c 91       	ld	r17, X
    2302:	11 97       	sbiw	r26, 0x01	; 1
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	f1 f0       	breq	.+60     	; 0x2344 <__fpcmp_parts_f+0x88>
    2308:	81 81       	ldd	r24, Z+1	; 0x01
    230a:	18 17       	cp	r17, r24
    230c:	d9 f4       	brne	.+54     	; 0x2344 <__fpcmp_parts_f+0x88>
    230e:	12 96       	adiw	r26, 0x02	; 2
    2310:	2d 91       	ld	r18, X+
    2312:	3c 91       	ld	r19, X
    2314:	13 97       	sbiw	r26, 0x03	; 3
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	82 17       	cp	r24, r18
    231c:	93 07       	cpc	r25, r19
    231e:	94 f0       	brlt	.+36     	; 0x2344 <__fpcmp_parts_f+0x88>
    2320:	28 17       	cp	r18, r24
    2322:	39 07       	cpc	r19, r25
    2324:	bc f0       	brlt	.+46     	; 0x2354 <__fpcmp_parts_f+0x98>
    2326:	14 96       	adiw	r26, 0x04	; 4
    2328:	8d 91       	ld	r24, X+
    232a:	9d 91       	ld	r25, X+
    232c:	0d 90       	ld	r0, X+
    232e:	bc 91       	ld	r27, X
    2330:	a0 2d       	mov	r26, r0
    2332:	24 81       	ldd	r18, Z+4	; 0x04
    2334:	35 81       	ldd	r19, Z+5	; 0x05
    2336:	46 81       	ldd	r20, Z+6	; 0x06
    2338:	57 81       	ldd	r21, Z+7	; 0x07
    233a:	28 17       	cp	r18, r24
    233c:	39 07       	cpc	r19, r25
    233e:	4a 07       	cpc	r20, r26
    2340:	5b 07       	cpc	r21, r27
    2342:	18 f4       	brcc	.+6      	; 0x234a <__fpcmp_parts_f+0x8e>
    2344:	11 23       	and	r17, r17
    2346:	41 f0       	breq	.+16     	; 0x2358 <__fpcmp_parts_f+0x9c>
    2348:	0a c0       	rjmp	.+20     	; 0x235e <__fpcmp_parts_f+0xa2>
    234a:	82 17       	cp	r24, r18
    234c:	93 07       	cpc	r25, r19
    234e:	a4 07       	cpc	r26, r20
    2350:	b5 07       	cpc	r27, r21
    2352:	40 f4       	brcc	.+16     	; 0x2364 <__fpcmp_parts_f+0xa8>
    2354:	11 23       	and	r17, r17
    2356:	19 f0       	breq	.+6      	; 0x235e <__fpcmp_parts_f+0xa2>
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <__fpcmp_parts_f+0xac>
    235e:	6f ef       	ldi	r22, 0xFF	; 255
    2360:	7f ef       	ldi	r23, 0xFF	; 255
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <__fpcmp_parts_f+0xac>
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	cb 01       	movw	r24, r22
    236a:	1f 91       	pop	r17
    236c:	08 95       	ret

0000236e <__mulsi3>:
    236e:	62 9f       	mul	r22, r18
    2370:	d0 01       	movw	r26, r0
    2372:	73 9f       	mul	r23, r19
    2374:	f0 01       	movw	r30, r0
    2376:	82 9f       	mul	r24, r18
    2378:	e0 0d       	add	r30, r0
    237a:	f1 1d       	adc	r31, r1
    237c:	64 9f       	mul	r22, r20
    237e:	e0 0d       	add	r30, r0
    2380:	f1 1d       	adc	r31, r1
    2382:	92 9f       	mul	r25, r18
    2384:	f0 0d       	add	r31, r0
    2386:	83 9f       	mul	r24, r19
    2388:	f0 0d       	add	r31, r0
    238a:	74 9f       	mul	r23, r20
    238c:	f0 0d       	add	r31, r0
    238e:	65 9f       	mul	r22, r21
    2390:	f0 0d       	add	r31, r0
    2392:	99 27       	eor	r25, r25
    2394:	72 9f       	mul	r23, r18
    2396:	b0 0d       	add	r27, r0
    2398:	e1 1d       	adc	r30, r1
    239a:	f9 1f       	adc	r31, r25
    239c:	63 9f       	mul	r22, r19
    239e:	b0 0d       	add	r27, r0
    23a0:	e1 1d       	adc	r30, r1
    23a2:	f9 1f       	adc	r31, r25
    23a4:	bd 01       	movw	r22, r26
    23a6:	cf 01       	movw	r24, r30
    23a8:	11 24       	eor	r1, r1
    23aa:	08 95       	ret

000023ac <__prologue_saves__>:
    23ac:	2f 92       	push	r2
    23ae:	3f 92       	push	r3
    23b0:	4f 92       	push	r4
    23b2:	5f 92       	push	r5
    23b4:	6f 92       	push	r6
    23b6:	7f 92       	push	r7
    23b8:	8f 92       	push	r8
    23ba:	9f 92       	push	r9
    23bc:	af 92       	push	r10
    23be:	bf 92       	push	r11
    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	ca 1b       	sub	r28, r26
    23d6:	db 0b       	sbc	r29, r27
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	09 94       	ijmp

000023e4 <__epilogue_restores__>:
    23e4:	2a 88       	ldd	r2, Y+18	; 0x12
    23e6:	39 88       	ldd	r3, Y+17	; 0x11
    23e8:	48 88       	ldd	r4, Y+16	; 0x10
    23ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    23f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f6:	b9 84       	ldd	r11, Y+9	; 0x09
    23f8:	c8 84       	ldd	r12, Y+8	; 0x08
    23fa:	df 80       	ldd	r13, Y+7	; 0x07
    23fc:	ee 80       	ldd	r14, Y+6	; 0x06
    23fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2400:	0c 81       	ldd	r16, Y+4	; 0x04
    2402:	1b 81       	ldd	r17, Y+3	; 0x03
    2404:	aa 81       	ldd	r26, Y+2	; 0x02
    2406:	b9 81       	ldd	r27, Y+1	; 0x01
    2408:	ce 0f       	add	r28, r30
    240a:	d1 1d       	adc	r29, r1
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	ed 01       	movw	r28, r26
    2418:	08 95       	ret

0000241a <itoa>:
    241a:	fb 01       	movw	r30, r22
    241c:	9f 01       	movw	r18, r30
    241e:	e8 94       	clt
    2420:	42 30       	cpi	r20, 0x02	; 2
    2422:	c4 f0       	brlt	.+48     	; 0x2454 <itoa+0x3a>
    2424:	45 32       	cpi	r20, 0x25	; 37
    2426:	b4 f4       	brge	.+44     	; 0x2454 <itoa+0x3a>
    2428:	4a 30       	cpi	r20, 0x0A	; 10
    242a:	29 f4       	brne	.+10     	; 0x2436 <itoa+0x1c>
    242c:	97 fb       	bst	r25, 7
    242e:	1e f4       	brtc	.+6      	; 0x2436 <itoa+0x1c>
    2430:	90 95       	com	r25
    2432:	81 95       	neg	r24
    2434:	9f 4f       	sbci	r25, 0xFF	; 255
    2436:	64 2f       	mov	r22, r20
    2438:	77 27       	eor	r23, r23
    243a:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodhi4>
    243e:	80 5d       	subi	r24, 0xD0	; 208
    2440:	8a 33       	cpi	r24, 0x3A	; 58
    2442:	0c f0       	brlt	.+2      	; 0x2446 <itoa+0x2c>
    2444:	89 5d       	subi	r24, 0xD9	; 217
    2446:	81 93       	st	Z+, r24
    2448:	cb 01       	movw	r24, r22
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	a1 f7       	brne	.-24     	; 0x2436 <itoa+0x1c>
    244e:	16 f4       	brtc	.+4      	; 0x2454 <itoa+0x3a>
    2450:	5d e2       	ldi	r21, 0x2D	; 45
    2452:	51 93       	st	Z+, r21
    2454:	10 82       	st	Z, r1
    2456:	c9 01       	movw	r24, r18
    2458:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <strrev>

0000245c <ltoa>:
    245c:	fa 01       	movw	r30, r20
    245e:	cf 93       	push	r28
    2460:	ff 93       	push	r31
    2462:	ef 93       	push	r30
    2464:	22 30       	cpi	r18, 0x02	; 2
    2466:	44 f1       	brlt	.+80     	; 0x24b8 <ltoa+0x5c>
    2468:	25 32       	cpi	r18, 0x25	; 37
    246a:	34 f5       	brge	.+76     	; 0x24b8 <ltoa+0x5c>
    246c:	c2 2f       	mov	r28, r18
    246e:	e8 94       	clt
    2470:	ca 30       	cpi	r28, 0x0A	; 10
    2472:	49 f4       	brne	.+18     	; 0x2486 <ltoa+0x2a>
    2474:	97 fb       	bst	r25, 7
    2476:	3e f4       	brtc	.+14     	; 0x2486 <ltoa+0x2a>
    2478:	90 95       	com	r25
    247a:	80 95       	com	r24
    247c:	70 95       	com	r23
    247e:	61 95       	neg	r22
    2480:	7f 4f       	sbci	r23, 0xFF	; 255
    2482:	8f 4f       	sbci	r24, 0xFF	; 255
    2484:	9f 4f       	sbci	r25, 0xFF	; 255
    2486:	2c 2f       	mov	r18, r28
    2488:	33 27       	eor	r19, r19
    248a:	44 27       	eor	r20, r20
    248c:	55 27       	eor	r21, r21
    248e:	ff 93       	push	r31
    2490:	ef 93       	push	r30
    2492:	0e 94 2c 14 	call	0x2858	; 0x2858 <__udivmodsi4>
    2496:	ef 91       	pop	r30
    2498:	ff 91       	pop	r31
    249a:	60 5d       	subi	r22, 0xD0	; 208
    249c:	6a 33       	cpi	r22, 0x3A	; 58
    249e:	0c f0       	brlt	.+2      	; 0x24a2 <ltoa+0x46>
    24a0:	69 5d       	subi	r22, 0xD9	; 217
    24a2:	61 93       	st	Z+, r22
    24a4:	b9 01       	movw	r22, r18
    24a6:	ca 01       	movw	r24, r20
    24a8:	60 50       	subi	r22, 0x00	; 0
    24aa:	70 40       	sbci	r23, 0x00	; 0
    24ac:	80 40       	sbci	r24, 0x00	; 0
    24ae:	90 40       	sbci	r25, 0x00	; 0
    24b0:	51 f7       	brne	.-44     	; 0x2486 <ltoa+0x2a>
    24b2:	16 f4       	brtc	.+4      	; 0x24b8 <ltoa+0x5c>
    24b4:	cd e2       	ldi	r28, 0x2D	; 45
    24b6:	c1 93       	st	Z+, r28
    24b8:	10 82       	st	Z, r1
    24ba:	8f 91       	pop	r24
    24bc:	9f 91       	pop	r25
    24be:	cf 91       	pop	r28
    24c0:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <strrev>

000024c4 <ultoa>:
    24c4:	fa 01       	movw	r30, r20
    24c6:	cf 93       	push	r28
    24c8:	ff 93       	push	r31
    24ca:	ef 93       	push	r30
    24cc:	22 30       	cpi	r18, 0x02	; 2
    24ce:	cc f0       	brlt	.+50     	; 0x2502 <ultoa+0x3e>
    24d0:	25 32       	cpi	r18, 0x25	; 37
    24d2:	bc f4       	brge	.+46     	; 0x2502 <ultoa+0x3e>
    24d4:	c2 2f       	mov	r28, r18
    24d6:	2c 2f       	mov	r18, r28
    24d8:	33 27       	eor	r19, r19
    24da:	44 27       	eor	r20, r20
    24dc:	55 27       	eor	r21, r21
    24de:	ff 93       	push	r31
    24e0:	ef 93       	push	r30
    24e2:	0e 94 2c 14 	call	0x2858	; 0x2858 <__udivmodsi4>
    24e6:	ef 91       	pop	r30
    24e8:	ff 91       	pop	r31
    24ea:	60 5d       	subi	r22, 0xD0	; 208
    24ec:	6a 33       	cpi	r22, 0x3A	; 58
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <ultoa+0x2e>
    24f0:	69 5d       	subi	r22, 0xD9	; 217
    24f2:	61 93       	st	Z+, r22
    24f4:	b9 01       	movw	r22, r18
    24f6:	ca 01       	movw	r24, r20
    24f8:	60 50       	subi	r22, 0x00	; 0
    24fa:	70 40       	sbci	r23, 0x00	; 0
    24fc:	80 40       	sbci	r24, 0x00	; 0
    24fe:	90 40       	sbci	r25, 0x00	; 0
    2500:	51 f7       	brne	.-44     	; 0x24d6 <ultoa+0x12>
    2502:	10 82       	st	Z, r1
    2504:	8f 91       	pop	r24
    2506:	9f 91       	pop	r25
    2508:	cf 91       	pop	r28
    250a:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <strrev>

0000250e <utoa>:
    250e:	fb 01       	movw	r30, r22
    2510:	9f 01       	movw	r18, r30
    2512:	42 30       	cpi	r20, 0x02	; 2
    2514:	74 f0       	brlt	.+28     	; 0x2532 <utoa+0x24>
    2516:	45 32       	cpi	r20, 0x25	; 37
    2518:	64 f4       	brge	.+24     	; 0x2532 <utoa+0x24>
    251a:	64 2f       	mov	r22, r20
    251c:	77 27       	eor	r23, r23
    251e:	0e 94 18 14 	call	0x2830	; 0x2830 <__udivmodhi4>
    2522:	80 5d       	subi	r24, 0xD0	; 208
    2524:	8a 33       	cpi	r24, 0x3A	; 58
    2526:	0c f0       	brlt	.+2      	; 0x252a <utoa+0x1c>
    2528:	89 5d       	subi	r24, 0xD9	; 217
    252a:	81 93       	st	Z+, r24
    252c:	cb 01       	movw	r24, r22
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	a1 f7       	brne	.-24     	; 0x251a <utoa+0xc>
    2532:	10 82       	st	Z, r1
    2534:	c9 01       	movw	r24, r18
    2536:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <strrev>

0000253a <atan>:
    253a:	df 93       	push	r29
    253c:	dd 27       	eor	r29, r29
    253e:	b9 2f       	mov	r27, r25
    2540:	bf 77       	andi	r27, 0x7F	; 127
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	16 16       	cp	r1, r22
    2548:	17 06       	cpc	r1, r23
    254a:	48 07       	cpc	r20, r24
    254c:	5b 07       	cpc	r21, r27
    254e:	10 f4       	brcc	.+4      	; 0x2554 <atan+0x1a>
    2550:	d9 2f       	mov	r29, r25
    2552:	51 d0       	rcall	.+162    	; 0x25f6 <inverse>
    2554:	9f 93       	push	r25
    2556:	8f 93       	push	r24
    2558:	7f 93       	push	r23
    255a:	6f 93       	push	r22
    255c:	b4 d0       	rcall	.+360    	; 0x26c6 <square>
    255e:	ee e2       	ldi	r30, 0x2E	; 46
    2560:	f1 e0       	ldi	r31, 0x01	; 1
    2562:	13 d0       	rcall	.+38     	; 0x258a <__fp_powser>
    2564:	37 d0       	rcall	.+110    	; 0x25d4 <__fp_round>
    2566:	2f 91       	pop	r18
    2568:	3f 91       	pop	r19
    256a:	4f 91       	pop	r20
    256c:	5f 91       	pop	r21
    256e:	54 d0       	rcall	.+168    	; 0x2618 <__mulsf3x>
    2570:	dd 23       	and	r29, r29
    2572:	49 f0       	breq	.+18     	; 0x2586 <atan+0x4c>
    2574:	90 58       	subi	r25, 0x80	; 128
    2576:	a2 ea       	ldi	r26, 0xA2	; 162
    2578:	2a ed       	ldi	r18, 0xDA	; 218
    257a:	3f e0       	ldi	r19, 0x0F	; 15
    257c:	49 ec       	ldi	r20, 0xC9	; 201
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	d0 78       	andi	r29, 0x80	; 128
    2582:	5d 27       	eor	r21, r29
    2584:	c0 d0       	rcall	.+384    	; 0x2706 <__addsf3x>
    2586:	df 91       	pop	r29
    2588:	25 c0       	rjmp	.+74     	; 0x25d4 <__fp_round>

0000258a <__fp_powser>:
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	1f 93       	push	r17
    2590:	0f 93       	push	r16
    2592:	ff 92       	push	r15
    2594:	ef 92       	push	r14
    2596:	df 92       	push	r13
    2598:	7b 01       	movw	r14, r22
    259a:	8c 01       	movw	r16, r24
    259c:	68 94       	set
    259e:	05 c0       	rjmp	.+10     	; 0x25aa <__fp_powser+0x20>
    25a0:	da 2e       	mov	r13, r26
    25a2:	ef 01       	movw	r28, r30
    25a4:	39 d0       	rcall	.+114    	; 0x2618 <__mulsf3x>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e8 94       	clt
    25aa:	a5 91       	lpm	r26, Z+
    25ac:	25 91       	lpm	r18, Z+
    25ae:	35 91       	lpm	r19, Z+
    25b0:	45 91       	lpm	r20, Z+
    25b2:	55 91       	lpm	r21, Z+
    25b4:	ae f3       	brts	.-22     	; 0x25a0 <__fp_powser+0x16>
    25b6:	ef 01       	movw	r28, r30
    25b8:	a6 d0       	rcall	.+332    	; 0x2706 <__addsf3x>
    25ba:	fe 01       	movw	r30, r28
    25bc:	97 01       	movw	r18, r14
    25be:	a8 01       	movw	r20, r16
    25c0:	da 94       	dec	r13
    25c2:	79 f7       	brne	.-34     	; 0x25a2 <__fp_powser+0x18>
    25c4:	df 90       	pop	r13
    25c6:	ef 90       	pop	r14
    25c8:	ff 90       	pop	r15
    25ca:	0f 91       	pop	r16
    25cc:	1f 91       	pop	r17
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <__fp_round>:
    25d4:	09 2e       	mov	r0, r25
    25d6:	03 94       	inc	r0
    25d8:	00 0c       	add	r0, r0
    25da:	11 f4       	brne	.+4      	; 0x25e0 <__fp_round+0xc>
    25dc:	88 23       	and	r24, r24
    25de:	52 f0       	brmi	.+20     	; 0x25f4 <__fp_round+0x20>
    25e0:	bb 0f       	add	r27, r27
    25e2:	40 f4       	brcc	.+16     	; 0x25f4 <__fp_round+0x20>
    25e4:	bf 2b       	or	r27, r31
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__fp_round+0x18>
    25e8:	60 ff       	sbrs	r22, 0
    25ea:	04 c0       	rjmp	.+8      	; 0x25f4 <__fp_round+0x20>
    25ec:	6f 5f       	subi	r22, 0xFF	; 255
    25ee:	7f 4f       	sbci	r23, 0xFF	; 255
    25f0:	8f 4f       	sbci	r24, 0xFF	; 255
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	08 95       	ret

000025f6 <inverse>:
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	80 e8       	ldi	r24, 0x80	; 128
    2600:	9f e3       	ldi	r25, 0x3F	; 63
    2602:	b9 ca       	rjmp	.-2702   	; 0x1b76 <__divsf3>
    2604:	dc d0       	rcall	.+440    	; 0x27be <__fp_pscA>
    2606:	28 f0       	brcs	.+10     	; 0x2612 <inverse+0x1c>
    2608:	e1 d0       	rcall	.+450    	; 0x27cc <__fp_pscB>
    260a:	18 f0       	brcs	.+6      	; 0x2612 <inverse+0x1c>
    260c:	95 23       	and	r25, r21
    260e:	09 f0       	breq	.+2      	; 0x2612 <inverse+0x1c>
    2610:	cd c0       	rjmp	.+410    	; 0x27ac <__fp_inf>
    2612:	d2 c0       	rjmp	.+420    	; 0x27b8 <__fp_nan>
    2614:	11 24       	eor	r1, r1
    2616:	04 c1       	rjmp	.+520    	; 0x2820 <__fp_szero>

00002618 <__mulsf3x>:
    2618:	e0 d0       	rcall	.+448    	; 0x27da <__fp_split3>
    261a:	a0 f3       	brcs	.-24     	; 0x2604 <inverse+0xe>

0000261c <__mulsf3_pse>:
    261c:	95 9f       	mul	r25, r21
    261e:	d1 f3       	breq	.-12     	; 0x2614 <inverse+0x1e>
    2620:	95 0f       	add	r25, r21
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	55 1f       	adc	r21, r21
    2626:	62 9f       	mul	r22, r18
    2628:	f0 01       	movw	r30, r0
    262a:	72 9f       	mul	r23, r18
    262c:	bb 27       	eor	r27, r27
    262e:	f0 0d       	add	r31, r0
    2630:	b1 1d       	adc	r27, r1
    2632:	63 9f       	mul	r22, r19
    2634:	aa 27       	eor	r26, r26
    2636:	f0 0d       	add	r31, r0
    2638:	b1 1d       	adc	r27, r1
    263a:	aa 1f       	adc	r26, r26
    263c:	64 9f       	mul	r22, r20
    263e:	66 27       	eor	r22, r22
    2640:	b0 0d       	add	r27, r0
    2642:	a1 1d       	adc	r26, r1
    2644:	66 1f       	adc	r22, r22
    2646:	82 9f       	mul	r24, r18
    2648:	22 27       	eor	r18, r18
    264a:	b0 0d       	add	r27, r0
    264c:	a1 1d       	adc	r26, r1
    264e:	62 1f       	adc	r22, r18
    2650:	73 9f       	mul	r23, r19
    2652:	b0 0d       	add	r27, r0
    2654:	a1 1d       	adc	r26, r1
    2656:	62 1f       	adc	r22, r18
    2658:	83 9f       	mul	r24, r19
    265a:	a0 0d       	add	r26, r0
    265c:	61 1d       	adc	r22, r1
    265e:	22 1f       	adc	r18, r18
    2660:	74 9f       	mul	r23, r20
    2662:	33 27       	eor	r19, r19
    2664:	a0 0d       	add	r26, r0
    2666:	61 1d       	adc	r22, r1
    2668:	23 1f       	adc	r18, r19
    266a:	84 9f       	mul	r24, r20
    266c:	60 0d       	add	r22, r0
    266e:	21 1d       	adc	r18, r1
    2670:	82 2f       	mov	r24, r18
    2672:	76 2f       	mov	r23, r22
    2674:	6a 2f       	mov	r22, r26
    2676:	11 24       	eor	r1, r1
    2678:	9f 57       	subi	r25, 0x7F	; 127
    267a:	50 40       	sbci	r21, 0x00	; 0
    267c:	8a f0       	brmi	.+34     	; 0x26a0 <__mulsf3_pse+0x84>
    267e:	e1 f0       	breq	.+56     	; 0x26b8 <__mulsf3_pse+0x9c>
    2680:	88 23       	and	r24, r24
    2682:	4a f0       	brmi	.+18     	; 0x2696 <__mulsf3_pse+0x7a>
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	bb 1f       	adc	r27, r27
    268a:	66 1f       	adc	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	91 50       	subi	r25, 0x01	; 1
    2692:	50 40       	sbci	r21, 0x00	; 0
    2694:	a9 f7       	brne	.-22     	; 0x2680 <__mulsf3_pse+0x64>
    2696:	9e 3f       	cpi	r25, 0xFE	; 254
    2698:	51 05       	cpc	r21, r1
    269a:	70 f0       	brcs	.+28     	; 0x26b8 <__mulsf3_pse+0x9c>
    269c:	87 c0       	rjmp	.+270    	; 0x27ac <__fp_inf>
    269e:	c0 c0       	rjmp	.+384    	; 0x2820 <__fp_szero>
    26a0:	5f 3f       	cpi	r21, 0xFF	; 255
    26a2:	ec f3       	brlt	.-6      	; 0x269e <__mulsf3_pse+0x82>
    26a4:	98 3e       	cpi	r25, 0xE8	; 232
    26a6:	dc f3       	brlt	.-10     	; 0x269e <__mulsf3_pse+0x82>
    26a8:	86 95       	lsr	r24
    26aa:	77 95       	ror	r23
    26ac:	67 95       	ror	r22
    26ae:	b7 95       	ror	r27
    26b0:	f7 95       	ror	r31
    26b2:	e7 95       	ror	r30
    26b4:	9f 5f       	subi	r25, 0xFF	; 255
    26b6:	c1 f7       	brne	.-16     	; 0x26a8 <__mulsf3_pse+0x8c>
    26b8:	fe 2b       	or	r31, r30
    26ba:	88 0f       	add	r24, r24
    26bc:	91 1d       	adc	r25, r1
    26be:	96 95       	lsr	r25
    26c0:	87 95       	ror	r24
    26c2:	97 f9       	bld	r25, 7
    26c4:	08 95       	ret

000026c6 <square>:
    26c6:	9b 01       	movw	r18, r22
    26c8:	ac 01       	movw	r20, r24
    26ca:	b0 c0       	rjmp	.+352    	; 0x282c <__mulsf3>

000026cc <strrev>:
    26cc:	dc 01       	movw	r26, r24
    26ce:	fc 01       	movw	r30, r24
    26d0:	67 2f       	mov	r22, r23
    26d2:	71 91       	ld	r23, Z+
    26d4:	77 23       	and	r23, r23
    26d6:	e1 f7       	brne	.-8      	; 0x26d0 <strrev+0x4>
    26d8:	32 97       	sbiw	r30, 0x02	; 2
    26da:	04 c0       	rjmp	.+8      	; 0x26e4 <strrev+0x18>
    26dc:	7c 91       	ld	r23, X
    26de:	6d 93       	st	X+, r22
    26e0:	70 83       	st	Z, r23
    26e2:	62 91       	ld	r22, -Z
    26e4:	ae 17       	cp	r26, r30
    26e6:	bf 07       	cpc	r27, r31
    26e8:	c8 f3       	brcs	.-14     	; 0x26dc <strrev+0x10>
    26ea:	08 95       	ret
    26ec:	68 d0       	rcall	.+208    	; 0x27be <__fp_pscA>
    26ee:	30 f0       	brcs	.+12     	; 0x26fc <strrev+0x30>
    26f0:	6d d0       	rcall	.+218    	; 0x27cc <__fp_pscB>
    26f2:	20 f0       	brcs	.+8      	; 0x26fc <strrev+0x30>
    26f4:	31 f4       	brne	.+12     	; 0x2702 <strrev+0x36>
    26f6:	9f 3f       	cpi	r25, 0xFF	; 255
    26f8:	11 f4       	brne	.+4      	; 0x26fe <strrev+0x32>
    26fa:	1e f4       	brtc	.+6      	; 0x2702 <strrev+0x36>
    26fc:	5d c0       	rjmp	.+186    	; 0x27b8 <__fp_nan>
    26fe:	0e f4       	brtc	.+2      	; 0x2702 <strrev+0x36>
    2700:	e0 95       	com	r30
    2702:	e7 fb       	bst	r30, 7
    2704:	53 c0       	rjmp	.+166    	; 0x27ac <__fp_inf>

00002706 <__addsf3x>:
    2706:	e9 2f       	mov	r30, r25
    2708:	68 d0       	rcall	.+208    	; 0x27da <__fp_split3>
    270a:	80 f3       	brcs	.-32     	; 0x26ec <strrev+0x20>
    270c:	ba 17       	cp	r27, r26
    270e:	62 07       	cpc	r22, r18
    2710:	73 07       	cpc	r23, r19
    2712:	84 07       	cpc	r24, r20
    2714:	95 07       	cpc	r25, r21
    2716:	18 f0       	brcs	.+6      	; 0x271e <__addsf3x+0x18>
    2718:	71 f4       	brne	.+28     	; 0x2736 <__addsf3x+0x30>
    271a:	9e f5       	brtc	.+102    	; 0x2782 <__addsf3x+0x7c>
    271c:	80 c0       	rjmp	.+256    	; 0x281e <__fp_zero>
    271e:	0e f4       	brtc	.+2      	; 0x2722 <__addsf3x+0x1c>
    2720:	e0 95       	com	r30
    2722:	0b 2e       	mov	r0, r27
    2724:	ba 2f       	mov	r27, r26
    2726:	a0 2d       	mov	r26, r0
    2728:	0b 01       	movw	r0, r22
    272a:	b9 01       	movw	r22, r18
    272c:	90 01       	movw	r18, r0
    272e:	0c 01       	movw	r0, r24
    2730:	ca 01       	movw	r24, r20
    2732:	a0 01       	movw	r20, r0
    2734:	11 24       	eor	r1, r1
    2736:	ff 27       	eor	r31, r31
    2738:	59 1b       	sub	r21, r25
    273a:	99 f0       	breq	.+38     	; 0x2762 <__addsf3x+0x5c>
    273c:	59 3f       	cpi	r21, 0xF9	; 249
    273e:	50 f4       	brcc	.+20     	; 0x2754 <__addsf3x+0x4e>
    2740:	50 3e       	cpi	r21, 0xE0	; 224
    2742:	68 f1       	brcs	.+90     	; 0x279e <__addsf3x+0x98>
    2744:	1a 16       	cp	r1, r26
    2746:	f0 40       	sbci	r31, 0x00	; 0
    2748:	a2 2f       	mov	r26, r18
    274a:	23 2f       	mov	r18, r19
    274c:	34 2f       	mov	r19, r20
    274e:	44 27       	eor	r20, r20
    2750:	58 5f       	subi	r21, 0xF8	; 248
    2752:	f3 cf       	rjmp	.-26     	; 0x273a <__addsf3x+0x34>
    2754:	46 95       	lsr	r20
    2756:	37 95       	ror	r19
    2758:	27 95       	ror	r18
    275a:	a7 95       	ror	r26
    275c:	f0 40       	sbci	r31, 0x00	; 0
    275e:	53 95       	inc	r21
    2760:	c9 f7       	brne	.-14     	; 0x2754 <__addsf3x+0x4e>
    2762:	7e f4       	brtc	.+30     	; 0x2782 <__addsf3x+0x7c>
    2764:	1f 16       	cp	r1, r31
    2766:	ba 0b       	sbc	r27, r26
    2768:	62 0b       	sbc	r22, r18
    276a:	73 0b       	sbc	r23, r19
    276c:	84 0b       	sbc	r24, r20
    276e:	ba f0       	brmi	.+46     	; 0x279e <__addsf3x+0x98>
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	a1 f0       	breq	.+40     	; 0x279c <__addsf3x+0x96>
    2774:	ff 0f       	add	r31, r31
    2776:	bb 1f       	adc	r27, r27
    2778:	66 1f       	adc	r22, r22
    277a:	77 1f       	adc	r23, r23
    277c:	88 1f       	adc	r24, r24
    277e:	c2 f7       	brpl	.-16     	; 0x2770 <__addsf3x+0x6a>
    2780:	0e c0       	rjmp	.+28     	; 0x279e <__addsf3x+0x98>
    2782:	ba 0f       	add	r27, r26
    2784:	62 1f       	adc	r22, r18
    2786:	73 1f       	adc	r23, r19
    2788:	84 1f       	adc	r24, r20
    278a:	48 f4       	brcc	.+18     	; 0x279e <__addsf3x+0x98>
    278c:	87 95       	ror	r24
    278e:	77 95       	ror	r23
    2790:	67 95       	ror	r22
    2792:	b7 95       	ror	r27
    2794:	f7 95       	ror	r31
    2796:	9e 3f       	cpi	r25, 0xFE	; 254
    2798:	08 f0       	brcs	.+2      	; 0x279c <__addsf3x+0x96>
    279a:	b3 cf       	rjmp	.-154    	; 0x2702 <strrev+0x36>
    279c:	93 95       	inc	r25
    279e:	88 0f       	add	r24, r24
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <__addsf3x+0x9e>
    27a2:	99 27       	eor	r25, r25
    27a4:	ee 0f       	add	r30, r30
    27a6:	97 95       	ror	r25
    27a8:	87 95       	ror	r24
    27aa:	08 95       	ret

000027ac <__fp_inf>:
    27ac:	97 f9       	bld	r25, 7
    27ae:	9f 67       	ori	r25, 0x7F	; 127
    27b0:	80 e8       	ldi	r24, 0x80	; 128
    27b2:	70 e0       	ldi	r23, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	08 95       	ret

000027b8 <__fp_nan>:
    27b8:	9f ef       	ldi	r25, 0xFF	; 255
    27ba:	80 ec       	ldi	r24, 0xC0	; 192
    27bc:	08 95       	ret

000027be <__fp_pscA>:
    27be:	00 24       	eor	r0, r0
    27c0:	0a 94       	dec	r0
    27c2:	16 16       	cp	r1, r22
    27c4:	17 06       	cpc	r1, r23
    27c6:	18 06       	cpc	r1, r24
    27c8:	09 06       	cpc	r0, r25
    27ca:	08 95       	ret

000027cc <__fp_pscB>:
    27cc:	00 24       	eor	r0, r0
    27ce:	0a 94       	dec	r0
    27d0:	12 16       	cp	r1, r18
    27d2:	13 06       	cpc	r1, r19
    27d4:	14 06       	cpc	r1, r20
    27d6:	05 06       	cpc	r0, r21
    27d8:	08 95       	ret

000027da <__fp_split3>:
    27da:	57 fd       	sbrc	r21, 7
    27dc:	90 58       	subi	r25, 0x80	; 128
    27de:	44 0f       	add	r20, r20
    27e0:	55 1f       	adc	r21, r21
    27e2:	59 f0       	breq	.+22     	; 0x27fa <__fp_splitA+0x10>
    27e4:	5f 3f       	cpi	r21, 0xFF	; 255
    27e6:	71 f0       	breq	.+28     	; 0x2804 <__fp_splitA+0x1a>
    27e8:	47 95       	ror	r20

000027ea <__fp_splitA>:
    27ea:	88 0f       	add	r24, r24
    27ec:	97 fb       	bst	r25, 7
    27ee:	99 1f       	adc	r25, r25
    27f0:	61 f0       	breq	.+24     	; 0x280a <__fp_splitA+0x20>
    27f2:	9f 3f       	cpi	r25, 0xFF	; 255
    27f4:	79 f0       	breq	.+30     	; 0x2814 <__fp_splitA+0x2a>
    27f6:	87 95       	ror	r24
    27f8:	08 95       	ret
    27fa:	12 16       	cp	r1, r18
    27fc:	13 06       	cpc	r1, r19
    27fe:	14 06       	cpc	r1, r20
    2800:	55 1f       	adc	r21, r21
    2802:	f2 cf       	rjmp	.-28     	; 0x27e8 <__fp_split3+0xe>
    2804:	46 95       	lsr	r20
    2806:	f1 df       	rcall	.-30     	; 0x27ea <__fp_splitA>
    2808:	08 c0       	rjmp	.+16     	; 0x281a <__fp_splitA+0x30>
    280a:	16 16       	cp	r1, r22
    280c:	17 06       	cpc	r1, r23
    280e:	18 06       	cpc	r1, r24
    2810:	99 1f       	adc	r25, r25
    2812:	f1 cf       	rjmp	.-30     	; 0x27f6 <__fp_splitA+0xc>
    2814:	86 95       	lsr	r24
    2816:	71 05       	cpc	r23, r1
    2818:	61 05       	cpc	r22, r1
    281a:	08 94       	sec
    281c:	08 95       	ret

0000281e <__fp_zero>:
    281e:	e8 94       	clt

00002820 <__fp_szero>:
    2820:	bb 27       	eor	r27, r27
    2822:	66 27       	eor	r22, r22
    2824:	77 27       	eor	r23, r23
    2826:	cb 01       	movw	r24, r22
    2828:	97 f9       	bld	r25, 7
    282a:	08 95       	ret

0000282c <__mulsf3>:
    282c:	f5 de       	rcall	.-534    	; 0x2618 <__mulsf3x>
    282e:	d2 ce       	rjmp	.-604    	; 0x25d4 <__fp_round>

00002830 <__udivmodhi4>:
    2830:	aa 1b       	sub	r26, r26
    2832:	bb 1b       	sub	r27, r27
    2834:	51 e1       	ldi	r21, 0x11	; 17
    2836:	07 c0       	rjmp	.+14     	; 0x2846 <__udivmodhi4_ep>

00002838 <__udivmodhi4_loop>:
    2838:	aa 1f       	adc	r26, r26
    283a:	bb 1f       	adc	r27, r27
    283c:	a6 17       	cp	r26, r22
    283e:	b7 07       	cpc	r27, r23
    2840:	10 f0       	brcs	.+4      	; 0x2846 <__udivmodhi4_ep>
    2842:	a6 1b       	sub	r26, r22
    2844:	b7 0b       	sbc	r27, r23

00002846 <__udivmodhi4_ep>:
    2846:	88 1f       	adc	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	5a 95       	dec	r21
    284c:	a9 f7       	brne	.-22     	; 0x2838 <__udivmodhi4_loop>
    284e:	80 95       	com	r24
    2850:	90 95       	com	r25
    2852:	bc 01       	movw	r22, r24
    2854:	cd 01       	movw	r24, r26
    2856:	08 95       	ret

00002858 <__udivmodsi4>:
    2858:	a1 e2       	ldi	r26, 0x21	; 33
    285a:	1a 2e       	mov	r1, r26
    285c:	aa 1b       	sub	r26, r26
    285e:	bb 1b       	sub	r27, r27
    2860:	fd 01       	movw	r30, r26
    2862:	0d c0       	rjmp	.+26     	; 0x287e <__udivmodsi4_ep>

00002864 <__udivmodsi4_loop>:
    2864:	aa 1f       	adc	r26, r26
    2866:	bb 1f       	adc	r27, r27
    2868:	ee 1f       	adc	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	a2 17       	cp	r26, r18
    286e:	b3 07       	cpc	r27, r19
    2870:	e4 07       	cpc	r30, r20
    2872:	f5 07       	cpc	r31, r21
    2874:	20 f0       	brcs	.+8      	; 0x287e <__udivmodsi4_ep>
    2876:	a2 1b       	sub	r26, r18
    2878:	b3 0b       	sbc	r27, r19
    287a:	e4 0b       	sbc	r30, r20
    287c:	f5 0b       	sbc	r31, r21

0000287e <__udivmodsi4_ep>:
    287e:	66 1f       	adc	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	88 1f       	adc	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	1a 94       	dec	r1
    2888:	69 f7       	brne	.-38     	; 0x2864 <__udivmodsi4_loop>
    288a:	60 95       	com	r22
    288c:	70 95       	com	r23
    288e:	80 95       	com	r24
    2890:	90 95       	com	r25
    2892:	9b 01       	movw	r18, r22
    2894:	ac 01       	movw	r20, r24
    2896:	bd 01       	movw	r22, r26
    2898:	cf 01       	movw	r24, r30
    289a:	08 95       	ret

0000289c <_exit>:
    289c:	f8 94       	cli

0000289e <__stop_program>:
    289e:	ff cf       	rjmp	.-2      	; 0x289e <__stop_program>
