
Robockey.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00003b68  00003bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800134  00800134  00003c30  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000064f  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002150  00000000  00000000  0000437f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000889  00000000  00000000  000064cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001eb8  00000000  00000000  00006d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00008c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c7  00000000  00000000  00008fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ce1  00000000  00000000  000097a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__ctors_end>
       4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
       c:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_3>
      10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      28:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_10>
      2c:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_11>
      30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      54:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      58:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      5c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      60:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      64:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      68:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      6c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      70:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      74:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      78:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      7c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      80:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      84:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      88:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      8c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      90:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      94:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      98:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      9c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a0:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a4:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      a8:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
      ac:	11 09       	sbc	r17, r1
      ae:	0e 09       	sbc	r16, r14
      b0:	0b 09       	sbc	r16, r11
      b2:	08 09       	sbc	r16, r8
      b4:	05 09       	sbc	r16, r5
      b6:	02 09       	sbc	r16, r2
      b8:	ff 08       	sbc	r15, r15
      ba:	fc 08       	sbc	r15, r12
      bc:	f9 08       	sbc	r15, r9
      be:	f6 08       	sbc	r15, r6
      c0:	f3 08       	sbc	r15, r3
      c2:	f0 08       	sbc	r15, r0
      c4:	ed 08       	sbc	r14, r13
      c6:	ea 08       	sbc	r14, r10
      c8:	e7 08       	sbc	r14, r7
      ca:	e4 08       	sbc	r14, r4
      cc:	e1 08       	sbc	r14, r1
      ce:	de 08       	sbc	r13, r14
      d0:	db 08       	sbc	r13, r11
      d2:	d8 08       	sbc	r13, r8
      d4:	d5 08       	sbc	r13, r5
      d6:	d2 08       	sbc	r13, r2
      d8:	cf 08       	sbc	r12, r15
      da:	cc 08       	sbc	r12, r12
      dc:	c9 08       	sbc	r12, r9
      de:	c6 08       	sbc	r12, r6
      e0:	c3 08       	sbc	r12, r3
      e2:	c0 08       	sbc	r12, r0
      e4:	bd 08       	sbc	r11, r13
      e6:	ba 08       	sbc	r11, r10
      e8:	b7 08       	sbc	r11, r7
      ea:	b4 08       	sbc	r11, r4
      ec:	b1 08       	sbc	r11, r1
      ee:	ae 08       	sbc	r10, r14
      f0:	ab 08       	sbc	r10, r11
      f2:	a8 08       	sbc	r10, r8
      f4:	a5 08       	sbc	r10, r5
      f6:	a2 08       	sbc	r10, r2
      f8:	9f 08       	sbc	r9, r15
      fa:	9c 08       	sbc	r9, r12
      fc:	99 08       	sbc	r9, r9
      fe:	96 08       	sbc	r9, r6
     100:	93 08       	sbc	r9, r3
     102:	90 08       	sbc	r9, r0
     104:	8d 08       	sbc	r8, r13
     106:	8a 08       	sbc	r8, r10
     108:	87 08       	sbc	r8, r7
     10a:	84 08       	sbc	r8, r4
     10c:	81 08       	sbc	r8, r1
     10e:	7e 08       	sbc	r7, r14
     110:	7b 08       	sbc	r7, r11
     112:	78 08       	sbc	r7, r8
     114:	75 08       	sbc	r7, r5
     116:	72 08       	sbc	r7, r2
     118:	6f 08       	sbc	r6, r15
     11a:	6c 08       	sbc	r6, r12
     11c:	69 08       	sbc	r6, r9
     11e:	66 08       	sbc	r6, r6
     120:	63 08       	sbc	r6, r3
     122:	60 08       	sbc	r6, r0
     124:	5d 08       	sbc	r5, r13
     126:	5a 08       	sbc	r5, r10
     128:	57 08       	sbc	r5, r7
     12a:	54 08       	sbc	r5, r4
     12c:	51 08       	sbc	r5, r1
     12e:	08 4a       	sbci	r16, 0xA8	; 168
     130:	d7 3b       	cpi	r29, 0xB7	; 183
     132:	3b ce       	rjmp	.-906    	; 0xfffffdaa <__eeprom_end+0xff7efdaa>
     134:	01 6e       	ori	r16, 0xE1	; 225
     136:	84 bc       	out	0x24, r8	; 36
     138:	bf fd       	.word	0xfdbf	; ????
     13a:	c1 2f       	mov	r28, r17
     13c:	3d 6c       	ori	r19, 0xCD	; 205
     13e:	74 31       	cpi	r23, 0x14	; 20
     140:	9a bd       	out	0x2a, r25	; 42
     142:	56 83       	std	Z+6, r21	; 0x06
     144:	3d da       	rcall	.-2950   	; 0xfffff5c0 <__eeprom_end+0xff7ef5c0>
     146:	3d 00       	.word	0x003d	; ????
     148:	c7 7f       	andi	r28, 0xF7	; 247
     14a:	11 be       	out	0x31, r1	; 49
     14c:	d9 e4       	ldi	r29, 0x49	; 73
     14e:	bb 4c       	sbci	r27, 0xCB	; 203
     150:	3e 91       	ld	r19, -X
     152:	6b aa       	std	Y+51, r6	; 0x33
     154:	aa be       	out	0x3a, r10	; 58
     156:	00 00       	nop
     158:	00 80       	ld	r0, Z
     15a:	3f 05       	cpc	r19, r15
     15c:	a8 4c       	sbci	r26, 0xC8	; 200
     15e:	cd b2       	in	r12, 0x1d	; 29
     160:	d4 4e       	sbci	r29, 0xE4	; 228
     162:	b9 38       	cpi	r27, 0x89	; 137
     164:	36 a9       	ldd	r19, Z+54	; 0x36
     166:	02 0c       	add	r0, r2
     168:	50 b9       	out	0x00, r21	; 0
     16a:	91 86       	std	Z+9, r9	; 0x09
     16c:	88 08       	sbc	r8, r8
     16e:	3c a6       	std	Y+44, r3	; 0x2c
     170:	aa aa       	std	Y+50, r10	; 0x32
     172:	2a be       	out	0x3a, r2	; 58
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 00       	.word	0x003f	; ????

00000179 <descriptor_list>:
     179:	00 01 00 00 ad 01 12 00 02 00 00 bf 01 43 00 03     .............C..
     189:	00 00 02 02 04 01 03 09 04 06 02 12 02 03 09 04     ................
     199:	1a 02 06 03 03 09 04 22 02 08                       ......."..

000001a3 <endpoint_config_table>:
     1a3:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001ad <device_descriptor>:
     1ad:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1bd:	03 01                                               ..

000001bf <config1_descriptor>:
     1bf:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1cf:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1df:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1ef:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1ff:	40 00 00                                            @..

00000202 <string0>:
     202:	04 03 09 04                                         ....

00000206 <string1>:
     206:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     216:	65 00 00 00                                         e...

0000021a <string2>:
     21a:	06 03 4d 00 32 00 00 00                             ..M.2...

00000222 <string3>:
     222:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e8 e6       	ldi	r30, 0x68	; 104
     240:	fb e3       	ldi	r31, 0x3B	; 59
     242:	02 c0       	rjmp	.+4      	; 0x248 <.do_copy_data_start>

00000244 <.do_copy_data_loop>:
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0

00000248 <.do_copy_data_start>:
     248:	a4 33       	cpi	r26, 0x34	; 52
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <.do_copy_data_loop>

0000024e <__do_clear_bss>:
     24e:	11 e0       	ldi	r17, 0x01	; 1
     250:	a4 e3       	ldi	r26, 0x34	; 52
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a0 39       	cpi	r26, 0x90	; 144
     25a:	b1 07       	cpc	r27, r17
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	0e 94 35 01 	call	0x26a	; 0x26a <main>
     262:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <_exit>

00000266 <__bad_interrupt>:
     266:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000026a <main>:
int drive_complete = 0;
int drive = 0;


int main(void)
{
     26a:	2f 92       	push	r2
     26c:	3f 92       	push	r3
     26e:	4f 92       	push	r4
     270:	5f 92       	push	r5
     272:	6f 92       	push	r6
     274:	7f 92       	push	r7
     276:	8f 92       	push	r8
     278:	9f 92       	push	r9
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	60 97       	sbiw	r28, 0x10	; 16
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61

	init_all();
     29e:	0e 94 bc 03 	call	0x778	; 0x778 <init_all>
	wait(2);
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 65 03 	call	0x6ca	; 0x6ca <wait>
	m_red(ON);
     2aa:	6e 9a       	sbi	0x0d, 6	; 13
     2ac:	76 98       	cbi	0x0e, 6	; 14
	m_green(ON);
     2ae:	6a 9a       	sbi	0x0d, 2	; 13
     2b0:	72 98       	cbi	0x0e, 2	; 14
	wait(2);
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 65 03 	call	0x6ca	; 0x6ca <wait>
	static unsigned int blobs[12];
	static char blob_status;
	
	m_red(OFF);
     2ba:	6e 9a       	sbi	0x0d, 6	; 13
     2bc:	76 9a       	sbi	0x0e, 6	; 14
	m_green(OFF);
     2be:	6a 9a       	sbi	0x0d, 2	; 13
     2c0:	72 9a       	sbi	0x0e, 2	; 14
	wait(2);
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 65 03 	call	0x6ca	; 0x6ca <wait>

	int x_off = 0;
	int y_off = 0;
	int off_err = 10;

	blob_status = m_wii_read(blobs);
     2ca:	8b e5       	ldi	r24, 0x5B	; 91
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <m_wii_read>
     2d2:	80 93 5a 01 	sts	0x015A, r24
	if(blob_status){
     2d6:	88 23       	and	r24, r24
     2d8:	29 f4       	brne	.+10     	; 0x2e4 <main+0x7a>
     2da:	ee 24       	eor	r14, r14
     2dc:	ff 24       	eor	r15, r15
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	9e c1       	rjmp	.+828    	; 0x620 <main+0x3b6>
     2e4:	eb e5       	ldi	r30, 0x5B	; 91
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	60 e0       	ldi	r22, 0x00	; 0
     2ee:	70 e0       	ldi	r23, 0x00	; 0

		average_cnt=0;
		for(int i=0;i<11;i+=3){
			if(blobs[i]<1023){
     2f0:	20 81       	ld	r18, Z
     2f2:	31 81       	ldd	r19, Z+1	; 0x01
     2f4:	43 e0       	ldi	r20, 0x03	; 3
     2f6:	2f 3f       	cpi	r18, 0xFF	; 255
     2f8:	34 07       	cpc	r19, r20
     2fa:	20 f4       	brcc	.+8      	; 0x304 <main+0x9a>
				average_cnt++; 
     2fc:	6f 5f       	subi	r22, 0xFF	; 255
     2fe:	7f 4f       	sbci	r23, 0xFF	; 255
	        	x_off += blobs[i];;
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	36 96       	adiw	r30, 0x06	; 6

	blob_status = m_wii_read(blobs);
	if(blob_status){

		average_cnt=0;
		for(int i=0;i<11;i+=3){
     306:	51 e0       	ldi	r21, 0x01	; 1
     308:	e3 37       	cpi	r30, 0x73	; 115
     30a:	f5 07       	cpc	r31, r21
     30c:	89 f7       	brne	.-30     	; 0x2f0 <main+0x86>
				average_cnt++; 
	        	x_off += blobs[i];;
			}
		}
		x_off = x_off / average_cnt;
		average_cnt = 0;
     30e:	10 92 51 01 	sts	0x0151, r1
     312:	10 92 50 01 	sts	0x0150, r1
     316:	76 97       	sbiw	r30, 0x16	; 22
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	cc 24       	eor	r12, r12
     31e:	dd 24       	eor	r13, r13

		for(int i=1;i<11;i+=3){
			if(blobs[i]<1023){
     320:	20 81       	ld	r18, Z
     322:	31 81       	ldd	r19, Z+1	; 0x01
     324:	a3 e0       	ldi	r26, 0x03	; 3
     326:	2f 3f       	cpi	r18, 0xFF	; 255
     328:	3a 07       	cpc	r19, r26
     32a:	28 f4       	brcc	.+10     	; 0x336 <main+0xcc>
				average_cnt++; 
     32c:	08 94       	sec
     32e:	c1 1c       	adc	r12, r1
     330:	d1 1c       	adc	r13, r1
	        	y_off += blobs[i];;
     332:	02 0f       	add	r16, r18
     334:	13 1f       	adc	r17, r19
     336:	36 96       	adiw	r30, 0x06	; 6
			}
		}
		x_off = x_off / average_cnt;
		average_cnt = 0;

		for(int i=1;i<11;i+=3){
     338:	b1 e0       	ldi	r27, 0x01	; 1
     33a:	e5 37       	cpi	r30, 0x75	; 117
     33c:	fb 07       	cpc	r31, r27
     33e:	81 f7       	brne	.-32     	; 0x320 <main+0xb6>
     340:	c0 92 50 01 	sts	0x0150, r12
     344:	d0 92 51 01 	sts	0x0151, r13
			if(blobs[i]<1023){
				average_cnt++; 
	        	x_off += blobs[i];;
			}
		}
		x_off = x_off / average_cnt;
     348:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__divmodhi4>
     34c:	7b 01       	movw	r14, r22
				average_cnt++; 
	        	y_off += blobs[i];;
			}
		}
		
		y_off = y_off / average_cnt;
     34e:	c8 01       	movw	r24, r16
     350:	b6 01       	movw	r22, r12
     352:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__divmodhi4>
     356:	cb 01       	movw	r24, r22
     358:	63 c1       	rjmp	.+710    	; 0x620 <main+0x3b6>


	while(!rotate_complete)
	{
		
		blob_status = m_wii_read(blobs);
     35a:	8b e5       	ldi	r24, 0x5B	; 91
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <m_wii_read>
     362:	80 93 5a 01 	sts	0x015A, r24
		if(blob_status){
     366:	88 23       	and	r24, r24
     368:	09 f4       	brne	.+2      	; 0x36c <main+0x102>
     36a:	90 c0       	rjmp	.+288    	; 0x48c <main+0x222>
     36c:	8b e5       	ldi	r24, 0x5B	; 91
     36e:	c8 2e       	mov	r12, r24
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	d8 2e       	mov	r13, r24
     374:	0f 2e       	mov	r0, r31
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	ef 2e       	mov	r14, r31
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	ff 2e       	mov	r15, r31
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	0f 2f       	mov	r16, r31
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	1f 2f       	mov	r17, r31
     386:	f0 2d       	mov	r31, r0
     388:	aa 24       	eor	r10, r10
     38a:	bb 24       	eor	r11, r11

			average_cnt=0;
			average_X=0;
			average_Y=0;
			for(int i=0;i<11;i+=3){
				if(blobs[i]<1023){
     38c:	f6 01       	movw	r30, r12
     38e:	60 81       	ld	r22, Z
     390:	71 81       	ldd	r23, Z+1	; 0x01
     392:	f3 e0       	ldi	r31, 0x03	; 3
     394:	6f 3f       	cpi	r22, 0xFF	; 255
     396:	7f 07       	cpc	r23, r31
     398:	78 f4       	brcc	.+30     	; 0x3b8 <main+0x14e>
					average_cnt++; 
     39a:	08 94       	sec
     39c:	a1 1c       	adc	r10, r1
     39e:	b1 1c       	adc	r11, r1
		        	average_X += blobs[i];;
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatunsisf>
     3a8:	9b 01       	movw	r18, r22
     3aa:	ac 01       	movw	r20, r24
     3ac:	c8 01       	movw	r24, r16
     3ae:	b7 01       	movw	r22, r14
     3b0:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
     3b4:	7b 01       	movw	r14, r22
     3b6:	8c 01       	movw	r16, r24
     3b8:	26 e0       	ldi	r18, 0x06	; 6
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	c2 0e       	add	r12, r18
     3be:	d3 1e       	adc	r13, r19
		if(blob_status){

			average_cnt=0;
			average_X=0;
			average_Y=0;
			for(int i=0;i<11;i+=3){
     3c0:	33 e7       	ldi	r19, 0x73	; 115
     3c2:	c3 16       	cp	r12, r19
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	d3 06       	cpc	r13, r19
     3c8:	09 f7       	brne	.-62     	; 0x38c <main+0x122>
				if(blobs[i]<1023){
					average_cnt++; 
		        	average_X += blobs[i];;
				}
			}
			average_X = average_X / average_cnt;
     3ca:	b5 01       	movw	r22, r10
     3cc:	88 27       	eor	r24, r24
     3ce:	77 fd       	sbrc	r23, 7
     3d0:	80 95       	com	r24
     3d2:	98 2f       	mov	r25, r24
     3d4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     3d8:	9b 01       	movw	r18, r22
     3da:	ac 01       	movw	r20, r24
     3dc:	c8 01       	movw	r24, r16
     3de:	b7 01       	movw	r22, r14
     3e0:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     3e4:	60 93 34 01 	sts	0x0134, r22
     3e8:	70 93 35 01 	sts	0x0135, r23
     3ec:	80 93 36 01 	sts	0x0136, r24
     3f0:	90 93 37 01 	sts	0x0137, r25
			average_cnt = 0;
     3f4:	10 92 51 01 	sts	0x0151, r1
     3f8:	10 92 50 01 	sts	0x0150, r1
     3fc:	4a ee       	ldi	r20, 0xEA	; 234
     3fe:	5f ef       	ldi	r21, 0xFF	; 255
     400:	c4 0e       	add	r12, r20
     402:	d5 1e       	adc	r13, r21
     404:	0f 2e       	mov	r0, r31
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ef 2e       	mov	r14, r31
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ff 2e       	mov	r15, r31
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	0f 2f       	mov	r16, r31
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	1f 2f       	mov	r17, r31
     416:	f0 2d       	mov	r31, r0
     418:	aa 24       	eor	r10, r10
     41a:	bb 24       	eor	r11, r11

			for(int i=1;i<11;i+=3){
				if(blobs[i]<1023){
     41c:	d6 01       	movw	r26, r12
     41e:	6d 91       	ld	r22, X+
     420:	7c 91       	ld	r23, X
     422:	b3 e0       	ldi	r27, 0x03	; 3
     424:	6f 3f       	cpi	r22, 0xFF	; 255
     426:	7b 07       	cpc	r23, r27
     428:	78 f4       	brcc	.+30     	; 0x448 <main+0x1de>
					average_cnt++; 
     42a:	08 94       	sec
     42c:	a1 1c       	adc	r10, r1
     42e:	b1 1c       	adc	r11, r1
		        	average_Y += blobs[i];;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <__floatunsisf>
     438:	9b 01       	movw	r18, r22
     43a:	ac 01       	movw	r20, r24
     43c:	c8 01       	movw	r24, r16
     43e:	b7 01       	movw	r22, r14
     440:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
     444:	7b 01       	movw	r14, r22
     446:	8c 01       	movw	r16, r24
     448:	e6 e0       	ldi	r30, 0x06	; 6
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	ce 0e       	add	r12, r30
     44e:	df 1e       	adc	r13, r31
				}
			}
			average_X = average_X / average_cnt;
			average_cnt = 0;

			for(int i=1;i<11;i+=3){
     450:	f5 e7       	ldi	r31, 0x75	; 117
     452:	cf 16       	cp	r12, r31
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	df 06       	cpc	r13, r31
     458:	09 f7       	brne	.-62     	; 0x41c <main+0x1b2>
     45a:	a0 92 50 01 	sts	0x0150, r10
     45e:	b0 92 51 01 	sts	0x0151, r11
					average_cnt++; 
		        	average_Y += blobs[i];;
				}
			}
			
			average_Y = average_Y / average_cnt;
     462:	b5 01       	movw	r22, r10
     464:	88 27       	eor	r24, r24
     466:	77 fd       	sbrc	r23, 7
     468:	80 95       	com	r24
     46a:	98 2f       	mov	r25, r24
     46c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     470:	9b 01       	movw	r18, r22
     472:	ac 01       	movw	r20, r24
     474:	c8 01       	movw	r24, r16
     476:	b7 01       	movw	r22, r14
     478:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
     47c:	60 93 38 01 	sts	0x0138, r22
     480:	70 93 39 01 	sts	0x0139, r23
     484:	80 93 3a 01 	sts	0x013A, r24
     488:	90 93 3b 01 	sts	0x013B, r25
		}




		if(average_Y > y_off-off_err && average_Y < y_off+off_err){
     48c:	a0 90 38 01 	lds	r10, 0x0138
     490:	b0 90 39 01 	lds	r11, 0x0139
     494:	c0 90 3a 01 	lds	r12, 0x013A
     498:	d0 90 3b 01 	lds	r13, 0x013B
     49c:	69 81       	ldd	r22, Y+1	; 0x01
     49e:	7a 81       	ldd	r23, Y+2	; 0x02
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     4a8:	3b 01       	movw	r6, r22
     4aa:	4c 01       	movw	r8, r24
     4ac:	c6 01       	movw	r24, r12
     4ae:	b5 01       	movw	r22, r10
     4b0:	a4 01       	movw	r20, r8
     4b2:	93 01       	movw	r18, r6
     4b4:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__gesf2>
     4b8:	18 16       	cp	r1, r24
     4ba:	0c f0       	brlt	.+2      	; 0x4be <main+0x254>
     4bc:	53 c0       	rjmp	.+166    	; 0x564 <main+0x2fa>
     4be:	c2 01       	movw	r24, r4
     4c0:	b1 01       	movw	r22, r2
     4c2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     4c6:	9b 01       	movw	r18, r22
     4c8:	ac 01       	movw	r20, r24
     4ca:	c6 01       	movw	r24, r12
     4cc:	b5 01       	movw	r22, r10
     4ce:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
     4d2:	88 23       	and	r24, r24
     4d4:	0c f0       	brlt	.+2      	; 0x4d8 <main+0x26e>
     4d6:	46 c0       	rjmp	.+140    	; 0x564 <main+0x2fa>
			if(average_X > x_off+off_err || average_X < x_off-off_err)
     4d8:	e0 90 34 01 	lds	r14, 0x0134
     4dc:	f0 90 35 01 	lds	r15, 0x0135
     4e0:	00 91 36 01 	lds	r16, 0x0136
     4e4:	10 91 37 01 	lds	r17, 0x0137
     4e8:	6d 81       	ldd	r22, Y+5	; 0x05
     4ea:	7e 81       	ldd	r23, Y+6	; 0x06
     4ec:	8f 81       	ldd	r24, Y+7	; 0x07
     4ee:	98 85       	ldd	r25, Y+8	; 0x08
     4f0:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     4f4:	9b 01       	movw	r18, r22
     4f6:	ac 01       	movw	r20, r24
     4f8:	c8 01       	movw	r24, r16
     4fa:	b7 01       	movw	r22, r14
     4fc:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__gesf2>
     500:	18 16       	cp	r1, r24
     502:	74 f0       	brlt	.+28     	; 0x520 <main+0x2b6>
     504:	6d 85       	ldd	r22, Y+13	; 0x0d
     506:	7e 85       	ldd	r23, Y+14	; 0x0e
     508:	8f 85       	ldd	r24, Y+15	; 0x0f
     50a:	98 89       	ldd	r25, Y+16	; 0x10
     50c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	c8 01       	movw	r24, r16
     516:	b7 01       	movw	r22, r14
     518:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
     51c:	88 23       	and	r24, r24
     51e:	e4 f4       	brge	.+56     	; 0x558 <main+0x2ee>
			{
				if(average_X < x_off)
     520:	69 85       	ldd	r22, Y+9	; 0x09
     522:	7a 85       	ldd	r23, Y+10	; 0x0a
     524:	8b 85       	ldd	r24, Y+11	; 0x0b
     526:	9c 85       	ldd	r25, Y+12	; 0x0c
     528:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     52c:	9b 01       	movw	r18, r22
     52e:	ac 01       	movw	r20, r24
     530:	c8 01       	movw	r24, r16
     532:	b7 01       	movw	r22, r14
     534:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
     538:	88 23       	and	r24, r24
     53a:	3c f4       	brge	.+14     	; 0x54a <main+0x2e0>
				{
					rotate = 1;
     53c:	21 e0       	ldi	r18, 0x01	; 1
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	30 93 55 01 	sts	0x0155, r19
     544:	20 93 54 01 	sts	0x0154, r18
     548:	0d c0       	rjmp	.+26     	; 0x564 <main+0x2fa>
				}
				else
				{
					rotate = 2;
     54a:	42 e0       	ldi	r20, 0x02	; 2
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	50 93 55 01 	sts	0x0155, r21
     552:	40 93 54 01 	sts	0x0154, r20
     556:	06 c0       	rjmp	.+12     	; 0x564 <main+0x2fa>
				}
			}
			else
			{
				rotate = 4;
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	90 93 55 01 	sts	0x0155, r25
     560:	80 93 54 01 	sts	0x0154, r24
			}
		}
		if(average_Y <= y_off-off_err){rotate = 2;}
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
     570:	18 16       	cp	r1, r24
     572:	34 f0       	brlt	.+12     	; 0x580 <main+0x316>
     574:	a2 e0       	ldi	r26, 0x02	; 2
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	b0 93 55 01 	sts	0x0155, r27
     57c:	a0 93 54 01 	sts	0x0154, r26
		if(average_Y >= y_off+off_err){rotate = 3;}
     580:	c2 01       	movw	r24, r4
     582:	b1 01       	movw	r22, r2
     584:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__gesf2>
     594:	88 23       	and	r24, r24
     596:	34 f0       	brlt	.+12     	; 0x5a4 <main+0x33a>
     598:	e3 e0       	ldi	r30, 0x03	; 3
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	f0 93 55 01 	sts	0x0155, r31
     5a0:	e0 93 54 01 	sts	0x0154, r30
		rotate = 4;
		rotate = 3;
		if(average_Y > 359 && average_Y < 409 && average_X >610 && average_X < 690)
			rotate = 1;
*/
		switch(rotate){
     5a4:	80 91 54 01 	lds	r24, 0x0154
     5a8:	90 91 55 01 	lds	r25, 0x0155
     5ac:	82 30       	cpi	r24, 0x02	; 2
     5ae:	91 05       	cpc	r25, r1
     5b0:	91 f0       	breq	.+36     	; 0x5d6 <main+0x36c>
     5b2:	83 30       	cpi	r24, 0x03	; 3
     5b4:	91 05       	cpc	r25, r1
     5b6:	e1 f0       	breq	.+56     	; 0x5f0 <main+0x386>
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	29 f5       	brne	.+74     	; 0x606 <main+0x39c>

			case 1:
			set_left(20);
     5bc:	84 e1       	ldi	r24, 0x14	; 20
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <set_left>
			set_right(20);
     5c4:	84 e1       	ldi	r24, 0x14	; 20
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 91 03 	call	0x722	; 0x722 <set_right>
			m_red(ON);
     5cc:	6e 9a       	sbi	0x0d, 6	; 13
     5ce:	76 98       	cbi	0x0e, 6	; 14
			m_green(ON);
     5d0:	6a 9a       	sbi	0x0d, 2	; 13
     5d2:	72 98       	cbi	0x0e, 2	; 14
     5d4:	5a c0       	rjmp	.+180    	; 0x68a <main+0x420>
			
			break;

			case 2:
			set_left(20);
     5d6:	84 e1       	ldi	r24, 0x14	; 20
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <set_left>
			set_right(0);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 91 03 	call	0x722	; 0x722 <set_right>
			m_green(ON);
     5e6:	6a 9a       	sbi	0x0d, 2	; 13
     5e8:	72 98       	cbi	0x0e, 2	; 14
			m_red(OFF);
     5ea:	6e 9a       	sbi	0x0d, 6	; 13
     5ec:	76 9a       	sbi	0x0e, 6	; 14
     5ee:	4d c0       	rjmp	.+154    	; 0x68a <main+0x420>
			break;

			case(3):
			set_left(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <set_left>
			set_right(20);
     5f8:	84 e1       	ldi	r24, 0x14	; 20
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 91 03 	call	0x722	; 0x722 <set_right>
			m_red(ON);
     600:	6e 9a       	sbi	0x0d, 6	; 13
     602:	76 98       	cbi	0x0e, 6	; 14
     604:	0a c0       	rjmp	.+20     	; 0x61a <main+0x3b0>
			m_green(OFF);
			break;

			default:
			set_left(0);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <set_left>
			set_right(0);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 91 03 	call	0x722	; 0x722 <set_right>
			//rotate_complete = true;
			m_red(OFF);
     616:	6e 9a       	sbi	0x0d, 6	; 13
     618:	76 9a       	sbi	0x0e, 6	; 14
			m_green(OFF);
     61a:	6a 9a       	sbi	0x0d, 2	; 13
     61c:	72 9a       	sbi	0x0e, 2	; 14
     61e:	35 c0       	rjmp	.+106    	; 0x68a <main+0x420>
		}




		if(average_Y > y_off-off_err && average_Y < y_off+off_err){
     620:	0a 97       	sbiw	r24, 0x0a	; 10
     622:	9c 01       	movw	r18, r24
     624:	44 27       	eor	r20, r20
     626:	37 fd       	sbrc	r19, 7
     628:	40 95       	com	r20
     62a:	54 2f       	mov	r21, r20
     62c:	29 83       	std	Y+1, r18	; 0x01
     62e:	3a 83       	std	Y+2, r19	; 0x02
     630:	4b 83       	std	Y+3, r20	; 0x03
     632:	5c 83       	std	Y+4, r21	; 0x04
     634:	44 96       	adiw	r24, 0x14	; 20
     636:	1c 01       	movw	r2, r24
     638:	44 24       	eor	r4, r4
     63a:	37 fc       	sbrc	r3, 7
     63c:	40 94       	com	r4
     63e:	54 2c       	mov	r5, r4
			if(average_X > x_off+off_err || average_X < x_off-off_err)
     640:	4a e0       	ldi	r20, 0x0A	; 10
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	e4 0e       	add	r14, r20
     646:	f5 1e       	adc	r15, r21
     648:	c7 01       	movw	r24, r14
     64a:	aa 27       	eor	r26, r26
     64c:	97 fd       	sbrc	r25, 7
     64e:	a0 95       	com	r26
     650:	ba 2f       	mov	r27, r26
     652:	8d 83       	std	Y+5, r24	; 0x05
     654:	9e 83       	std	Y+6, r25	; 0x06
     656:	af 83       	std	Y+7, r26	; 0x07
     658:	b8 87       	std	Y+8, r27	; 0x08
     65a:	a6 ef       	ldi	r26, 0xF6	; 246
     65c:	bf ef       	ldi	r27, 0xFF	; 255
     65e:	ea 0e       	add	r14, r26
     660:	fb 1e       	adc	r15, r27
			{
				if(average_X < x_off)
     662:	97 01       	movw	r18, r14
     664:	44 27       	eor	r20, r20
     666:	37 fd       	sbrc	r19, 7
     668:	40 95       	com	r20
     66a:	54 2f       	mov	r21, r20
     66c:	29 87       	std	Y+9, r18	; 0x09
     66e:	3a 87       	std	Y+10, r19	; 0x0a
     670:	4b 87       	std	Y+11, r20	; 0x0b
     672:	5c 87       	std	Y+12, r21	; 0x0c




		if(average_Y > y_off-off_err && average_Y < y_off+off_err){
			if(average_X > x_off+off_err || average_X < x_off-off_err)
     674:	ea 0e       	add	r14, r26
     676:	fb 1e       	adc	r15, r27
     678:	c7 01       	movw	r24, r14
     67a:	aa 27       	eor	r26, r26
     67c:	97 fd       	sbrc	r25, 7
     67e:	a0 95       	com	r26
     680:	ba 2f       	mov	r27, r26
     682:	8d 87       	std	Y+13, r24	; 0x0d
     684:	9e 87       	std	Y+14, r25	; 0x0e
     686:	af 87       	std	Y+15, r26	; 0x0f
     688:	b8 8b       	std	Y+16, r27	; 0x10

	}



	while(!rotate_complete)
     68a:	80 91 52 01 	lds	r24, 0x0152
     68e:	90 91 53 01 	lds	r25, 0x0153
     692:	89 2b       	or	r24, r25
     694:	09 f4       	brne	.+2      	; 0x698 <main+0x42e>
     696:	61 ce       	rjmp	.-830    	; 0x35a <main+0xf0>
		  m_usb_tx_uint((unsigned int)(del_y));
		  m_usb_tx_string("\n");
*/
		
	
}
     698:	60 96       	adiw	r28, 0x10	; 16
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	cf 91       	pop	r28
     6a6:	df 91       	pop	r29
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	9f 90       	pop	r9
     6ba:	8f 90       	pop	r8
     6bc:	7f 90       	pop	r7
     6be:	6f 90       	pop	r6
     6c0:	5f 90       	pop	r5
     6c2:	4f 90       	pop	r4
     6c4:	3f 90       	pop	r3
     6c6:	2f 90       	pop	r2
     6c8:	08 95       	ret

000006ca <wait>:
}



void wait(int n)
{
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6ce:	60 e9       	ldi	r22, 0x90	; 144
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <wait+0x1e>
	for(int i = 0; i < n; i++)
     6d4:	20 e1       	ldi	r18, 0x10	; 16
     6d6:	37 e2       	ldi	r19, 0x27	; 39
     6d8:	fb 01       	movw	r30, r22
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <wait+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6e2:	d1 f7       	brne	.-12     	; 0x6d8 <wait+0xe>
     6e4:	4f 5f       	subi	r20, 0xFF	; 255
     6e6:	5f 4f       	sbci	r21, 0xFF	; 255
     6e8:	48 17       	cp	r20, r24
     6ea:	59 07       	cpc	r21, r25
     6ec:	9c f3       	brlt	.-26     	; 0x6d4 <wait+0xa>
	{
		m_wait(1000);
	}
}
     6ee:	08 95       	ret

000006f0 <set_left>:

// B5 and C6
void set_left(int n)
{
	int pwm = n;
	if(n < 0)
     6f0:	97 ff       	sbrs	r25, 7
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <set_left+0x10>
	{
		pwm = -n;
     6f4:	22 27       	eor	r18, r18
     6f6:	33 27       	eor	r19, r19
     6f8:	28 1b       	sub	r18, r24
     6fa:	39 0b       	sbc	r19, r25
		clear(PORTC, 6);
     6fc:	46 98       	cbi	0x08, 6	; 8
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <set_left+0x14>
	}
	else
	{
		set(PORTC, 6);
     700:	46 9a       	sbi	0x08, 6	; 8
     702:	9c 01       	movw	r18, r24
	}
	OCR1A = pwm * 655;
     704:	8f e8       	ldi	r24, 0x8F	; 143
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	ac 01       	movw	r20, r24
     70a:	24 9f       	mul	r18, r20
     70c:	c0 01       	movw	r24, r0
     70e:	25 9f       	mul	r18, r21
     710:	90 0d       	add	r25, r0
     712:	34 9f       	mul	r19, r20
     714:	90 0d       	add	r25, r0
     716:	11 24       	eor	r1, r1
     718:	90 93 89 00 	sts	0x0089, r25
     71c:	80 93 88 00 	sts	0x0088, r24

}
     720:	08 95       	ret

00000722 <set_right>:
	
// B6 and C7
void set_right(int n)
{
	int pwm = n;
	if(n < 0)
     722:	97 ff       	sbrs	r25, 7
     724:	06 c0       	rjmp	.+12     	; 0x732 <set_right+0x10>
	{
		pwm = -n;
     726:	22 27       	eor	r18, r18
     728:	33 27       	eor	r19, r19
     72a:	28 1b       	sub	r18, r24
     72c:	39 0b       	sbc	r19, r25
		clear(PORTC, 7);
     72e:	47 98       	cbi	0x08, 7	; 8
     730:	02 c0       	rjmp	.+4      	; 0x736 <set_right+0x14>
	}
	else
	{
		set(PORTC, 7);
     732:	47 9a       	sbi	0x08, 7	; 8
     734:	9c 01       	movw	r18, r24
	}
	OCR1B = pwm * 655;
     736:	8f e8       	ldi	r24, 0x8F	; 143
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	ac 01       	movw	r20, r24
     73c:	24 9f       	mul	r18, r20
     73e:	c0 01       	movw	r24, r0
     740:	25 9f       	mul	r18, r21
     742:	90 0d       	add	r25, r0
     744:	34 9f       	mul	r19, r20
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	90 93 8b 00 	sts	0x008B, r25
     74e:	80 93 8a 00 	sts	0x008A, r24
}
     752:	08 95       	ret

00000754 <wireless_callback>:

void wireless_callback(char* c)
{
	wireless_buffer = c;
     754:	90 93 89 01 	sts	0x0189, r25
     758:	80 93 88 01 	sts	0x0188, r24
	wireless_buffer_f = true;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 87 01 	sts	0x0187, r24
}
     762:	08 95       	ret

00000764 <wireless_buffer_full>:

bool wireless_buffer_full()
{
	return wireless_buffer_f;
}
     764:	80 91 87 01 	lds	r24, 0x0187
     768:	08 95       	ret

0000076a <get_wireless_buffer>:

char* get_wireless_buffer()
{
	wireless_buffer_f = false;
     76a:	10 92 87 01 	sts	0x0187, r1
	return wireless_buffer;
	
}
     76e:	80 91 88 01 	lds	r24, 0x0188
     772:	90 91 89 01 	lds	r25, 0x0189
     776:	08 95       	ret

00000778 <init_all>:
char* wireless_buffer;
void wireless_callback(char*);

void init_all()
{
	m_clockdivide(0);
     778:	80 e8       	ldi	r24, 0x80	; 128
     77a:	80 93 61 00 	sts	0x0061, r24
     77e:	10 92 61 00 	sts	0x0061, r1
	m_disableJTAG();
     782:	85 bf       	out	0x35, r24	; 53
     784:	85 bf       	out	0x35, r24	; 53

	//initializing mWii
	char wii_status = m_wii_open();
     786:	0e 94 86 06 	call	0xd0c	; 0xd0c <m_wii_open>
	if(wii_status){
     78a:	88 23       	and	r24, r24
     78c:	19 f0       	breq	.+6      	; 0x794 <init_all+0x1c>
	  m_green(ON);
     78e:	6a 9a       	sbi	0x0d, 2	; 13
     790:	72 98       	cbi	0x0e, 2	; 14
     792:	01 c0       	rjmp	.+2      	; 0x796 <init_all+0x1e>
	}else
	  m_red(ON);
     794:	6e 9a       	sbi	0x0d, 6	; 13
     796:	76 98       	cbi	0x0e, 6	; 14
	
	//init_communication(CHANNEL, ADDRESS, PACKET_SIZE);

	
	// set timer clock source
	clear(TCCR1B, CS12);
     798:	80 91 81 00 	lds	r24, 0x0081
     79c:	8b 7f       	andi	r24, 0xFB	; 251
     79e:	80 93 81 00 	sts	0x0081, r24
	clear(TCCR1B, CS11);
     7a2:	80 91 81 00 	lds	r24, 0x0081
     7a6:	8d 7f       	andi	r24, 0xFD	; 253
     7a8:	80 93 81 00 	sts	0x0081, r24
	set(TCCR1B, CS10);
     7ac:	80 91 81 00 	lds	r24, 0x0081
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	80 93 81 00 	sts	0x0081, r24

	// Set to up to ICR1 PWM mode
	ICR1 = 0xffff;
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	9f ef       	ldi	r25, 0xFF	; 255
     7ba:	90 93 87 00 	sts	0x0087, r25
     7be:	80 93 86 00 	sts	0x0086, r24
	set(TCCR1B, WGM13);
     7c2:	80 91 81 00 	lds	r24, 0x0081
     7c6:	80 61       	ori	r24, 0x10	; 16
     7c8:	80 93 81 00 	sts	0x0081, r24
	set(TCCR1B, WGM12);
     7cc:	80 91 81 00 	lds	r24, 0x0081
     7d0:	88 60       	ori	r24, 0x08	; 8
     7d2:	80 93 81 00 	sts	0x0081, r24
	set(TCCR1A, WGM11);
     7d6:	80 91 80 00 	lds	r24, 0x0080
     7da:	82 60       	ori	r24, 0x02	; 2
     7dc:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, WGM10);
     7e0:	80 91 80 00 	lds	r24, 0x0080
     7e4:	8e 7f       	andi	r24, 0xFE	; 254
     7e6:	80 93 80 00 	sts	0x0080, r24

	// set there to be an output at B5
	set(DDRB, 5);
     7ea:	25 9a       	sbi	0x04, 5	; 4
	set(TCCR1A, COM1A1);
     7ec:	80 91 80 00 	lds	r24, 0x0080
     7f0:	80 68       	ori	r24, 0x80	; 128
     7f2:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, COM1A0);
     7f6:	80 91 80 00 	lds	r24, 0x0080
     7fa:	8f 7b       	andi	r24, 0xBF	; 191
     7fc:	80 93 80 00 	sts	0x0080, r24

	// set there to be an output at B6
	set(DDRB, 6);
     800:	26 9a       	sbi	0x04, 6	; 4
	set(TCCR1A, COM1B1);
     802:	80 91 80 00 	lds	r24, 0x0080
     806:	80 62       	ori	r24, 0x20	; 32
     808:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, COM1B0);
     80c:	80 91 80 00 	lds	r24, 0x0080
     810:	8f 7e       	andi	r24, 0xEF	; 239
     812:	80 93 80 00 	sts	0x0080, r24

	// don't use the one on pin B7
	clear(TCCR1A, COM1C1);
     816:	80 91 80 00 	lds	r24, 0x0080
     81a:	87 7f       	andi	r24, 0xF7	; 247
     81c:	80 93 80 00 	sts	0x0080, r24
	clear(TCCR1A, COM1C0);
     820:	80 91 80 00 	lds	r24, 0x0080
     824:	8b 7f       	andi	r24, 0xFB	; 251
     826:	80 93 80 00 	sts	0x0080, r24

	OCR1A = 0;
     82a:	10 92 89 00 	sts	0x0089, r1
     82e:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
     832:	10 92 8b 00 	sts	0x008B, r1
     836:	10 92 8a 00 	sts	0x008A, r1

	
	// set the directions pins to enable output
	set(DDRC, 6);
     83a:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC, 7);
     83c:	3f 9a       	sbi	0x07, 7	; 7
	
	clear(PORTC, 6);
     83e:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC, 7);
     840:	47 98       	cbi	0x08, 7	; 8

	
}
     842:	08 95       	ret

00000844 <send_message_to_bot>:
		}
	}
}

void send_message_to_bot(char* c, char address)
{
     844:	9c 01       	movw	r18, r24
     846:	46 2f       	mov	r20, r22
	m_rf_send(address, c, address);
     848:	86 2f       	mov	r24, r22
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <m_rf_send>
}
     850:	08 95       	ret

00000852 <send_message>:
	m_rf_read(&buffer, packet_length);
	wireless_callback(&buffer);
}

void send_message(char* c)
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ec 01       	movw	r28, r24
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
     858:	80 91 8a 01 	lds	r24, 0x018A
     85c:	90 91 8b 01 	lds	r25, 0x018B
     860:	84 97       	sbiw	r24, 0x24	; 36
     862:	29 f0       	breq	.+10     	; 0x86e <send_message+0x1c>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, address);
     864:	84 e2       	ldi	r24, 0x24	; 36
     866:	be 01       	movw	r22, r28
     868:	44 e2       	ldi	r20, 0x24	; 36
     86a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <m_rf_send>

void send_message(char* c)
{
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
     86e:	80 91 8a 01 	lds	r24, 0x018A
     872:	90 91 8b 01 	lds	r25, 0x018B
     876:	85 97       	sbiw	r24, 0x25	; 37
     878:	29 f0       	breq	.+10     	; 0x884 <send_message+0x32>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, address);
     87a:	85 e2       	ldi	r24, 0x25	; 37
     87c:	be 01       	movw	r22, r28
     87e:	45 e2       	ldi	r20, 0x25	; 37
     880:	0e 94 0e 05 	call	0xa1c	; 0xa1c <m_rf_send>

void send_message(char* c)
{
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
     884:	80 91 8a 01 	lds	r24, 0x018A
     888:	90 91 8b 01 	lds	r25, 0x018B
     88c:	86 97       	sbiw	r24, 0x26	; 38
     88e:	29 f0       	breq	.+10     	; 0x89a <send_message+0x48>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, address);
     890:	86 e2       	ldi	r24, 0x26	; 38
     892:	be 01       	movw	r22, r28
     894:	46 e2       	ldi	r20, 0x26	; 38
     896:	0e 94 0e 05 	call	0xa1c	; 0xa1c <m_rf_send>
		{
			send_message_to_bot(c, i);

		}
	}
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <__vector_3>:
	m_rf_open(channel, address, packet_length);
}


ISR(INT2_vect)
{
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	2f 93       	push	r18
     8b0:	3f 93       	push	r19
     8b2:	4f 93       	push	r20
     8b4:	5f 93       	push	r21
     8b6:	6f 93       	push	r22
     8b8:	7f 93       	push	r23
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	0f 92       	push	r0
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
	char buffer;
	m_rf_read(&buffer, packet_length);
     8d0:	8e 01       	movw	r16, r28
     8d2:	0f 5f       	subi	r16, 0xFF	; 255
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	c8 01       	movw	r24, r16
     8d8:	60 91 8c 01 	lds	r22, 0x018C
     8dc:	0e 94 bf 04 	call	0x97e	; 0x97e <m_rf_read>
	wireless_callback(&buffer);
     8e0:	c8 01       	movw	r24, r16
     8e2:	0e 94 aa 03 	call	0x754	; 0x754 <wireless_callback>
}
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <init_communication>:
#include "common_robockey.h"

int channel, address, packet_length;

void init_communication(int c, int a, int l)
{
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	c8 2e       	mov	r12, r24
     920:	19 2f       	mov	r17, r25
     922:	d6 2e       	mov	r13, r22
     924:	07 2f       	mov	r16, r23
     926:	7a 01       	movw	r14, r20
	m_bus_init();
     928:	0e 94 ae 04 	call	0x95c	; 0x95c <m_bus_init>
	channel = c;
     92c:	c0 92 8e 01 	sts	0x018E, r12
     930:	10 93 8f 01 	sts	0x018F, r17
	address = a;
     934:	d0 92 8a 01 	sts	0x018A, r13
     938:	00 93 8b 01 	sts	0x018B, r16
	packet_length = l;
     93c:	e0 92 8c 01 	sts	0x018C, r14
     940:	f0 92 8d 01 	sts	0x018D, r15

	m_rf_open(channel, address, packet_length);
     944:	8c 2d       	mov	r24, r12
     946:	6d 2d       	mov	r22, r13
     948:	4e 2d       	mov	r20, r14
     94a:	0e 94 5b 05 	call	0xab6	; 0xab6 <m_rf_open>
}
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <m_bus_init>:
#include "m_bus.h"

void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     95c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     95e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     960:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     962:	8c e0       	ldi	r24, 0x0C	; 12
     964:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     968:	e9 e6       	ldi	r30, 0x69	; 105
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	80 62       	ori	r24, 0x20	; 32
     970:	80 83       	st	Z, r24
     972:	80 81       	ld	r24, Z
     974:	8f 7e       	andi	r24, 0xEF	; 239
     976:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     978:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     97a:	78 94       	sei
     97c:	08 95       	ret

0000097e <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
     97e:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     980:	84 ea       	ldi	r24, 0xA4	; 164
     982:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     986:	80 91 bc 00 	lds	r24, 0x00BC
     98a:	87 ff       	sbrs	r24, 7
     98c:	fc cf       	rjmp	.-8      	; 0x986 <m_rf_read+0x8>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
     98e:	81 e5       	ldi	r24, 0x51	; 81
     990:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     994:	84 e8       	ldi	r24, 0x84	; 132
     996:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
     99a:	80 91 bc 00 	lds	r24, 0x00BC
     99e:	87 ff       	sbrs	r24, 7
     9a0:	fc cf       	rjmp	.-8      	; 0x99a <m_rf_read+0x1c>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
     9a2:	80 91 b9 00 	lds	r24, 0x00B9
     9a6:	88 7f       	andi	r24, 0xF8	; 248
     9a8:	88 34       	cpi	r24, 0x48	; 72
     9aa:	91 f0       	breq	.+36     	; 0x9d0 <m_rf_read+0x52>
		return 0; // not connected/listening
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     9ac:	84 ec       	ldi	r24, 0xC4	; 196
     9ae:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     9b2:	80 91 bc 00 	lds	r24, 0x00BC
     9b6:	87 ff       	sbrs	r24, 7
     9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <m_rf_read+0x34>
	bytes = TWDR;
     9ba:	80 91 bb 00 	lds	r24, 0x00BB
	if(bytes != packet_length){
     9be:	86 17       	cp	r24, r22
     9c0:	39 f4       	brne	.+14     	; 0x9d0 <m_rf_read+0x52>
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	61 50       	subi	r22, 0x01	; 1
     9ca:	70 40       	sbci	r23, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     9cc:	94 ec       	ldi	r25, 0xC4	; 196
     9ce:	12 c0       	rjmp	.+36     	; 0x9f4 <m_rf_read+0x76>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     9d0:	84 e9       	ldi	r24, 0x94	; 148
     9d2:	80 93 bc 00 	sts	0x00BC, r24
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	08 95       	ret
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     9da:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     9de:	80 91 bc 00 	lds	r24, 0x00BC
     9e2:	87 ff       	sbrs	r24, 7
     9e4:	fc cf       	rjmp	.-8      	; 0x9de <m_rf_read+0x60>
		buffer[i] = TWDR;
     9e6:	80 91 bb 00 	lds	r24, 0x00BB
     9ea:	f9 01       	movw	r30, r18
     9ec:	ea 0f       	add	r30, r26
     9ee:	fb 1f       	adc	r31, r27
     9f0:	80 83       	st	Z, r24
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
     9f2:	11 96       	adiw	r26, 0x01	; 1
     9f4:	a6 17       	cp	r26, r22
     9f6:	b7 07       	cpc	r27, r23
     9f8:	84 f3       	brlt	.-32     	; 0x9da <m_rf_read+0x5c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     9fa:	84 e8       	ldi	r24, 0x84	; 132
     9fc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     a00:	80 91 bc 00 	lds	r24, 0x00BC
     a04:	87 ff       	sbrs	r24, 7
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <m_rf_read+0x82>
	buffer[i++] = TWDR;
     a08:	80 91 bb 00 	lds	r24, 0x00BB
     a0c:	a2 0f       	add	r26, r18
     a0e:	b3 1f       	adc	r27, r19
     a10:	8c 93       	st	X, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     a12:	84 e9       	ldi	r24, 0x94	; 148
     a14:	80 93 bc 00 	sts	0x00BC, r24
     a18:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
     a1a:	08 95       	ret

00000a1c <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
     a1c:	98 2f       	mov	r25, r24
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
     a1e:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     a20:	84 ea       	ldi	r24, 0xA4	; 164
     a22:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a26:	80 91 bc 00 	lds	r24, 0x00BC
     a2a:	87 ff       	sbrs	r24, 7
     a2c:	fc cf       	rjmp	.-8      	; 0xa26 <m_rf_send+0xa>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     a2e:	80 e5       	ldi	r24, 0x50	; 80
     a30:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     a34:	84 e8       	ldi	r24, 0x84	; 132
     a36:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a3a:	80 91 bc 00 	lds	r24, 0x00BC
     a3e:	87 ff       	sbrs	r24, 7
     a40:	fc cf       	rjmp	.-8      	; 0xa3a <m_rf_send+0x1e>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     a42:	80 91 b9 00 	lds	r24, 0x00B9
     a46:	88 7f       	andi	r24, 0xF8	; 248
     a48:	80 32       	cpi	r24, 0x20	; 32
     a4a:	31 f4       	brne	.+12     	; 0xa58 <m_rf_send+0x3c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     a4c:	84 e9       	ldi	r24, 0x94	; 148
     a4e:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
     a52:	78 94       	sei
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	08 95       	ret
		return 0;
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     a5e:	84 e8       	ldi	r24, 0x84	; 132
     a60:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a64:	80 91 bc 00 	lds	r24, 0x00BC
     a68:	87 ff       	sbrs	r24, 7
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <m_rf_send+0x48>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
     a6c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     a70:	84 e8       	ldi	r24, 0x84	; 132
     a72:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     a76:	80 91 bc 00 	lds	r24, 0x00BC
     a7a:	87 ff       	sbrs	r24, 7
     a7c:	fc cf       	rjmp	.-8      	; 0xa76 <m_rf_send+0x5a>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0

	// SEND DATA
	for(i=0;i<packet_length;i++){
     a82:	50 e0       	ldi	r21, 0x00	; 0
		TWDR = buffer[i];
		TWCR = (1<<TWINT) | (1<<TWEN);
     a84:	94 e8       	ldi	r25, 0x84	; 132
     a86:	0e c0       	rjmp	.+28     	; 0xaa4 <m_rf_send+0x88>
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
     a88:	fb 01       	movw	r30, r22
     a8a:	e2 0f       	add	r30, r18
     a8c:	f3 1f       	adc	r31, r19
     a8e:	80 81       	ld	r24, Z
     a90:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
     a94:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){};
     a98:	80 91 bc 00 	lds	r24, 0x00BC
     a9c:	87 ff       	sbrs	r24, 7
     a9e:	fc cf       	rjmp	.-8      	; 0xa98 <m_rf_send+0x7c>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	24 17       	cp	r18, r20
     aa6:	35 07       	cpc	r19, r21
     aa8:	7c f3       	brlt	.-34     	; 0xa88 <m_rf_send+0x6c>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     aaa:	84 e9       	ldi	r24, 0x94	; 148
     aac:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
     ab0:	78 94       	sei
     ab2:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
     ab4:	08 95       	ret

00000ab6 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	18 2f       	mov	r17, r24
     abe:	06 2f       	mov	r16, r22
     ac0:	f4 2e       	mov	r15, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     ac2:	0e 94 ae 04 	call	0x95c	; 0x95c <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     ac6:	84 ea       	ldi	r24, 0xA4	; 164
     ac8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     acc:	80 91 bc 00 	lds	r24, 0x00BC
     ad0:	87 ff       	sbrs	r24, 7
     ad2:	fc cf       	rjmp	.-8      	; 0xacc <m_rf_open+0x16>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     ad4:	80 e5       	ldi	r24, 0x50	; 80
     ad6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     ada:	84 e8       	ldi	r24, 0x84	; 132
     adc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     ae0:	80 91 bc 00 	lds	r24, 0x00BC
     ae4:	87 ff       	sbrs	r24, 7
     ae6:	fc cf       	rjmp	.-8      	; 0xae0 <m_rf_open+0x2a>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     ae8:	80 91 b9 00 	lds	r24, 0x00B9
     aec:	88 7f       	andi	r24, 0xF8	; 248
     aee:	80 32       	cpi	r24, 0x20	; 32
     af0:	29 f4       	brne	.+10     	; 0xafc <m_rf_open+0x46>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     af2:	84 e9       	ldi	r24, 0x94	; 148
     af4:	80 93 bc 00 	sts	0x00BC, r24
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	29 c0       	rjmp	.+82     	; 0xb4e <__stack+0x4f>
		return 0;
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     b02:	84 e8       	ldi	r24, 0x84	; 132
     b04:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b08:	80 91 bc 00 	lds	r24, 0x00BC
     b0c:	87 ff       	sbrs	r24, 7
     b0e:	fc cf       	rjmp	.-8      	; 0xb08 <__stack+0x9>
	
	// SEND DATA
	TWDR = channel;
     b10:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     b14:	84 e8       	ldi	r24, 0x84	; 132
     b16:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b1a:	80 91 bc 00 	lds	r24, 0x00BC
     b1e:	87 ff       	sbrs	r24, 7
     b20:	fc cf       	rjmp	.-8      	; 0xb1a <__stack+0x1b>
	
	TWDR = RXaddress;
     b22:	00 93 bb 00 	sts	0x00BB, r16
	TWCR = (1<<TWINT) | (1<<TWEN);
     b26:	84 e8       	ldi	r24, 0x84	; 132
     b28:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b2c:	80 91 bc 00 	lds	r24, 0x00BC
     b30:	87 ff       	sbrs	r24, 7
     b32:	fc cf       	rjmp	.-8      	; 0xb2c <__stack+0x2d>
	
	TWDR = packet_length;
     b34:	f0 92 bb 00 	sts	0x00BB, r15
	TWCR = (1<<TWINT) | (1<<TWEN);
     b38:	84 e8       	ldi	r24, 0x84	; 132
     b3a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     b3e:	80 91 bc 00 	lds	r24, 0x00BC
     b42:	87 ff       	sbrs	r24, 7
     b44:	fc cf       	rjmp	.-8      	; 0xb3e <__stack+0x3f>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     b46:	84 e9       	ldi	r24, 0x94	; 148
     b48:	80 93 bc 00 	sts	0x00BC, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	08 95       	ret

00000b56 <twi_wait>:
		return 0;					// comm failure
	}
}

unsigned char twi_wait(void)
{
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int wait=0;
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
     b5a:	80 91 bc 00 	lds	r24, 0x00BC
     b5e:	87 fd       	sbrc	r24, 7
     b60:	06 c0       	rjmp	.+12     	; 0xb6e <twi_wait+0x18>
     b62:	2f 5f       	subi	r18, 0xFF	; 255
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	29 3e       	cpi	r18, 0xE9	; 233
     b6a:	38 07       	cpc	r19, r24
     b6c:	b1 f7       	brne	.-20     	; 0xb5a <twi_wait+0x4>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	28 5e       	subi	r18, 0xE8	; 232
     b72:	33 40       	sbci	r19, 0x03	; 3
     b74:	09 f0       	breq	.+2      	; 0xb78 <twi_wait+0x22>
     b76:	81 e0       	ldi	r24, 0x01	; 1
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
     b78:	08 95       	ret

00000b7a <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
     b7a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
     b7e:	84 e8       	ldi	r24, 0x84	; 132
     b80:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
     b84:	0e 94 ab 05 	call	0xb56	; 0xb56 <twi_wait>
     b88:	88 23       	and	r24, r24
     b8a:	19 f0       	breq	.+6      	; 0xb92 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
     b8c:	80 91 b9 00 	lds	r24, 0x00B9
     b90:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
     b92:	08 95       	ret

00000b94 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
     b94:	1f 93       	push	r17
     b96:	18 2f       	mov	r17, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     b98:	84 ea       	ldi	r24, 0xA4	; 164
     b9a:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
     b9e:	0e 94 ab 05 	call	0xb56	; 0xb56 <twi_wait>
     ba2:	88 23       	and	r24, r24
     ba4:	69 f0       	breq	.+26     	; 0xbc0 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
     ba6:	11 0f       	add	r17, r17
     ba8:	81 2f       	mov	r24, r17
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
     bb0:	88 34       	cpi	r24, 0x48	; 72
     bb2:	11 f0       	breq	.+4      	; 0xbb8 <start_read+0x24>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	04 c0       	rjmp	.+8      	; 0xbc0 <start_read+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     bb8:	84 e9       	ldi	r24, 0x94	; 148
     bba:	80 93 bc 00 	sts	0x00BC, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
		return 0;	// failure
	}	
	return 1;	// success
}	
     bc0:	1f 91       	pop	r17
     bc2:	08 95       	ret

00000bc4 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
     bc4:	1f 93       	push	r17
     bc6:	18 2f       	mov	r17, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     bc8:	84 ea       	ldi	r24, 0xA4	; 164
     bca:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
     bce:	0e 94 ab 05 	call	0xb56	; 0xb56 <twi_wait>
     bd2:	88 23       	and	r24, r24
     bd4:	61 f0       	breq	.+24     	; 0xbee <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
     bd6:	81 2f       	mov	r24, r17
     bd8:	88 0f       	add	r24, r24
     bda:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
     bde:	80 32       	cpi	r24, 0x20	; 32
     be0:	11 f0       	breq	.+4      	; 0xbe6 <start_write+0x22>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	04 c0       	rjmp	.+8      	; 0xbee <start_write+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     be6:	84 e9       	ldi	r24, 0x94	; 148
     be8:	80 93 bc 00 	sts	0x00BC, r24
     bec:	80 e0       	ldi	r24, 0x00	; 0
		return 0;	// failure
	}	
	return 1;	// success
}	
     bee:	1f 91       	pop	r17
     bf0:	08 95       	ret

00000bf2 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	60 97       	sbiw	r28, 0x10	; 16
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	18 2f       	mov	r17, r24
     c0c:	09 2f       	mov	r16, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
     c0e:	88 e5       	ldi	r24, 0x58	; 88
     c10:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     c14:	88 23       	and	r24, r24
     c16:	09 f4       	brne	.+2      	; 0xc1a <m_wii_read+0x28>
     c18:	69 c0       	rjmp	.+210    	; 0xcec <m_wii_read+0xfa>
	if(!send_byte(0x36)){return 0;}
     c1a:	86 e3       	ldi	r24, 0x36	; 54
     c1c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <m_wii_read+0x34>
     c24:	63 c0       	rjmp	.+198    	; 0xcec <m_wii_read+0xfa>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     c26:	84 e9       	ldi	r24, 0x94	; 148
     c28:	80 93 bc 00 	sts	0x00BC, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c2c:	85 e8       	ldi	r24, 0x85	; 133
     c2e:	8a 95       	dec	r24
     c30:	f1 f7       	brne	.-4      	; 0xc2e <m_wii_read+0x3c>
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
     c32:	88 e5       	ldi	r24, 0x58	; 88
     c34:	0e 94 ca 05 	call	0xb94	; 0xb94 <start_read>
     c38:	88 23       	and	r24, r24
     c3a:	09 f4       	brne	.+2      	; 0xc3e <m_wii_read+0x4c>
     c3c:	57 c0       	rjmp	.+174    	; 0xcec <m_wii_read+0xfa>
}

char m_wii_read(unsigned int* blob_data)
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     c3e:	fe 01       	movw	r30, r28
     c40:	31 96       	adiw	r30, 0x01	; 1
     c42:	80 e1       	ldi	r24, 0x10	; 16
     c44:	df 01       	movw	r26, r30
     c46:	1d 92       	st	X+, r1
     c48:	8a 95       	dec	r24
     c4a:	e9 f7       	brne	.-6      	; 0xc46 <m_wii_read+0x54>
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     c4c:	94 ec       	ldi	r25, 0xC4	; 196
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     c4e:	9e 01       	movw	r18, r28
     c50:	20 5f       	subi	r18, 0xF0	; 240
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
     c54:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     c58:	80 91 bc 00 	lds	r24, 0x00BC
     c5c:	87 ff       	sbrs	r24, 7
     c5e:	fc cf       	rjmp	.-8      	; 0xc58 <m_wii_read+0x66>
		temp[i] = TWDR;
     c60:	80 91 bb 00 	lds	r24, 0x00BB
     c64:	81 93       	st	Z+, r24
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
     c66:	e2 17       	cp	r30, r18
     c68:	f3 07       	cpc	r31, r19
     c6a:	a1 f7       	brne	.-24     	; 0xc54 <m_wii_read+0x62>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
     c6c:	84 e8       	ldi	r24, 0x84	; 132
     c6e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
     c72:	80 91 bc 00 	lds	r24, 0x00BC
     c76:	87 ff       	sbrs	r24, 7
     c78:	fc cf       	rjmp	.-8      	; 0xc72 <m_wii_read+0x80>
	temp[15] = TWDR;
     c7a:	80 91 bb 00 	lds	r24, 0x00BB
     c7e:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     c80:	84 e9       	ldi	r24, 0x94	; 148
     c82:	80 93 bc 00 	sts	0x00BC, r24
     c86:	de 01       	movw	r26, r28
     c88:	12 96       	adiw	r26, 0x02	; 2
     c8a:	21 2f       	mov	r18, r17
     c8c:	30 2f       	mov	r19, r16
     c8e:	c9 01       	movw	r24, r18
     c90:	fc 01       	movw	r30, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     c92:	be 01       	movw	r22, r28
     c94:	62 5f       	subi	r22, 0xF2	; 242
     c96:	7f 4f       	sbci	r23, 0xFF	; 255
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	2c 91       	ld	r18, X
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	c9 01       	movw	r24, r18
     ca2:	80 73       	andi	r24, 0x30	; 48
     ca4:	90 70       	andi	r25, 0x00	; 0
     ca6:	54 e0       	ldi	r21, 0x04	; 4
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	5a 95       	dec	r21
     cae:	e1 f7       	brne	.-8      	; 0xca8 <m_wii_read+0xb6>
     cb0:	4c 91       	ld	r20, X
     cb2:	84 0f       	add	r24, r20
     cb4:	91 1d       	adc	r25, r1
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
     cba:	c9 01       	movw	r24, r18
     cbc:	80 7c       	andi	r24, 0xC0	; 192
     cbe:	90 70       	andi	r25, 0x00	; 0
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	4c 91       	ld	r20, X
     ccc:	11 97       	sbiw	r26, 0x01	; 1
     cce:	84 0f       	add	r24, r20
     cd0:	91 1d       	adc	r25, r1
     cd2:	93 83       	std	Z+3, r25	; 0x03
     cd4:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
     cd6:	2f 70       	andi	r18, 0x0F	; 15
     cd8:	30 70       	andi	r19, 0x00	; 0
     cda:	35 83       	std	Z+5, r19	; 0x05
     cdc:	24 83       	std	Z+4, r18	; 0x04
     cde:	13 96       	adiw	r26, 0x03	; 3
     ce0:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
     ce2:	a6 17       	cp	r26, r22
     ce4:	b7 07       	cpc	r27, r23
     ce6:	c1 f6       	brne	.-80     	; 0xc98 <m_wii_read+0xa6>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	01 c0       	rjmp	.+2      	; 0xcee <m_wii_read+0xfc>
     cec:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
     cee:	60 96       	adiw	r28, 0x10	; 16
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d04:	84 e9       	ldi	r24, 0x94	; 148
     d06:	80 93 bc 00 	sts	0x00BC, r24
     d0a:	08 95       	ret

00000d0c <m_wii_open>:
unsigned char send_byte(unsigned char byte);
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
	m_bus_init();
     d12:	0e 94 ae 04 	call	0x95c	; 0x95c <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
     d16:	88 e5       	ldi	r24, 0x58	; 88
     d18:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     d1c:	88 23       	and	r24, r24
     d1e:	09 f4       	brne	.+2      	; 0xd22 <m_wii_open+0x16>
     d20:	b3 c0       	rjmp	.+358    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x30)){return 0;}
     d22:	80 e3       	ldi	r24, 0x30	; 48
     d24:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d28:	88 23       	and	r24, r24
     d2a:	09 f4       	brne	.+2      	; 0xd2e <m_wii_open+0x22>
     d2c:	ad c0       	rjmp	.+346    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x01)){return 0;}
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <m_wii_open+0x2e>
     d38:	a7 c0       	rjmp	.+334    	; 0xe88 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     d3a:	84 e9       	ldi	r24, 0x94	; 148
     d3c:	80 93 bc 00 	sts	0x00BC, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	9c e9       	ldi	r25, 0x9C	; 156
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <m_wii_open+0x38>
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
     d48:	88 e5       	ldi	r24, 0x58	; 88
     d4a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <m_wii_open+0x48>
     d52:	9a c0       	rjmp	.+308    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <m_wii_open+0x54>
     d5e:	94 c0       	rjmp	.+296    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <m_wii_open+0x60>
     d6a:	8e c0       	rjmp	.+284    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d72:	88 23       	and	r24, r24
     d74:	09 f4       	brne	.+2      	; 0xd78 <m_wii_open+0x6c>
     d76:	88 c0       	rjmp	.+272    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d7e:	88 23       	and	r24, r24
     d80:	09 f4       	brne	.+2      	; 0xd84 <m_wii_open+0x78>
     d82:	82 c0       	rjmp	.+260    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d8a:	88 23       	and	r24, r24
     d8c:	09 f4       	brne	.+2      	; 0xd90 <m_wii_open+0x84>
     d8e:	7c c0       	rjmp	.+248    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     d96:	88 23       	and	r24, r24
     d98:	09 f4       	brne	.+2      	; 0xd9c <m_wii_open+0x90>
     d9a:	76 c0       	rjmp	.+236    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     da2:	88 23       	and	r24, r24
     da4:	09 f4       	brne	.+2      	; 0xda8 <m_wii_open+0x9c>
     da6:	70 c0       	rjmp	.+224    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x90)){return 0;} // p0
     da8:	80 e9       	ldi	r24, 0x90	; 144
     daa:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <m_wii_open+0xa8>
     db2:	6a c0       	rjmp	.+212    	; 0xe88 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     db4:	14 e9       	ldi	r17, 0x94	; 148
     db6:	10 93 bc 00 	sts	0x00BC, r17
     dba:	c0 e4       	ldi	r28, 0x40	; 64
     dbc:	dc e9       	ldi	r29, 0x9C	; 156
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <m_wii_open+0xb4>
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
     dc4:	88 e5       	ldi	r24, 0x58	; 88
     dc6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <m_wii_open+0xc4>
     dce:	5c c0       	rjmp	.+184    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x07)){return 0;}
     dd0:	87 e0       	ldi	r24, 0x07	; 7
     dd2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     dd6:	88 23       	and	r24, r24
     dd8:	09 f4       	brne	.+2      	; 0xddc <m_wii_open+0xd0>
     dda:	56 c0       	rjmp	.+172    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <m_wii_open+0xdc>
     de6:	50 c0       	rjmp	.+160    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x41)){return 0;} // p1
     de8:	81 e4       	ldi	r24, 0x41	; 65
     dea:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     dee:	88 23       	and	r24, r24
     df0:	09 f4       	brne	.+2      	; 0xdf4 <m_wii_open+0xe8>
     df2:	4a c0       	rjmp	.+148    	; 0xe88 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     df4:	10 93 bc 00 	sts	0x00BC, r17
     df8:	ce 01       	movw	r24, r28
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <m_wii_open+0xee>
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
     dfe:	88 e5       	ldi	r24, 0x58	; 88
     e00:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     e04:	88 23       	and	r24, r24
     e06:	09 f4       	brne	.+2      	; 0xe0a <m_wii_open+0xfe>
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x1A)){return 0;}
     e0a:	8a e1       	ldi	r24, 0x1A	; 26
     e0c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <m_wii_open+0x10a>
     e14:	39 c0       	rjmp	.+114    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x40)){return 0;} // p2
     e16:	80 e4       	ldi	r24, 0x40	; 64
     e18:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e1c:	88 23       	and	r24, r24
     e1e:	a1 f1       	breq	.+104    	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;} // p3
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e26:	88 23       	and	r24, r24
     e28:	79 f1       	breq	.+94     	; 0xe88 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e2a:	10 93 bc 00 	sts	0x00BC, r17
     e2e:	ce 01       	movw	r24, r28
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <m_wii_open+0x124>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e34:	88 e5       	ldi	r24, 0x58	; 88
     e36:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     e3a:	88 23       	and	r24, r24
     e3c:	29 f1       	breq	.+74     	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x33)){return 0;}
     e3e:	83 e3       	ldi	r24, 0x33	; 51
     e40:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e44:	88 23       	and	r24, r24
     e46:	01 f1       	breq	.+64     	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x03)){return 0;}
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e4e:	88 23       	and	r24, r24
     e50:	d9 f0       	breq	.+54     	; 0xe88 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e52:	10 93 bc 00 	sts	0x00BC, r17
     e56:	ce 01       	movw	r24, r28
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <m_wii_open+0x14c>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
     e5c:	88 e5       	ldi	r24, 0x58	; 88
     e5e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <start_write>
     e62:	88 23       	and	r24, r24
     e64:	89 f0       	breq	.+34     	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x30)){return 0;}
     e66:	80 e3       	ldi	r24, 0x30	; 48
     e68:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e6c:	88 23       	and	r24, r24
     e6e:	61 f0       	breq	.+24     	; 0xe88 <m_wii_open+0x17c>
	if(!send_byte(0x08)){return 0;}
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	0e 94 bd 05 	call	0xb7a	; 0xb7a <send_byte>
     e76:	88 23       	and	r24, r24
     e78:	39 f0       	breq	.+14     	; 0xe88 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e7a:	10 93 bc 00 	sts	0x00BC, r17
     e7e:	ce 01       	movw	r24, r28
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <m_wii_open+0x174>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <m_wii_open+0x17e>
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
     e88:	80 e0       	ldi	r24, 0x00	; 0
}
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	08 95       	ret

00000e92 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     e98:	80 ea       	ldi	r24, 0xA0	; 160
     e9a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     e9e:	82 e1       	ldi	r24, 0x12	; 18
     ea0:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     ea2:	09 b4       	in	r0, 0x29	; 41
     ea4:	00 fe       	sbrs	r0, 0
     ea6:	fd cf       	rjmp	.-6      	; 0xea2 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     ea8:	80 e9       	ldi	r24, 0x90	; 144
     eaa:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     eae:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     eb2:	10 92 73 01 	sts	0x0173, r1
	cdc_line_rtsdtr = 0;
     eb6:	10 92 74 01 	sts	0x0174, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     eba:	8c e0       	ldi	r24, 0x0C	; 12
     ebc:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     ec0:	78 94       	sei
}
     ec2:	08 95       	ret

00000ec4 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
     ec4:	80 91 73 01 	lds	r24, 0x0173
}
     ec8:	08 95       	ret

00000eca <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     eca:	2f b7       	in	r18, 0x3f	; 63
	cli();
     ecc:	f8 94       	cli
	if (!usb_configuration) {
     ece:	80 91 73 01 	lds	r24, 0x0173
     ed2:	88 23       	and	r24, r24
     ed4:	39 f0       	breq	.+14     	; 0xee4 <m_usb_rx_char+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     edc:	80 91 e8 00 	lds	r24, 0x00E8
     ee0:	85 fd       	sbrc	r24, 5
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <m_usb_rx_char+0x20>
		// no data in buffer
		SREG = intr_state;
     ee4:	2f bf       	out	0x3f, r18	; 63
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	0a c0       	rjmp	.+20     	; 0xefe <m_usb_rx_char+0x34>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     eea:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     eee:	80 91 e8 00 	lds	r24, 0x00E8
     ef2:	85 fd       	sbrc	r24, 5
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <m_usb_rx_char+0x32>
     ef6:	8b e6       	ldi	r24, 0x6B	; 107
     ef8:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     efc:	2f bf       	out	0x3f, r18	; 63
	return (char)c;
}
     efe:	89 2f       	mov	r24, r25
     f00:	08 95       	ret

00000f02 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     f02:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f04:	f8 94       	cli
	if (usb_configuration) {
     f06:	80 91 73 01 	lds	r24, 0x0173
     f0a:	88 23       	and	r24, r24
     f0c:	29 f0       	breq	.+10     	; 0xf18 <m_usb_rx_available+0x16>
		UENUM = CDC_RX_ENDPOINT;
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     f14:	80 91 f2 00 	lds	r24, 0x00F2
	}
	SREG = intr_state;
     f18:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     f1a:	08 95       	ret

00000f1c <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     f1c:	80 91 73 01 	lds	r24, 0x0173
     f20:	88 23       	and	r24, r24
     f22:	71 f0       	breq	.+28     	; 0xf40 <m_usb_rx_flush+0x24>
		intr_state = SREG;
     f24:	9f b7       	in	r25, 0x3f	; 63
		cli();
     f26:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     f28:	83 e0       	ldi	r24, 0x03	; 3
     f2a:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     f2e:	2b e6       	ldi	r18, 0x6B	; 107
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <m_usb_rx_flush+0x1a>
     f32:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     f36:	80 91 e8 00 	lds	r24, 0x00E8
     f3a:	85 fd       	sbrc	r24, 5
     f3c:	fa cf       	rjmp	.-12     	; 0xf32 <m_usb_rx_flush+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     f3e:	9f bf       	out	0x3f, r25	; 63
     f40:	08 95       	ret

00000f42 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     f42:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     f44:	80 91 73 01 	lds	r24, 0x0173
     f48:	88 23       	and	r24, r24
     f4a:	d9 f1       	breq	.+118    	; 0xfc2 <m_usb_tx_char+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     f4c:	2f b7       	in	r18, 0x3f	; 63
	cli();
     f4e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     f56:	80 91 76 01 	lds	r24, 0x0176
     f5a:	88 23       	and	r24, r24
     f5c:	41 f0       	breq	.+16     	; 0xf6e <m_usb_tx_char+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     f5e:	80 91 e8 00 	lds	r24, 0x00E8
     f62:	85 fd       	sbrc	r24, 5
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <m_usb_tx_char+0x28>
			SREG = intr_state;
     f66:	2f bf       	out	0x3f, r18	; 63
     f68:	12 c0       	rjmp	.+36     	; 0xf8e <m_usb_tx_char+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     f6a:	10 92 76 01 	sts	0x0176, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     f6e:	90 91 e4 00 	lds	r25, 0x00E4
     f72:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     f74:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     f76:	80 91 e8 00 	lds	r24, 0x00E8
     f7a:	85 fd       	sbrc	r24, 5
     f7c:	13 c0       	rjmp	.+38     	; 0xfa4 <m_usb_tx_char+0x62>
		SREG = intr_state;
     f7e:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     f80:	80 91 e4 00 	lds	r24, 0x00E4
     f84:	89 17       	cp	r24, r25
     f86:	29 f4       	brne	.+10     	; 0xf92 <m_usb_tx_char+0x50>
			transmit_previous_timeout = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 76 01 	sts	0x0176, r24
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     f92:	80 91 73 01 	lds	r24, 0x0173
     f96:	88 23       	and	r24, r24
     f98:	a1 f0       	breq	.+40     	; 0xfc2 <m_usb_tx_char+0x80>
		// get ready to try checking again
		intr_state = SREG;
     f9a:	2f b7       	in	r18, 0x3f	; 63
		cli();
     f9c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     f9e:	30 93 e9 00 	sts	0x00E9, r19
     fa2:	e9 cf       	rjmp	.-46     	; 0xf76 <m_usb_tx_char+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
     fa4:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     fa8:	80 91 e8 00 	lds	r24, 0x00E8
     fac:	85 fd       	sbrc	r24, 5
     fae:	03 c0       	rjmp	.+6      	; 0xfb6 <m_usb_tx_char+0x74>
     fb0:	8a e3       	ldi	r24, 0x3A	; 58
     fb2:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     fb6:	85 e0       	ldi	r24, 0x05	; 5
     fb8:	80 93 75 01 	sts	0x0175, r24
	SREG = intr_state;
     fbc:	2f bf       	out	0x3f, r18	; 63
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
	return 0;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
}
     fc4:	08 95       	ret

00000fc6 <usb_serial_putchar_nowait>:


// transmit a character, but do not wait if the buffer is full,
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
     fc6:	28 2f       	mov	r18, r24
	uint8_t intr_state;

	if (!usb_configuration) return -1;
     fc8:	80 91 73 01 	lds	r24, 0x0173
     fcc:	88 23       	and	r24, r24
     fce:	51 f0       	breq	.+20     	; 0xfe4 <usb_serial_putchar_nowait+0x1e>
	intr_state = SREG;
     fd0:	9f b7       	in	r25, 0x3f	; 63
	cli();
     fd2:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     fda:	80 91 e8 00 	lds	r24, 0x00E8
     fde:	85 fd       	sbrc	r24, 5
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <usb_serial_putchar_nowait+0x22>
		// buffer is full
		SREG = intr_state;
     fe2:	9f bf       	out	0x3f, r25	; 63
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	08 95       	ret
		return -1;
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     fe8:	20 93 f1 00 	sts	0x00F1, r18
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     fec:	80 91 e8 00 	lds	r24, 0x00E8
     ff0:	85 fd       	sbrc	r24, 5
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <usb_serial_putchar_nowait+0x34>
     ff4:	8a e3       	ldi	r24, 0x3A	; 58
     ff6:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     ffa:	85 e0       	ldi	r24, 0x05	; 5
     ffc:	80 93 75 01 	sts	0x0175, r24
	SREG = intr_state;
    1000:	9f bf       	out	0x3f, r25	; 63
    1002:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    1004:	08 95       	ret

00001006 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    100c:	80 91 73 01 	lds	r24, 0x0173
    1010:	88 23       	and	r24, r24
    1012:	09 f4       	brne	.+2      	; 0x1016 <usb_serial_write+0x10>
    1014:	1c c1       	rjmp	.+568    	; 0x124e <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    1016:	3f b7       	in	r19, 0x3f	; 63
	cli();
    1018:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    1020:	80 91 76 01 	lds	r24, 0x0176
    1024:	88 23       	and	r24, r24
    1026:	09 f4       	brne	.+2      	; 0x102a <usb_serial_write+0x24>
    1028:	07 c1       	rjmp	.+526    	; 0x1238 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
    102a:	80 91 e8 00 	lds	r24, 0x00E8
    102e:	85 fd       	sbrc	r24, 5
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <usb_serial_write+0x30>
			SREG = intr_state;
    1032:	3f bf       	out	0x3f, r19	; 63
    1034:	0c c1       	rjmp	.+536    	; 0x124e <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
    1036:	10 92 76 01 	sts	0x0176, r1
    103a:	fe c0       	rjmp	.+508    	; 0x1238 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
    103c:	90 91 e4 00 	lds	r25, 0x00E4
    1040:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
    1042:	80 91 e8 00 	lds	r24, 0x00E8
    1046:	85 fd       	sbrc	r24, 5
    1048:	13 c0       	rjmp	.+38     	; 0x1070 <usb_serial_write+0x6a>
			SREG = intr_state;
    104a:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
    104c:	80 91 e4 00 	lds	r24, 0x00E4
    1050:	89 17       	cp	r24, r25
    1052:	21 f4       	brne	.+8      	; 0x105c <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 76 01 	sts	0x0176, r24
    105a:	f9 c0       	rjmp	.+498    	; 0x124e <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
    105c:	80 91 73 01 	lds	r24, 0x0173
    1060:	88 23       	and	r24, r24
    1062:	09 f4       	brne	.+2      	; 0x1066 <usb_serial_write+0x60>
    1064:	f4 c0       	rjmp	.+488    	; 0x124e <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
    1066:	3f b7       	in	r19, 0x3f	; 63
			cli();
    1068:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
    106a:	50 93 e9 00 	sts	0x00E9, r21
    106e:	e9 cf       	rjmp	.-46     	; 0x1042 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    1070:	80 91 f2 00 	lds	r24, 0x00F2
    1074:	2a 2f       	mov	r18, r26
    1076:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
    1078:	82 2f       	mov	r24, r18
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	68 17       	cp	r22, r24
    107e:	79 07       	cpc	r23, r25
    1080:	08 f4       	brcc	.+2      	; 0x1084 <usb_serial_write+0x7e>
    1082:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
    1084:	82 2f       	mov	r24, r18
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	81 34       	cpi	r24, 0x41	; 65
    108a:	91 05       	cpc	r25, r1
    108c:	08 f0       	brcs	.+2      	; 0x1090 <usb_serial_write+0x8a>
    108e:	c6 c0       	rjmp	.+396    	; 0x121c <usb_serial_write+0x216>
    1090:	8a 5a       	subi	r24, 0xAA	; 170
    1092:	9f 4f       	sbci	r25, 0xFF	; 255
    1094:	fc 01       	movw	r30, r24
    1096:	ee 0f       	add	r30, r30
    1098:	ff 1f       	adc	r31, r31
    109a:	05 90       	lpm	r0, Z+
    109c:	f4 91       	lpm	r31, Z+
    109e:	e0 2d       	mov	r30, r0
    10a0:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
    10a2:	89 91       	ld	r24, Y+
    10a4:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
    10a8:	89 91       	ld	r24, Y+
    10aa:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
    10ae:	89 91       	ld	r24, Y+
    10b0:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
    10b4:	89 91       	ld	r24, Y+
    10b6:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
    10ba:	89 91       	ld	r24, Y+
    10bc:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
    10c0:	89 91       	ld	r24, Y+
    10c2:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
    10c6:	89 91       	ld	r24, Y+
    10c8:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
    10cc:	89 91       	ld	r24, Y+
    10ce:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
    10d2:	89 91       	ld	r24, Y+
    10d4:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
    10d8:	89 91       	ld	r24, Y+
    10da:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
    10de:	89 91       	ld	r24, Y+
    10e0:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
    10e4:	89 91       	ld	r24, Y+
    10e6:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
    10ea:	89 91       	ld	r24, Y+
    10ec:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
    10f0:	89 91       	ld	r24, Y+
    10f2:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
    10f6:	89 91       	ld	r24, Y+
    10f8:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
    10fc:	89 91       	ld	r24, Y+
    10fe:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
    1102:	89 91       	ld	r24, Y+
    1104:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
    1108:	89 91       	ld	r24, Y+
    110a:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
    110e:	89 91       	ld	r24, Y+
    1110:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
    1114:	89 91       	ld	r24, Y+
    1116:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
    111a:	89 91       	ld	r24, Y+
    111c:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
    1120:	89 91       	ld	r24, Y+
    1122:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
    1126:	89 91       	ld	r24, Y+
    1128:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
    112c:	89 91       	ld	r24, Y+
    112e:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
    1132:	89 91       	ld	r24, Y+
    1134:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
    1138:	89 91       	ld	r24, Y+
    113a:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
    113e:	89 91       	ld	r24, Y+
    1140:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
    1144:	89 91       	ld	r24, Y+
    1146:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
    114a:	89 91       	ld	r24, Y+
    114c:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
    1150:	89 91       	ld	r24, Y+
    1152:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
    1156:	89 91       	ld	r24, Y+
    1158:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
    115c:	89 91       	ld	r24, Y+
    115e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
    1162:	89 91       	ld	r24, Y+
    1164:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
    1168:	89 91       	ld	r24, Y+
    116a:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
    116e:	89 91       	ld	r24, Y+
    1170:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
    1174:	89 91       	ld	r24, Y+
    1176:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
    117a:	89 91       	ld	r24, Y+
    117c:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
    1180:	89 91       	ld	r24, Y+
    1182:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
    1186:	89 91       	ld	r24, Y+
    1188:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
    118c:	89 91       	ld	r24, Y+
    118e:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
    1192:	89 91       	ld	r24, Y+
    1194:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
    1198:	89 91       	ld	r24, Y+
    119a:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
    119e:	89 91       	ld	r24, Y+
    11a0:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
    11a4:	89 91       	ld	r24, Y+
    11a6:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
    11aa:	89 91       	ld	r24, Y+
    11ac:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
    11b0:	89 91       	ld	r24, Y+
    11b2:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
    11b6:	89 91       	ld	r24, Y+
    11b8:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
    11bc:	89 91       	ld	r24, Y+
    11be:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    11c2:	89 91       	ld	r24, Y+
    11c4:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
    11c8:	89 91       	ld	r24, Y+
    11ca:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
    11ce:	89 91       	ld	r24, Y+
    11d0:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
    11d4:	89 91       	ld	r24, Y+
    11d6:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
    11da:	89 91       	ld	r24, Y+
    11dc:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
    11e0:	89 91       	ld	r24, Y+
    11e2:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
    11e6:	89 91       	ld	r24, Y+
    11e8:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
    11ec:	89 91       	ld	r24, Y+
    11ee:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
    11f2:	89 91       	ld	r24, Y+
    11f4:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
    11f8:	89 91       	ld	r24, Y+
    11fa:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
    11fe:	89 91       	ld	r24, Y+
    1200:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
    1204:	89 91       	ld	r24, Y+
    1206:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
    120a:	89 91       	ld	r24, Y+
    120c:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
    1210:	89 91       	ld	r24, Y+
    1212:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
    1216:	89 91       	ld	r24, Y+
    1218:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
    121c:	89 91       	ld	r24, Y+
    121e:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1222:	80 91 e8 00 	lds	r24, 0x00E8
    1226:	85 fd       	sbrc	r24, 5
    1228:	02 c0       	rjmp	.+4      	; 0x122e <usb_serial_write+0x228>
    122a:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
    122e:	62 1b       	sub	r22, r18
    1230:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1232:	40 93 75 01 	sts	0x0175, r20
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
    1238:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    123a:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    123c:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    123e:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    1240:	61 15       	cp	r22, r1
    1242:	71 05       	cpc	r23, r1
    1244:	09 f0       	breq	.+2      	; 0x1248 <usb_serial_write+0x242>
    1246:	fa ce       	rjmp	.-524    	; 0x103c <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    1248:	3f bf       	out	0x3f, r19	; 63
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <usb_serial_write+0x24a>
	return 0;
    124e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <m_usb_tx_push>:
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
	uint8_t intr_state;

	intr_state = SREG;
    1256:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1258:	f8 94       	cli
	if (transmit_flush_timer) {
    125a:	80 91 75 01 	lds	r24, 0x0175
    125e:	88 23       	and	r24, r24
    1260:	41 f0       	breq	.+16     	; 0x1272 <m_usb_tx_push+0x1c>
		UENUM = CDC_TX_ENDPOINT;
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	80 93 e9 00 	sts	0x00E9, r24
		UEINTX = 0x3A;
    1268:	8a e3       	ldi	r24, 0x3A	; 58
    126a:	80 93 e8 00 	sts	0x00E8, r24
		transmit_flush_timer = 0;
    126e:	10 92 75 01 	sts	0x0175, r1
	}
	SREG = intr_state;
    1272:	9f bf       	out	0x3f, r25	; 63
}
    1274:	08 95       	ret

00001276 <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
    1276:	60 91 0c 01 	lds	r22, 0x010C
    127a:	70 91 0d 01 	lds	r23, 0x010D
	return *(uint32_t *)cdc_line_coding;
}
    127e:	80 91 0e 01 	lds	r24, 0x010E
    1282:	90 91 0f 01 	lds	r25, 0x010F
    1286:	08 95       	ret

00001288 <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
	return cdc_line_coding[4];
}
    1288:	80 91 10 01 	lds	r24, 0x0110
    128c:	08 95       	ret

0000128e <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
	return cdc_line_coding[5];
}
    128e:	80 91 11 01 	lds	r24, 0x0111
    1292:	08 95       	ret

00001294 <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
	return cdc_line_coding[6];
}
    1294:	80 91 12 01 	lds	r24, 0x0112
    1298:	08 95       	ret

0000129a <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
    129a:	80 91 74 01 	lds	r24, 0x0174
    129e:	08 95       	ret

000012a0 <usb_serial_set_control>:
// lost because you weren't listening at the right time, like it
// would in real serial communication.
// TODO: this function is untested.  Does it work?  Please email
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
    12a0:	38 2f       	mov	r19, r24
	uint8_t intr_state;

	intr_state = SREG;
    12a2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    12a4:	f8 94       	cli
	if (!usb_configuration) {
    12a6:	80 91 73 01 	lds	r24, 0x0173
    12aa:	88 23       	and	r24, r24
    12ac:	39 f0       	breq	.+14     	; 0x12bc <usb_serial_set_control+0x1c>
		// we're not enumerated/configured
		SREG = intr_state;
		return -1;
	}

	UENUM = CDC_ACM_ENDPOINT;
    12ae:	22 e0       	ldi	r18, 0x02	; 2
    12b0:	20 93 e9 00 	sts	0x00E9, r18
	if (!(UEINTX & (1<<RWAL))) {
    12b4:	80 91 e8 00 	lds	r24, 0x00E8
    12b8:	85 fd       	sbrc	r24, 5
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <usb_serial_set_control+0x22>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
    12bc:	9f bf       	out	0x3f, r25	; 63
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	08 95       	ret
		return -1;
	}
	UEDATX = 0xA1;
    12c2:	81 ea       	ldi	r24, 0xA1	; 161
    12c4:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0x20;
    12c8:	80 e2       	ldi	r24, 0x20	; 32
    12ca:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
    12ce:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
    12d2:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
    12d6:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
    12da:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 2;
    12de:	20 93 f1 00 	sts	0x00F1, r18
	UEDATX = 0;
    12e2:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = signals;
    12e6:	30 93 f1 00 	sts	0x00F1, r19
	UEDATX = 0;
    12ea:	10 92 f1 00 	sts	0x00F1, r1
	UEINTX = 0x3A;
    12ee:	8a e3       	ldi	r24, 0x3A	; 58
    12f0:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    12f4:	9f bf       	out	0x3f, r25	; 63
    12f6:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    12f8:	08 95       	ret

000012fa <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	8f 93       	push	r24
    1306:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    1308:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    130c:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    1310:	98 2f       	mov	r25, r24
    1312:	83 ff       	sbrs	r24, 3
    1314:	11 c0       	rjmp	.+34     	; 0x1338 <__vector_10+0x3e>
		UENUM = 0;
    1316:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    1320:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1324:	82 e1       	ldi	r24, 0x12	; 18
    1326:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    132a:	88 e0       	ldi	r24, 0x08	; 8
    132c:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    1330:	10 92 73 01 	sts	0x0173, r1
		cdc_line_rtsdtr = 0;
    1334:	10 92 74 01 	sts	0x0174, r1
        }
	if (intbits & (1<<SOFI)) {
    1338:	92 ff       	sbrs	r25, 2
    133a:	13 c0       	rjmp	.+38     	; 0x1362 <__vector_10+0x68>
		if (usb_configuration) {
    133c:	80 91 73 01 	lds	r24, 0x0173
    1340:	88 23       	and	r24, r24
    1342:	79 f0       	breq	.+30     	; 0x1362 <__vector_10+0x68>
			t = transmit_flush_timer;
    1344:	80 91 75 01 	lds	r24, 0x0175
			if (t) {
    1348:	88 23       	and	r24, r24
    134a:	59 f0       	breq	.+22     	; 0x1362 <__vector_10+0x68>
				transmit_flush_timer = --t;
    134c:	81 50       	subi	r24, 0x01	; 1
    134e:	80 93 75 01 	sts	0x0175, r24
				if (!t) {
    1352:	88 23       	and	r24, r24
    1354:	31 f4       	brne	.+12     	; 0x1362 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
    1356:	84 e0       	ldi	r24, 0x04	; 4
    1358:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    135c:	8a e3       	ldi	r24, 0x3A	; 58
    135e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1396:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    139a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    139e:	83 ff       	sbrs	r24, 3
    13a0:	3c c1       	rjmp	.+632    	; 0x161a <__vector_11+0x2aa>
                bmRequestType = UEDATX;
    13a2:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    13a6:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    13aa:	80 91 f1 00 	lds	r24, 0x00F1
    13ae:	68 2f       	mov	r22, r24
    13b0:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    13b2:	20 91 f1 00 	lds	r18, 0x00F1
    13b6:	92 2f       	mov	r25, r18
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	68 2b       	or	r22, r24
    13bc:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    13be:	80 91 f1 00 	lds	r24, 0x00F1
    13c2:	a8 2f       	mov	r26, r24
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    13c6:	20 91 f1 00 	lds	r18, 0x00F1
    13ca:	92 2f       	mov	r25, r18
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	a8 2b       	or	r26, r24
    13d0:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    13d2:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    13d6:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    13da:	82 ef       	ldi	r24, 0xF2	; 242
    13dc:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    13e0:	36 30       	cpi	r19, 0x06	; 6
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <__vector_11+0x76>
    13e4:	5a c0       	rjmp	.+180    	; 0x149a <__vector_11+0x12a>
    13e6:	20 e8       	ldi	r18, 0x80	; 128
    13e8:	31 e0       	ldi	r19, 0x01	; 1
    13ea:	a9 01       	movw	r20, r18
    13ec:	45 50       	subi	r20, 0x05	; 5
    13ee:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    13f0:	f9 01       	movw	r30, r18
    13f2:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    13f4:	85 91       	lpm	r24, Z+
    13f6:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    13f8:	86 17       	cp	r24, r22
    13fa:	97 07       	cpc	r25, r23
    13fc:	01 f5       	brne	.+64     	; 0x143e <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    13fe:	fa 01       	movw	r30, r20
    1400:	85 91       	lpm	r24, Z+
    1402:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    1404:	8a 17       	cp	r24, r26
    1406:	9b 07       	cpc	r25, r27
    1408:	d1 f4       	brne	.+52     	; 0x143e <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    140a:	9a 01       	movw	r18, r20
    140c:	2e 5f       	subi	r18, 0xFE	; 254
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1410:	f9 01       	movw	r30, r18
    1412:	65 91       	lpm	r22, Z+
    1414:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    1416:	2e 5f       	subi	r18, 0xFE	; 254
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	f9 01       	movw	r30, r18
    141c:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    141e:	21 2f       	mov	r18, r17
    1420:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1422:	90 2f       	mov	r25, r16
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	28 2b       	or	r18, r24
    1428:	39 2b       	or	r19, r25
    142a:	2f 3f       	cpi	r18, 0xFF	; 255
    142c:	31 05       	cpc	r19, r1
    142e:	19 f0       	breq	.+6      	; 0x1436 <__vector_11+0xc6>
    1430:	10 f0       	brcs	.+4      	; 0x1436 <__vector_11+0xc6>
    1432:	2f ef       	ldi	r18, 0xFF	; 255
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	24 17       	cp	r18, r20
    1438:	58 f4       	brcc	.+22     	; 0x1450 <__vector_11+0xe0>
    143a:	42 2f       	mov	r20, r18
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <__vector_11+0xe0>
    143e:	29 5f       	subi	r18, 0xF9	; 249
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	49 5f       	subi	r20, 0xF9	; 249
    1444:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	2a 3a       	cpi	r18, 0xAA	; 170
    144a:	3f 07       	cpc	r19, r31
    144c:	89 f6       	brne	.-94     	; 0x13f0 <__vector_11+0x80>
    144e:	e5 c0       	rjmp	.+458    	; 0x161a <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1450:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1452:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	c9 01       	movw	r24, r18
    145c:	85 70       	andi	r24, 0x05	; 5
    145e:	90 70       	andi	r25, 0x00	; 0
    1460:	89 2b       	or	r24, r25
    1462:	b9 f3       	breq	.-18     	; 0x1452 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    1464:	22 fd       	sbrc	r18, 2
    1466:	dc c0       	rjmp	.+440    	; 0x1620 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1468:	34 2f       	mov	r19, r20
    146a:	41 31       	cpi	r20, 0x11	; 17
    146c:	08 f0       	brcs	.+2      	; 0x1470 <__vector_11+0x100>
    146e:	30 e1       	ldi	r19, 0x10	; 16
    1470:	23 2f       	mov	r18, r19
    1472:	cb 01       	movw	r24, r22
    1474:	06 c0       	rjmp	.+12     	; 0x1482 <__vector_11+0x112>
				for (i = n; i; i--) {
    1476:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	e4 91       	lpm	r30, Z+
    147c:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	22 23       	and	r18, r18
    1484:	c1 f7       	brne	.-16     	; 0x1476 <__vector_11+0x106>
    1486:	63 0f       	add	r22, r19
    1488:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    148a:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    148c:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1490:	44 23       	and	r20, r20
    1492:	f9 f6       	brne	.-66     	; 0x1452 <__vector_11+0xe2>
    1494:	30 31       	cpi	r19, 0x10	; 16
    1496:	e9 f2       	breq	.-70     	; 0x1452 <__vector_11+0xe2>
    1498:	c3 c0       	rjmp	.+390    	; 0x1620 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    149a:	35 30       	cpi	r19, 0x05	; 5
    149c:	61 f4       	brne	.+24     	; 0x14b6 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    149e:	8e ef       	ldi	r24, 0xFE	; 254
    14a0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    14a4:	80 91 e8 00 	lds	r24, 0x00E8
    14a8:	80 ff       	sbrs	r24, 0
    14aa:	fc cf       	rjmp	.-8      	; 0x14a4 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    14ac:	86 2f       	mov	r24, r22
    14ae:	80 68       	ori	r24, 0x80	; 128
    14b0:	80 93 e3 00 	sts	0x00E3, r24
    14b4:	b5 c0       	rjmp	.+362    	; 0x1620 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    14b6:	39 30       	cpi	r19, 0x09	; 9
    14b8:	51 f5       	brne	.+84     	; 0x150e <__vector_11+0x19e>
    14ba:	44 23       	and	r20, r20
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__vector_11+0x150>
    14be:	ad c0       	rjmp	.+346    	; 0x161a <__vector_11+0x2aa>
			usb_configuration = wValue;
    14c0:	60 93 73 01 	sts	0x0173, r22
			cdc_line_rtsdtr = 0;
    14c4:	10 92 74 01 	sts	0x0174, r1
			transmit_flush_timer = 0;
    14c8:	10 92 75 01 	sts	0x0175, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    14cc:	8e ef       	ldi	r24, 0xFE	; 254
    14ce:	80 93 e8 00 	sts	0x00E8, r24
    14d2:	83 ea       	ldi	r24, 0xA3	; 163
    14d4:	91 e0       	ldi	r25, 0x01	; 1
    14d6:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    14d8:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    14dc:	fc 01       	movw	r30, r24
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	e4 91       	lpm	r30, Z+
				UECONX = en;
    14e2:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    14e6:	ee 23       	and	r30, r30
    14e8:	69 f0       	breq	.+26     	; 0x1504 <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
    14ea:	ac 01       	movw	r20, r24
    14ec:	4f 5f       	subi	r20, 0xFF	; 255
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	fc 01       	movw	r30, r24
    14f2:	84 91       	lpm	r24, Z+
    14f4:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    14f8:	ca 01       	movw	r24, r20
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	fa 01       	movw	r30, r20
    14fe:	34 91       	lpm	r19, Z+
    1500:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1504:	2f 5f       	subi	r18, 0xFF	; 255
    1506:	25 30       	cpi	r18, 0x05	; 5
    1508:	39 f7       	brne	.-50     	; 0x14d8 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    150a:	8e e1       	ldi	r24, 0x1E	; 30
    150c:	81 c0       	rjmp	.+258    	; 0x1610 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    150e:	38 30       	cpi	r19, 0x08	; 8
    1510:	61 f4       	brne	.+24     	; 0x152a <__vector_11+0x1ba>
    1512:	40 38       	cpi	r20, 0x80	; 128
    1514:	09 f0       	breq	.+2      	; 0x1518 <__vector_11+0x1a8>
    1516:	81 c0       	rjmp	.+258    	; 0x161a <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1518:	80 91 e8 00 	lds	r24, 0x00E8
    151c:	80 ff       	sbrs	r24, 0
    151e:	fc cf       	rjmp	.-8      	; 0x1518 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1520:	80 91 73 01 	lds	r24, 0x0173
    1524:	80 93 f1 00 	sts	0x00F1, r24
    1528:	50 c0       	rjmp	.+160    	; 0x15ca <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    152a:	31 32       	cpi	r19, 0x21	; 33
    152c:	89 f4       	brne	.+34     	; 0x1550 <__vector_11+0x1e0>
    152e:	41 3a       	cpi	r20, 0xA1	; 161
    1530:	09 f0       	breq	.+2      	; 0x1534 <__vector_11+0x1c4>
    1532:	73 c0       	rjmp	.+230    	; 0x161a <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1534:	80 91 e8 00 	lds	r24, 0x00E8
    1538:	80 ff       	sbrs	r24, 0
    153a:	fc cf       	rjmp	.-8      	; 0x1534 <__vector_11+0x1c4>
    153c:	ec e0       	ldi	r30, 0x0C	; 12
    153e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1540:	81 91       	ld	r24, Z+
    1542:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	e3 31       	cpi	r30, 0x13	; 19
    154a:	f8 07       	cpc	r31, r24
    154c:	c9 f7       	brne	.-14     	; 0x1540 <__vector_11+0x1d0>
    154e:	3d c0       	rjmp	.+122    	; 0x15ca <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1550:	30 32       	cpi	r19, 0x20	; 32
    1552:	a1 f4       	brne	.+40     	; 0x157c <__vector_11+0x20c>
    1554:	41 32       	cpi	r20, 0x21	; 33
    1556:	09 f0       	breq	.+2      	; 0x155a <__vector_11+0x1ea>
    1558:	60 c0       	rjmp	.+192    	; 0x161a <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    155a:	80 91 e8 00 	lds	r24, 0x00E8
    155e:	82 ff       	sbrs	r24, 2
    1560:	fc cf       	rjmp	.-8      	; 0x155a <__vector_11+0x1ea>
    1562:	ec e0       	ldi	r30, 0x0C	; 12
    1564:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1566:	80 91 f1 00 	lds	r24, 0x00F1
    156a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	e3 31       	cpi	r30, 0x13	; 19
    1570:	f8 07       	cpc	r31, r24
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1574:	8b ef       	ldi	r24, 0xFB	; 251
    1576:	80 93 e8 00 	sts	0x00E8, r24
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    157c:	32 32       	cpi	r19, 0x22	; 34
    157e:	51 f4       	brne	.+20     	; 0x1594 <__vector_11+0x224>
    1580:	41 32       	cpi	r20, 0x21	; 33
    1582:	09 f0       	breq	.+2      	; 0x1586 <__vector_11+0x216>
    1584:	4a c0       	rjmp	.+148    	; 0x161a <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    1586:	60 93 74 01 	sts	0x0174, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    158a:	80 91 e8 00 	lds	r24, 0x00E8
    158e:	80 ff       	sbrs	r24, 0
    1590:	fc cf       	rjmp	.-8      	; 0x158a <__vector_11+0x21a>
    1592:	1b c0       	rjmp	.+54     	; 0x15ca <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1594:	33 23       	and	r19, r19
    1596:	e9 f4       	brne	.+58     	; 0x15d2 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1598:	80 91 e8 00 	lds	r24, 0x00E8
    159c:	80 ff       	sbrs	r24, 0
    159e:	fc cf       	rjmp	.-8      	; 0x1598 <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    15a0:	42 38       	cpi	r20, 0x82	; 130
    15a2:	11 f0       	breq	.+4      	; 0x15a8 <__vector_11+0x238>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0d c0       	rjmp	.+26     	; 0x15c2 <__vector_11+0x252>
				UENUM = wIndex;
    15a8:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    15ac:	80 91 eb 00 	lds	r24, 0x00EB
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	25 e0       	ldi	r18, 0x05	; 5
    15b4:	96 95       	lsr	r25
    15b6:	87 95       	ror	r24
    15b8:	2a 95       	dec	r18
    15ba:	e1 f7       	brne	.-8      	; 0x15b4 <__vector_11+0x244>
    15bc:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    15be:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    15c2:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    15c6:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    15ca:	8e ef       	ldi	r24, 0xFE	; 254
    15cc:	80 93 e8 00 	sts	0x00E8, r24
    15d0:	27 c0       	rjmp	.+78     	; 0x1620 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    15d2:	31 30       	cpi	r19, 0x01	; 1
    15d4:	11 f0       	breq	.+4      	; 0x15da <__vector_11+0x26a>
    15d6:	33 30       	cpi	r19, 0x03	; 3
    15d8:	01 f5       	brne	.+64     	; 0x161a <__vector_11+0x2aa>
    15da:	42 30       	cpi	r20, 0x02	; 2
    15dc:	f1 f4       	brne	.+60     	; 0x161a <__vector_11+0x2aa>
    15de:	67 2b       	or	r22, r23
    15e0:	e1 f4       	brne	.+56     	; 0x161a <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    15e2:	2a 2f       	mov	r18, r26
    15e4:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    15e6:	82 2f       	mov	r24, r18
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	b0 f4       	brcc	.+44     	; 0x161a <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    15ee:	8e ef       	ldi	r24, 0xFE	; 254
    15f0:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    15f4:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    15f8:	33 30       	cpi	r19, 0x03	; 3
    15fa:	79 f0       	breq	.+30     	; 0x161a <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    15fc:	89 e1       	ldi	r24, 0x19	; 25
    15fe:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <__vector_11+0x29c>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	2a 95       	dec	r18
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <__vector_11+0x298>
    1610:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    1614:	10 92 ea 00 	sts	0x00EA, r1
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    161a:	81 e2       	ldi	r24, 0x21	; 33
    161c:	80 93 eb 00 	sts	0x00EB, r24
}
    1620:	ff 91       	pop	r31
    1622:	ef 91       	pop	r30
    1624:	bf 91       	pop	r27
    1626:	af 91       	pop	r26
    1628:	9f 91       	pop	r25
    162a:	8f 91       	pop	r24
    162c:	7f 91       	pop	r23
    162e:	6f 91       	pop	r22
    1630:	5f 91       	pop	r21
    1632:	4f 91       	pop	r20
    1634:	3f 91       	pop	r19
    1636:	2f 91       	pop	r18
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    1646:	1f 93       	push	r17
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24
    164e:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1650:	21 96       	adiw	r28, 0x01	; 1
    1652:	14 91       	lpm	r17, Z+
		if (!c) break;
    1654:	11 23       	and	r17, r17
    1656:	49 f0       	breq	.+18     	; 0x166a <print_P+0x24>
		if (c == '\n') usb_tx_char('\r');
    1658:	1a 30       	cpi	r17, 0x0A	; 10
    165a:	19 f4       	brne	.+6      	; 0x1662 <print_P+0x1c>
    165c:	8d e0       	ldi	r24, 0x0D	; 13
    165e:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>
		usb_tx_char(c);
    1662:	81 2f       	mov	r24, r17
    1664:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>
    1668:	f2 cf       	rjmp	.-28     	; 0x164e <print_P+0x8>
	}
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	08 95       	ret

00001672 <phex1>:

void phex1(unsigned char c)
{
    1672:	98 2f       	mov	r25, r24
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
    1674:	8a 30       	cpi	r24, 0x0A	; 10
    1676:	10 f0       	brcs	.+4      	; 0x167c <phex1+0xa>
    1678:	87 e3       	ldi	r24, 0x37	; 55
    167a:	01 c0       	rjmp	.+2      	; 0x167e <phex1+0xc>
    167c:	80 e3       	ldi	r24, 0x30	; 48
    167e:	89 0f       	add	r24, r25
    1680:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>
}
    1684:	08 95       	ret

00001686 <phex>:

void phex(unsigned char c)
{
    1686:	1f 93       	push	r17
    1688:	18 2f       	mov	r17, r24
	phex1(c >> 4);
    168a:	82 95       	swap	r24
    168c:	8f 70       	andi	r24, 0x0F	; 15
    168e:	0e 94 39 0b 	call	0x1672	; 0x1672 <phex1>
	phex1(c & 15);
    1692:	81 2f       	mov	r24, r17
    1694:	8f 70       	andi	r24, 0x0F	; 15
    1696:	0e 94 39 0b 	call	0x1672	; 0x1672 <phex1>
}
    169a:	1f 91       	pop	r17
    169c:	08 95       	ret

0000169e <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
    169e:	1f 93       	push	r17
    16a0:	18 2f       	mov	r17, r24
	phex(i >> 8);
    16a2:	89 2f       	mov	r24, r25
    16a4:	0e 94 43 0b 	call	0x1686	; 0x1686 <phex>
	phex(i);
    16a8:	81 2f       	mov	r24, r17
    16aa:	0e 94 43 0b 	call	0x1686	; 0x1686 <phex>
}
    16ae:	1f 91       	pop	r17
    16b0:	08 95       	ret

000016b2 <m_usb_tx_hex8>:

void m_usb_tx_hex8(unsigned char i)
{
	phex(i);
    16b2:	0e 94 43 0b 	call	0x1686	; 0x1686 <phex>
}
    16b6:	08 95       	ret

000016b8 <m_usb_tx_ulong>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_ulong(unsigned long i)
{
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	2a 97       	sbiw	r28, 0x0a	; 10
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
    16d4:	8e 01       	movw	r16, r28
    16d6:	0f 5f       	subi	r16, 0xFF	; 255
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	2a e0       	ldi	r18, 0x0A	; 10
    16dc:	f8 01       	movw	r30, r16
    16de:	11 92       	st	Z+, r1
    16e0:	2a 95       	dec	r18
    16e2:	e9 f7       	brne	.-6      	; 0x16de <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
    16e4:	a8 01       	movw	r20, r16
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <ultoa>
	for(i=0;i<10;i++){
    16ee:	3b e0       	ldi	r19, 0x0B	; 11
    16f0:	e3 2e       	mov	r14, r19
    16f2:	f1 2c       	mov	r15, r1
    16f4:	ec 0e       	add	r14, r28
    16f6:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    16f8:	f8 01       	movw	r30, r16
    16fa:	81 91       	ld	r24, Z+
    16fc:	8f 01       	movw	r16, r30
    16fe:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
    1702:	0e 15       	cp	r16, r14
    1704:	1f 05       	cpc	r17, r15
    1706:	c1 f7       	brne	.-16     	; 0x16f8 <m_usb_tx_ulong+0x40>
		m_usb_tx_char(string[i]);
	}
}
    1708:	2a 96       	adiw	r28, 0x0a	; 10
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	08 95       	ret

00001722 <m_usb_tx_long>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_long(long i)
{
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	2b 97       	sbiw	r28, 0x0b	; 11
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    173e:	8e 01       	movw	r16, r28
    1740:	0f 5f       	subi	r16, 0xFF	; 255
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	2b e0       	ldi	r18, 0x0B	; 11
    1746:	f8 01       	movw	r30, r16
    1748:	11 92       	st	Z+, r1
    174a:	2a 95       	dec	r18
    174c:	e9 f7       	brne	.-6      	; 0x1748 <m_usb_tx_long+0x26>
	ltoa(i,string,10);
    174e:	a8 01       	movw	r20, r16
    1750:	2a e0       	ldi	r18, 0x0A	; 10
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <ltoa>
	for(i=0;i<11;i++){
    1758:	4c e0       	ldi	r20, 0x0C	; 12
    175a:	e4 2e       	mov	r14, r20
    175c:	f1 2c       	mov	r15, r1
    175e:	ec 0e       	add	r14, r28
    1760:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    1762:	f8 01       	movw	r30, r16
    1764:	81 91       	ld	r24, Z+
    1766:	8f 01       	movw	r16, r30
    1768:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    176c:	0e 15       	cp	r16, r14
    176e:	1f 05       	cpc	r17, r15
    1770:	c1 f7       	brne	.-16     	; 0x1762 <m_usb_tx_long+0x40>
		m_usb_tx_char(string[i]);
	}
}
    1772:	2b 96       	adiw	r28, 0x0b	; 11
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	08 95       	ret

0000178c <m_usb_tx_uint>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_uint(unsigned int i)
{
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <m_usb_tx_uint+0xe>
    179a:	00 d0       	rcall	.+0      	; 0x179c <m_usb_tx_uint+0x10>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
	char string[5] = {0,0,0,0,0};
    17a2:	8e 01       	movw	r16, r28
    17a4:	0f 5f       	subi	r16, 0xFF	; 255
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	25 e0       	ldi	r18, 0x05	; 5
    17aa:	f8 01       	movw	r30, r16
    17ac:	11 92       	st	Z+, r1
    17ae:	2a 95       	dec	r18
    17b0:	e9 f7       	brne	.-6      	; 0x17ac <m_usb_tx_uint+0x20>
	utoa(i,string,10);
    17b2:	b8 01       	movw	r22, r16
    17b4:	4a e0       	ldi	r20, 0x0A	; 10
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <utoa>
	for(i=0;i<5;i++){
    17bc:	56 e0       	ldi	r21, 0x06	; 6
    17be:	e5 2e       	mov	r14, r21
    17c0:	f1 2c       	mov	r15, r1
    17c2:	ec 0e       	add	r14, r28
    17c4:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    17c6:	f8 01       	movw	r30, r16
    17c8:	81 91       	ld	r24, Z+
    17ca:	8f 01       	movw	r16, r30
    17cc:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    17d0:	0e 15       	cp	r16, r14
    17d2:	1f 05       	cpc	r17, r15
    17d4:	c1 f7       	brne	.-16     	; 0x17c6 <m_usb_tx_uint+0x3a>
		m_usb_tx_char(string[i]);
	}
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	08 95       	ret

000017ee <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <m_usb_tx_int+0xe>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <m_usb_tx_int+0x10>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <m_usb_tx_int+0x12>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
	char string[6] = {0,0,0,0,0,0};
    1804:	8e 01       	movw	r16, r28
    1806:	0f 5f       	subi	r16, 0xFF	; 255
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	26 e0       	ldi	r18, 0x06	; 6
    180c:	f8 01       	movw	r30, r16
    180e:	11 92       	st	Z+, r1
    1810:	2a 95       	dec	r18
    1812:	e9 f7       	brne	.-6      	; 0x180e <m_usb_tx_int+0x20>
	itoa(i,string,10);
    1814:	b8 01       	movw	r22, r16
    1816:	4a e0       	ldi	r20, 0x0A	; 10
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <itoa>
	for(i=0;i<6;i++){
    181e:	67 e0       	ldi	r22, 0x07	; 7
    1820:	e6 2e       	mov	r14, r22
    1822:	f1 2c       	mov	r15, r1
    1824:	ec 0e       	add	r14, r28
    1826:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    1828:	f8 01       	movw	r30, r16
    182a:	81 91       	ld	r24, Z+
    182c:	8f 01       	movw	r16, r30
    182e:	0e 94 a1 07 	call	0xf42	; 0xf42 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[6] = {0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<6;i++){
    1832:	0e 15       	cp	r16, r14
    1834:	1f 05       	cpc	r17, r15
    1836:	c1 f7       	brne	.-16     	; 0x1828 <m_usb_tx_int+0x3a>
		m_usb_tx_char(string[i]);
	}
}
    1838:	26 96       	adiw	r28, 0x06	; 6
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret

00001852 <set_position>:

}

void set_position(int x, int y)
{
	x_init = x;
    1852:	90 93 84 01 	sts	0x0184, r25
    1856:	80 93 83 01 	sts	0x0183, r24
	y_init = y;
    185a:	70 93 86 01 	sts	0x0186, r23
    185e:	60 93 85 01 	sts	0x0185, r22
}
    1862:	08 95       	ret

00001864 <min3>:

double min3(double a, double b, double c)
{
    1864:	2f 92       	push	r2
    1866:	3f 92       	push	r3
    1868:	4f 92       	push	r4
    186a:	5f 92       	push	r5
    186c:	6f 92       	push	r6
    186e:	7f 92       	push	r7
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	96 2e       	mov	r9, r22
    1886:	87 2e       	mov	r8, r23
    1888:	78 2e       	mov	r7, r24
    188a:	69 2e       	mov	r6, r25
    188c:	d2 2e       	mov	r13, r18
    188e:	c3 2e       	mov	r12, r19
    1890:	b4 2e       	mov	r11, r20
    1892:	a5 2e       	mov	r10, r21
    1894:	5e 2c       	mov	r5, r14
    1896:	4f 2c       	mov	r4, r15
    1898:	30 2e       	mov	r3, r16
    189a:	21 2e       	mov	r2, r17
	double ret = a;
	if(b < ret)
    189c:	62 2f       	mov	r22, r18
    189e:	73 2f       	mov	r23, r19
    18a0:	84 2f       	mov	r24, r20
    18a2:	95 2f       	mov	r25, r21
    18a4:	29 2d       	mov	r18, r9
    18a6:	38 2d       	mov	r19, r8
    18a8:	47 2d       	mov	r20, r7
    18aa:	56 2d       	mov	r21, r6
    18ac:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <min3+0x5a>
    18b4:	ed 2c       	mov	r14, r13
    18b6:	fc 2c       	mov	r15, r12
    18b8:	0b 2d       	mov	r16, r11
    18ba:	1a 2d       	mov	r17, r10
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <min3+0x62>
    18be:	e9 2c       	mov	r14, r9
    18c0:	f8 2c       	mov	r15, r8
    18c2:	07 2d       	mov	r16, r7
    18c4:	16 2d       	mov	r17, r6
		ret = b;
	if (c < ret)
    18c6:	65 2d       	mov	r22, r5
    18c8:	74 2d       	mov	r23, r4
    18ca:	83 2d       	mov	r24, r3
    18cc:	92 2d       	mov	r25, r2
    18ce:	97 01       	movw	r18, r14
    18d0:	a8 01       	movw	r20, r16
    18d2:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	24 f4       	brge	.+8      	; 0x18e2 <min3+0x7e>
    18da:	e5 2c       	mov	r14, r5
    18dc:	f4 2c       	mov	r15, r4
    18de:	03 2d       	mov	r16, r3
    18e0:	12 2d       	mov	r17, r2
		ret = c;
	return ret;
}
    18e2:	b7 01       	movw	r22, r14
    18e4:	c8 01       	movw	r24, r16
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	7f 90       	pop	r7
    18fc:	6f 90       	pop	r6
    18fe:	5f 90       	pop	r5
    1900:	4f 90       	pop	r4
    1902:	3f 90       	pop	r3
    1904:	2f 90       	pop	r2
    1906:	08 95       	ret

00001908 <min4>:

double min4(double a, double b, double c, double d)
{
    1908:	2f 92       	push	r2
    190a:	3f 92       	push	r3
    190c:	4f 92       	push	r4
    190e:	5f 92       	push	r5
    1910:	6f 92       	push	r6
    1912:	7f 92       	push	r7
    1914:	8f 92       	push	r8
    1916:	9f 92       	push	r9
    1918:	af 92       	push	r10
    191a:	bf 92       	push	r11
    191c:	cf 92       	push	r12
    191e:	df 92       	push	r13
    1920:	ef 92       	push	r14
    1922:	ff 92       	push	r15
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <min4+0x26>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <min4+0x28>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	56 2e       	mov	r5, r22
    1936:	47 2e       	mov	r4, r23
    1938:	38 2e       	mov	r3, r24
    193a:	29 2e       	mov	r2, r25
    193c:	92 2e       	mov	r9, r18
    193e:	83 2e       	mov	r8, r19
    1940:	74 2e       	mov	r7, r20
    1942:	65 2e       	mov	r6, r21
    1944:	e9 82       	std	Y+1, r14	; 0x01
    1946:	fa 82       	std	Y+2, r15	; 0x02
    1948:	0b 83       	std	Y+3, r16	; 0x03
    194a:	1c 83       	std	Y+4, r17	; 0x04
	double ret = a;
	if(b < ret)
    194c:	62 2f       	mov	r22, r18
    194e:	73 2f       	mov	r23, r19
    1950:	84 2f       	mov	r24, r20
    1952:	95 2f       	mov	r25, r21
    1954:	25 2d       	mov	r18, r5
    1956:	34 2d       	mov	r19, r4
    1958:	43 2d       	mov	r20, r3
    195a:	52 2d       	mov	r21, r2
    195c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    1960:	88 23       	and	r24, r24
    1962:	2c f4       	brge	.+10     	; 0x196e <min4+0x66>
    1964:	e9 2c       	mov	r14, r9
    1966:	f8 2c       	mov	r15, r8
    1968:	07 2d       	mov	r16, r7
    196a:	16 2d       	mov	r17, r6
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <min4+0x6e>
    196e:	e5 2c       	mov	r14, r5
    1970:	f4 2c       	mov	r15, r4
    1972:	03 2d       	mov	r16, r3
    1974:	12 2d       	mov	r17, r2
		ret = b;
	if(c < ret)
    1976:	69 81       	ldd	r22, Y+1	; 0x01
    1978:	7a 81       	ldd	r23, Y+2	; 0x02
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	97 01       	movw	r18, r14
    1980:	a8 01       	movw	r20, r16
    1982:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    1986:	88 23       	and	r24, r24
    1988:	24 f4       	brge	.+8      	; 0x1992 <min4+0x8a>
    198a:	e9 80       	ldd	r14, Y+1	; 0x01
    198c:	fa 80       	ldd	r15, Y+2	; 0x02
    198e:	0b 81       	ldd	r16, Y+3	; 0x03
    1990:	1c 81       	ldd	r17, Y+4	; 0x04
		ret = c;
	if(d < ret)
    1992:	b5 01       	movw	r22, r10
    1994:	c6 01       	movw	r24, r12
    1996:	97 01       	movw	r18, r14
    1998:	a8 01       	movw	r20, r16
    199a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    199e:	88 23       	and	r24, r24
    19a0:	14 f4       	brge	.+4      	; 0x19a6 <min4+0x9e>
    19a2:	75 01       	movw	r14, r10
    19a4:	86 01       	movw	r16, r12
		ret = d;
	return ret;
}
    19a6:	b7 01       	movw	r22, r14
    19a8:	c8 01       	movw	r24, r16
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	cf 90       	pop	r12
    19c2:	bf 90       	pop	r11
    19c4:	af 90       	pop	r10
    19c6:	9f 90       	pop	r9
    19c8:	8f 90       	pop	r8
    19ca:	7f 90       	pop	r7
    19cc:	6f 90       	pop	r6
    19ce:	5f 90       	pop	r5
    19d0:	4f 90       	pop	r4
    19d2:	3f 90       	pop	r3
    19d4:	2f 90       	pop	r2
    19d6:	08 95       	ret

000019d8 <get_position>:
double min4(double a, double b, double c, double d);

double location[] = {0,0,0};

double* get_position(int* inp)
{
    19d8:	2f 92       	push	r2
    19da:	3f 92       	push	r3
    19dc:	4f 92       	push	r4
    19de:	5f 92       	push	r5
    19e0:	6f 92       	push	r6
    19e2:	7f 92       	push	r7
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	c2 5d       	subi	r28, 0xD2	; 210
    1a02:	d0 40       	sbci	r29, 0x00	; 0
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	c5 54       	subi	r28, 0x45	; 69
    1a10:	df 4f       	sbci	r29, 0xFF	; 255
    1a12:	99 83       	std	Y+1, r25	; 0x01
    1a14:	88 83       	st	Y, r24
    1a16:	cb 5b       	subi	r28, 0xBB	; 187
    1a18:	d0 40       	sbci	r29, 0x00	; 0
	int xi1 = inp[0];
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	ed 90       	ld	r14, X+
    1a1e:	fc 90       	ld	r15, X
    1a20:	11 97       	sbiw	r26, 0x01	; 1
    int yi1 = inp[1];
    1a22:	12 96       	adiw	r26, 0x02	; 2
    1a24:	8d 90       	ld	r8, X+
    1a26:	9c 90       	ld	r9, X
    1a28:	13 97       	sbiw	r26, 0x03	; 3
    int xi2 = inp[2];
    1a2a:	14 96       	adiw	r26, 0x04	; 4
    1a2c:	6d 90       	ld	r6, X+
    1a2e:	7c 90       	ld	r7, X
    1a30:	15 97       	sbiw	r26, 0x05	; 5
    int yi2 = inp[3];
    1a32:	16 96       	adiw	r26, 0x06	; 6
    1a34:	2d 90       	ld	r2, X+
    1a36:	3c 90       	ld	r3, X
    1a38:	17 97       	sbiw	r26, 0x07	; 7
    int xi3 = inp[4];
    1a3a:	18 96       	adiw	r26, 0x08	; 8
    1a3c:	ed 91       	ld	r30, X+
    1a3e:	fc 91       	ld	r31, X
    1a40:	19 97       	sbiw	r26, 0x09	; 9
    1a42:	c1 56       	subi	r28, 0x61	; 97
    1a44:	df 4f       	sbci	r29, 0xFF	; 255
    1a46:	f9 83       	std	Y+1, r31	; 0x01
    1a48:	e8 83       	st	Y, r30
    1a4a:	cf 59       	subi	r28, 0x9F	; 159
    1a4c:	d0 40       	sbci	r29, 0x00	; 0
    int yi3 = inp[5];
    1a4e:	1a 96       	adiw	r26, 0x0a	; 10
    1a50:	2d 91       	ld	r18, X+
    1a52:	3c 91       	ld	r19, X
    1a54:	1b 97       	sbiw	r26, 0x0b	; 11
    1a56:	c3 56       	subi	r28, 0x63	; 99
    1a58:	df 4f       	sbci	r29, 0xFF	; 255
    1a5a:	39 83       	std	Y+1, r19	; 0x01
    1a5c:	28 83       	st	Y, r18
    1a5e:	cd 59       	subi	r28, 0x9D	; 157
    1a60:	d0 40       	sbci	r29, 0x00	; 0
    int xi4 = inp[6];
    1a62:	1c 96       	adiw	r26, 0x0c	; 12
    1a64:	8d 91       	ld	r24, X+
    1a66:	9c 91       	ld	r25, X
    1a68:	1d 97       	sbiw	r26, 0x0d	; 13
    1a6a:	c5 56       	subi	r28, 0x65	; 101
    1a6c:	df 4f       	sbci	r29, 0xFF	; 255
    1a6e:	99 83       	std	Y+1, r25	; 0x01
    1a70:	88 83       	st	Y, r24
    1a72:	cb 59       	subi	r28, 0x9B	; 155
    1a74:	d0 40       	sbci	r29, 0x00	; 0
    int yi4 = inp[7]; 
    1a76:	1e 96       	adiw	r26, 0x0e	; 14
    1a78:	4d 90       	ld	r4, X+
    1a7a:	5c 90       	ld	r5, X
    1a7c:	1f 97       	sbiw	r26, 0x0f	; 15
	double y0 = 0;
	double theta_rot = 0;

	bool first = 1;
	double min_err = 0;
	int order[] = {0,0,0,0};
    1a7e:	fe 01       	movw	r30, r28
    1a80:	31 96       	adiw	r30, 0x01	; 1
    1a82:	88 e0       	ldi	r24, 0x08	; 8
    1a84:	df 01       	movw	r26, r30
    1a86:	1d 92       	st	X+, r1
    1a88:	8a 95       	dec	r24
    1a8a:	e9 f7       	brne	.-6      	; 0x1a86 <get_position+0xae>

	// only three leds are visible
	if(xi4 == 0 && yi4 == 0)
    1a8c:	c5 56       	subi	r28, 0x65	; 101
    1a8e:	df 4f       	sbci	r29, 0xFF	; 255
    1a90:	e8 81       	ld	r30, Y
    1a92:	f9 81       	ldd	r31, Y+1	; 0x01
    1a94:	cb 59       	subi	r28, 0x9B	; 155
    1a96:	d0 40       	sbci	r29, 0x00	; 0
    1a98:	ef 2b       	or	r30, r31
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <get_position+0xc6>
    1a9c:	3f c6       	rjmp	.+3198   	; 0x271c <get_position+0xd44>
    1a9e:	41 14       	cp	r4, r1
    1aa0:	51 04       	cpc	r5, r1
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <get_position+0xce>
    1aa4:	3b c6       	rjmp	.+3190   	; 0x271c <get_position+0xd44>
	{
		double xiavg = (xi1 + xi2 + xi3)/3.0;
    1aa6:	c1 56       	subi	r28, 0x61	; 97
    1aa8:	df 4f       	sbci	r29, 0xFF	; 255
    1aaa:	68 81       	ld	r22, Y
    1aac:	79 81       	ldd	r23, Y+1	; 0x01
    1aae:	cf 59       	subi	r28, 0x9F	; 159
    1ab0:	d0 40       	sbci	r29, 0x00	; 0
    1ab2:	66 0d       	add	r22, r6
    1ab4:	77 1d       	adc	r23, r7
    1ab6:	6e 0d       	add	r22, r14
    1ab8:	7f 1d       	adc	r23, r15
    1aba:	88 27       	eor	r24, r24
    1abc:	77 fd       	sbrc	r23, 7
    1abe:	80 95       	com	r24
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e4       	ldi	r20, 0x40	; 64
    1acc:	50 e4       	ldi	r21, 0x40	; 64
    1ace:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1ad2:	c6 57       	subi	r28, 0x76	; 118
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	68 83       	st	Y, r22
    1ad8:	79 83       	std	Y+1, r23	; 0x01
    1ada:	8a 83       	std	Y+2, r24	; 0x02
    1adc:	9b 83       	std	Y+3, r25	; 0x03
    1ade:	ca 58       	subi	r28, 0x8A	; 138
    1ae0:	d0 40       	sbci	r29, 0x00	; 0
		double yiavg = (yi1 + yi2 + yi3)/3.0;
    1ae2:	b1 01       	movw	r22, r2
    1ae4:	68 0d       	add	r22, r8
    1ae6:	79 1d       	adc	r23, r9
    1ae8:	c3 56       	subi	r28, 0x63	; 99
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	28 81       	ld	r18, Y
    1aee:	39 81       	ldd	r19, Y+1	; 0x01
    1af0:	cd 59       	subi	r28, 0x9D	; 157
    1af2:	d0 40       	sbci	r29, 0x00	; 0
    1af4:	62 0f       	add	r22, r18
    1af6:	73 1f       	adc	r23, r19
    1af8:	88 27       	eor	r24, r24
    1afa:	77 fd       	sbrc	r23, 7
    1afc:	80 95       	com	r24
    1afe:	98 2f       	mov	r25, r24
    1b00:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e4       	ldi	r20, 0x40	; 64
    1b0a:	50 e4       	ldi	r21, 0x40	; 64
    1b0c:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1b10:	ca 57       	subi	r28, 0x7A	; 122
    1b12:	df 4f       	sbci	r29, 0xFF	; 255
    1b14:	68 83       	st	Y, r22
    1b16:	79 83       	std	Y+1, r23	; 0x01
    1b18:	8a 83       	std	Y+2, r24	; 0x02
    1b1a:	9b 83       	std	Y+3, r25	; 0x03
    1b1c:	c6 58       	subi	r28, 0x86	; 134
    1b1e:	d0 40       	sbci	r29, 0x00	; 0
		
		double di1 = d(xi1, yi1, xiavg, yiavg);
    1b20:	b7 01       	movw	r22, r14
    1b22:	88 27       	eor	r24, r24
    1b24:	77 fd       	sbrc	r23, 7
    1b26:	80 95       	com	r24
    1b28:	98 2f       	mov	r25, r24
    1b2a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1b2e:	c6 57       	subi	r28, 0x76	; 118
    1b30:	df 4f       	sbci	r29, 0xFF	; 255
    1b32:	28 81       	ld	r18, Y
    1b34:	39 81       	ldd	r19, Y+1	; 0x01
    1b36:	4a 81       	ldd	r20, Y+2	; 0x02
    1b38:	5b 81       	ldd	r21, Y+3	; 0x03
    1b3a:	ca 58       	subi	r28, 0x8A	; 138
    1b3c:	d0 40       	sbci	r29, 0x00	; 0
    1b3e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1b42:	5b 01       	movw	r10, r22
    1b44:	6c 01       	movw	r12, r24
    1b46:	b4 01       	movw	r22, r8
    1b48:	88 27       	eor	r24, r24
    1b4a:	77 fd       	sbrc	r23, 7
    1b4c:	80 95       	com	r24
    1b4e:	98 2f       	mov	r25, r24
    1b50:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1b54:	ca 57       	subi	r28, 0x7A	; 122
    1b56:	df 4f       	sbci	r29, 0xFF	; 255
    1b58:	28 81       	ld	r18, Y
    1b5a:	39 81       	ldd	r19, Y+1	; 0x01
    1b5c:	4a 81       	ldd	r20, Y+2	; 0x02
    1b5e:	5b 81       	ldd	r21, Y+3	; 0x03
    1b60:	c6 58       	subi	r28, 0x86	; 134
    1b62:	d0 40       	sbci	r29, 0x00	; 0
    1b64:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1b68:	7b 01       	movw	r14, r22
    1b6a:	8c 01       	movw	r16, r24
    1b6c:	c6 01       	movw	r24, r12
    1b6e:	b5 01       	movw	r22, r10
    1b70:	a6 01       	movw	r20, r12
    1b72:	95 01       	movw	r18, r10
    1b74:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1b78:	5b 01       	movw	r10, r22
    1b7a:	6c 01       	movw	r12, r24
    1b7c:	c8 01       	movw	r24, r16
    1b7e:	b7 01       	movw	r22, r14
    1b80:	a8 01       	movw	r20, r16
    1b82:	97 01       	movw	r18, r14
    1b84:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1b88:	9b 01       	movw	r18, r22
    1b8a:	ac 01       	movw	r20, r24
    1b8c:	c6 01       	movw	r24, r12
    1b8e:	b5 01       	movw	r22, r10
    1b90:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1b94:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    1b98:	ce 57       	subi	r28, 0x7E	; 126
    1b9a:	df 4f       	sbci	r29, 0xFF	; 255
    1b9c:	68 83       	st	Y, r22
    1b9e:	79 83       	std	Y+1, r23	; 0x01
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
    1ba2:	9b 83       	std	Y+3, r25	; 0x03
    1ba4:	c2 58       	subi	r28, 0x82	; 130
    1ba6:	d0 40       	sbci	r29, 0x00	; 0
		double di2 = d(xi2, yi2, xiavg, yiavg);
    1ba8:	b3 01       	movw	r22, r6
    1baa:	88 27       	eor	r24, r24
    1bac:	77 fd       	sbrc	r23, 7
    1bae:	80 95       	com	r24
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1bb6:	c6 57       	subi	r28, 0x76	; 118
    1bb8:	df 4f       	sbci	r29, 0xFF	; 255
    1bba:	28 81       	ld	r18, Y
    1bbc:	39 81       	ldd	r19, Y+1	; 0x01
    1bbe:	4a 81       	ldd	r20, Y+2	; 0x02
    1bc0:	5b 81       	ldd	r21, Y+3	; 0x03
    1bc2:	ca 58       	subi	r28, 0x8A	; 138
    1bc4:	d0 40       	sbci	r29, 0x00	; 0
    1bc6:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1bca:	5b 01       	movw	r10, r22
    1bcc:	6c 01       	movw	r12, r24
    1bce:	b1 01       	movw	r22, r2
    1bd0:	88 27       	eor	r24, r24
    1bd2:	77 fd       	sbrc	r23, 7
    1bd4:	80 95       	com	r24
    1bd6:	98 2f       	mov	r25, r24
    1bd8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1bdc:	ca 57       	subi	r28, 0x7A	; 122
    1bde:	df 4f       	sbci	r29, 0xFF	; 255
    1be0:	28 81       	ld	r18, Y
    1be2:	39 81       	ldd	r19, Y+1	; 0x01
    1be4:	4a 81       	ldd	r20, Y+2	; 0x02
    1be6:	5b 81       	ldd	r21, Y+3	; 0x03
    1be8:	c6 58       	subi	r28, 0x86	; 134
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1bf0:	7b 01       	movw	r14, r22
    1bf2:	8c 01       	movw	r16, r24
    1bf4:	c6 01       	movw	r24, r12
    1bf6:	b5 01       	movw	r22, r10
    1bf8:	a6 01       	movw	r20, r12
    1bfa:	95 01       	movw	r18, r10
    1bfc:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1c00:	5b 01       	movw	r10, r22
    1c02:	6c 01       	movw	r12, r24
    1c04:	c8 01       	movw	r24, r16
    1c06:	b7 01       	movw	r22, r14
    1c08:	a8 01       	movw	r20, r16
    1c0a:	97 01       	movw	r18, r14
    1c0c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1c10:	9b 01       	movw	r18, r22
    1c12:	ac 01       	movw	r20, r24
    1c14:	c6 01       	movw	r24, r12
    1c16:	b5 01       	movw	r22, r10
    1c18:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1c1c:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    1c20:	c2 58       	subi	r28, 0x82	; 130
    1c22:	df 4f       	sbci	r29, 0xFF	; 255
    1c24:	68 83       	st	Y, r22
    1c26:	79 83       	std	Y+1, r23	; 0x01
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	9b 83       	std	Y+3, r25	; 0x03
    1c2c:	ce 57       	subi	r28, 0x7E	; 126
    1c2e:	d0 40       	sbci	r29, 0x00	; 0
		double di3 = d(xi3, yi3, xiavg, yiavg);
    1c30:	c1 56       	subi	r28, 0x61	; 97
    1c32:	df 4f       	sbci	r29, 0xFF	; 255
    1c34:	a8 81       	ld	r26, Y
    1c36:	b9 81       	ldd	r27, Y+1	; 0x01
    1c38:	cf 59       	subi	r28, 0x9F	; 159
    1c3a:	d0 40       	sbci	r29, 0x00	; 0
    1c3c:	bd 01       	movw	r22, r26
    1c3e:	88 27       	eor	r24, r24
    1c40:	77 fd       	sbrc	r23, 7
    1c42:	80 95       	com	r24
    1c44:	98 2f       	mov	r25, r24
    1c46:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1c4a:	c6 57       	subi	r28, 0x76	; 118
    1c4c:	df 4f       	sbci	r29, 0xFF	; 255
    1c4e:	28 81       	ld	r18, Y
    1c50:	39 81       	ldd	r19, Y+1	; 0x01
    1c52:	4a 81       	ldd	r20, Y+2	; 0x02
    1c54:	5b 81       	ldd	r21, Y+3	; 0x03
    1c56:	ca 58       	subi	r28, 0x8A	; 138
    1c58:	d0 40       	sbci	r29, 0x00	; 0
    1c5a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1c5e:	5b 01       	movw	r10, r22
    1c60:	6c 01       	movw	r12, r24
    1c62:	c3 56       	subi	r28, 0x63	; 99
    1c64:	df 4f       	sbci	r29, 0xFF	; 255
    1c66:	e8 81       	ld	r30, Y
    1c68:	f9 81       	ldd	r31, Y+1	; 0x01
    1c6a:	cd 59       	subi	r28, 0x9D	; 157
    1c6c:	d0 40       	sbci	r29, 0x00	; 0
    1c6e:	bf 01       	movw	r22, r30
    1c70:	88 27       	eor	r24, r24
    1c72:	77 fd       	sbrc	r23, 7
    1c74:	80 95       	com	r24
    1c76:	98 2f       	mov	r25, r24
    1c78:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    1c7c:	ca 57       	subi	r28, 0x7A	; 122
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	28 81       	ld	r18, Y
    1c82:	39 81       	ldd	r19, Y+1	; 0x01
    1c84:	4a 81       	ldd	r20, Y+2	; 0x02
    1c86:	5b 81       	ldd	r21, Y+3	; 0x03
    1c88:	c6 58       	subi	r28, 0x86	; 134
    1c8a:	d0 40       	sbci	r29, 0x00	; 0
    1c8c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1c90:	7b 01       	movw	r14, r22
    1c92:	8c 01       	movw	r16, r24
    1c94:	c6 01       	movw	r24, r12
    1c96:	b5 01       	movw	r22, r10
    1c98:	a6 01       	movw	r20, r12
    1c9a:	95 01       	movw	r18, r10
    1c9c:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1ca0:	5b 01       	movw	r10, r22
    1ca2:	6c 01       	movw	r12, r24
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	a8 01       	movw	r20, r16
    1caa:	97 01       	movw	r18, r14
    1cac:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1cb0:	9b 01       	movw	r18, r22
    1cb2:	ac 01       	movw	r20, r24
    1cb4:	c6 01       	movw	r24, r12
    1cb6:	b5 01       	movw	r22, r10
    1cb8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1cbc:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    1cc0:	5b 01       	movw	r10, r22
    1cc2:	6c 01       	movw	r12, r24
}

double min3(double a, double b, double c)
{
	double ret = a;
	if(b < ret)
    1cc4:	c2 58       	subi	r28, 0x82	; 130
    1cc6:	df 4f       	sbci	r29, 0xFF	; 255
    1cc8:	68 81       	ld	r22, Y
    1cca:	79 81       	ldd	r23, Y+1	; 0x01
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd0:	ce 57       	subi	r28, 0x7E	; 126
    1cd2:	d0 40       	sbci	r29, 0x00	; 0
    1cd4:	ce 57       	subi	r28, 0x7E	; 126
    1cd6:	df 4f       	sbci	r29, 0xFF	; 255
    1cd8:	28 81       	ld	r18, Y
    1cda:	39 81       	ldd	r19, Y+1	; 0x01
    1cdc:	4a 81       	ldd	r20, Y+2	; 0x02
    1cde:	5b 81       	ldd	r21, Y+3	; 0x03
    1ce0:	c2 58       	subi	r28, 0x82	; 130
    1ce2:	d0 40       	sbci	r29, 0x00	; 0
    1ce4:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	4c f4       	brge	.+18     	; 0x1cfe <get_position+0x326>
    1cec:	c2 58       	subi	r28, 0x82	; 130
    1cee:	df 4f       	sbci	r29, 0xFF	; 255
    1cf0:	88 81       	ld	r24, Y
    1cf2:	99 81       	ldd	r25, Y+1	; 0x01
    1cf4:	aa 81       	ldd	r26, Y+2	; 0x02
    1cf6:	bb 81       	ldd	r27, Y+3	; 0x03
    1cf8:	ce 57       	subi	r28, 0x7E	; 126
    1cfa:	d0 40       	sbci	r29, 0x00	; 0
    1cfc:	08 c0       	rjmp	.+16     	; 0x1d0e <get_position+0x336>
    1cfe:	ce 57       	subi	r28, 0x7E	; 126
    1d00:	df 4f       	sbci	r29, 0xFF	; 255
    1d02:	88 81       	ld	r24, Y
    1d04:	99 81       	ldd	r25, Y+1	; 0x01
    1d06:	aa 81       	ldd	r26, Y+2	; 0x02
    1d08:	bb 81       	ldd	r27, Y+3	; 0x03
    1d0a:	c2 58       	subi	r28, 0x82	; 130
    1d0c:	d0 40       	sbci	r29, 0x00	; 0
    1d0e:	7c 01       	movw	r14, r24
    1d10:	8d 01       	movw	r16, r26
		ret = b;
	if (c < ret)
    1d12:	c6 01       	movw	r24, r12
    1d14:	b5 01       	movw	r22, r10
    1d16:	97 01       	movw	r18, r14
    1d18:	ad 01       	movw	r20, r26
    1d1a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	1c f4       	brge	.+6      	; 0x1d28 <get_position+0x350>
    1d22:	86 01       	movw	r16, r12
    1d24:	75 01       	movw	r14, r10
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <get_position+0x358>
    1d28:	c7 01       	movw	r24, r14
    1d2a:	d8 01       	movw	r26, r16
    1d2c:	7c 01       	movw	r14, r24
    1d2e:	8d 01       	movw	r16, r26
		double di2 = d(xi2, yi2, xiavg, yiavg);
		double di3 = d(xi3, yi3, xiavg, yiavg);
		
		int diord[] = {0,0,0};
		double mini = min3(di1, di2, di3);
		diord[0] = di1/mini;
    1d30:	ce 57       	subi	r28, 0x7E	; 126
    1d32:	df 4f       	sbci	r29, 0xFF	; 255
    1d34:	68 81       	ld	r22, Y
    1d36:	79 81       	ldd	r23, Y+1	; 0x01
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3c:	c2 58       	subi	r28, 0x82	; 130
    1d3e:	d0 40       	sbci	r29, 0x00	; 0
    1d40:	a8 01       	movw	r20, r16
    1d42:	97 01       	movw	r18, r14
    1d44:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1d48:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    1d4c:	c7 54       	subi	r28, 0x47	; 71
    1d4e:	df 4f       	sbci	r29, 0xFF	; 255
    1d50:	79 83       	std	Y+1, r23	; 0x01
    1d52:	68 83       	st	Y, r22
    1d54:	c9 5b       	subi	r28, 0xB9	; 185
    1d56:	d0 40       	sbci	r29, 0x00	; 0
		diord[1] = di2/mini;
    1d58:	c2 58       	subi	r28, 0x82	; 130
    1d5a:	df 4f       	sbci	r29, 0xFF	; 255
    1d5c:	68 81       	ld	r22, Y
    1d5e:	79 81       	ldd	r23, Y+1	; 0x01
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	9b 81       	ldd	r25, Y+3	; 0x03
    1d64:	ce 57       	subi	r28, 0x7E	; 126
    1d66:	d0 40       	sbci	r29, 0x00	; 0
    1d68:	a8 01       	movw	r20, r16
    1d6a:	97 01       	movw	r18, r14
    1d6c:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1d70:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    1d74:	c9 54       	subi	r28, 0x49	; 73
    1d76:	df 4f       	sbci	r29, 0xFF	; 255
    1d78:	79 83       	std	Y+1, r23	; 0x01
    1d7a:	68 83       	st	Y, r22
    1d7c:	c7 5b       	subi	r28, 0xB7	; 183
    1d7e:	d0 40       	sbci	r29, 0x00	; 0
		diord[2] = di3/mini;
    1d80:	c6 01       	movw	r24, r12
    1d82:	b5 01       	movw	r22, r10
    1d84:	a8 01       	movw	r20, r16
    1d86:	97 01       	movw	r18, r14
    1d88:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1d8c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    1d90:	cb 54       	subi	r28, 0x4B	; 75
    1d92:	df 4f       	sbci	r29, 0xFF	; 255
    1d94:	79 83       	std	Y+1, r23	; 0x01
    1d96:	68 83       	st	Y, r22
    1d98:	c5 5b       	subi	r28, 0xB5	; 181
    1d9a:	d0 40       	sbci	r29, 0x00	; 0
				
		double xes[] = {x1, x2, x3, x4};
    1d9c:	de 01       	movw	r26, r28
    1d9e:	51 96       	adiw	r26, 0x11	; 17
    1da0:	e3 e2       	ldi	r30, 0x23	; 35
    1da2:	f1 e0       	ldi	r31, 0x01	; 1
    1da4:	80 e1       	ldi	r24, 0x10	; 16
    1da6:	01 90       	ld	r0, Z+
    1da8:	0d 92       	st	X+, r0
    1daa:	81 50       	subi	r24, 0x01	; 1
    1dac:	e1 f7       	brne	.-8      	; 0x1da6 <get_position+0x3ce>
		double yes[] = {y1, y2, y3, y4};
    1dae:	de 01       	movw	r26, r28
    1db0:	91 96       	adiw	r26, 0x21	; 33
    1db2:	e3 e1       	ldi	r30, 0x13	; 19
    1db4:	f1 e0       	ldi	r31, 0x01	; 1
    1db6:	80 e1       	ldi	r24, 0x10	; 16
    1db8:	01 90       	ld	r0, Z+
    1dba:	0d 92       	st	X+, r0
    1dbc:	81 50       	subi	r24, 0x01	; 1
    1dbe:	e1 f7       	brne	.-8      	; 0x1db8 <get_position+0x3e0>
    1dc0:	9e 01       	movw	r18, r28
    1dc2:	27 5f       	subi	r18, 0xF7	; 247
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	3c ab       	std	Y+52, r19	; 0x34
    1dc8:	2b ab       	std	Y+51, r18	; 0x33
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	c9 56       	subi	r28, 0x69	; 105
    1dd4:	df 4f       	sbci	r29, 0xFF	; 255
    1dd6:	88 83       	st	Y, r24
    1dd8:	99 83       	std	Y+1, r25	; 0x01
    1dda:	aa 83       	std	Y+2, r26	; 0x02
    1ddc:	bb 83       	std	Y+3, r27	; 0x03
    1dde:	c7 59       	subi	r28, 0x97	; 151
    1de0:	d0 40       	sbci	r29, 0x00	; 0
    1de2:	cd 56       	subi	r28, 0x6D	; 109
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	88 83       	st	Y, r24
    1de8:	99 83       	std	Y+1, r25	; 0x01
    1dea:	aa 83       	std	Y+2, r26	; 0x02
    1dec:	bb 83       	std	Y+3, r27	; 0x03
    1dee:	c3 59       	subi	r28, 0x93	; 147
    1df0:	d0 40       	sbci	r29, 0x00	; 0
    1df2:	c1 57       	subi	r28, 0x71	; 113
    1df4:	df 4f       	sbci	r29, 0xFF	; 255
    1df6:	88 83       	st	Y, r24
    1df8:	99 83       	std	Y+1, r25	; 0x01
    1dfa:	aa 83       	std	Y+2, r26	; 0x02
    1dfc:	bb 83       	std	Y+3, r27	; 0x03
    1dfe:	cf 58       	subi	r28, 0x8F	; 143
    1e00:	d0 40       	sbci	r29, 0x00	; 0
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	c2 57       	subi	r28, 0x72	; 114
    1e06:	df 4f       	sbci	r29, 0xFF	; 255
    1e08:	98 83       	st	Y, r25
    1e0a:	ce 58       	subi	r28, 0x8E	; 142
    1e0c:	d0 40       	sbci	r29, 0x00	; 0
    1e0e:	c3 53       	subi	r28, 0x33	; 51
    1e10:	df 4f       	sbci	r29, 0xFF	; 255
    1e12:	18 82       	st	Y, r1
    1e14:	cd 5c       	subi	r28, 0xCD	; 205
    1e16:	d0 40       	sbci	r29, 0x00	; 0
    1e18:	c2 53       	subi	r28, 0x32	; 50
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	18 82       	st	Y, r1
    1e1e:	ce 5c       	subi	r28, 0xCE	; 206
    1e20:	d0 40       	sbci	r29, 0x00	; 0
    1e22:	c1 53       	subi	r28, 0x31	; 49
    1e24:	df 4f       	sbci	r29, 0xFF	; 255
    1e26:	18 82       	st	Y, r1
    1e28:	cf 5c       	subi	r28, 0xCF	; 207
    1e2a:	d0 40       	sbci	r29, 0x00	; 0
    1e2c:	c0 53       	subi	r28, 0x30	; 48
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	18 82       	st	Y, r1
    1e32:	c0 5d       	subi	r28, 0xD0	; 208
    1e34:	d0 40       	sbci	r29, 0x00	; 0
    1e36:	ee 96       	adiw	r28, 0x3e	; 62
    1e38:	1f ae       	std	Y+63, r1	; 0x3f
    1e3a:	1e ae       	std	Y+62, r1	; 0x3e
    1e3c:	ee 97       	sbiw	r28, 0x3e	; 62
							for(int ii = 0; ii < 4; ii++)
							{
								if(ii != l)
								{
									xa[ii] = xes[ii];
									xavg += xes[ii];
    1e3e:	de 01       	movw	r26, r28
    1e40:	51 96       	adiw	r26, 0x11	; 17
    1e42:	cf 52       	subi	r28, 0x2F	; 47
    1e44:	df 4f       	sbci	r29, 0xFF	; 255
    1e46:	b9 83       	std	Y+1, r27	; 0x01
    1e48:	a8 83       	st	Y, r26
    1e4a:	c1 5d       	subi	r28, 0xD1	; 209
    1e4c:	d0 40       	sbci	r29, 0x00	; 0
    1e4e:	53 c4       	rjmp	.+2214   	; 0x26f6 <get_position+0xd1e>
		double yes[] = {y1, y2, y3, y4};
		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
    1e50:	ec 96       	adiw	r28, 0x3c	; 60
    1e52:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e54:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e56:	ec 97       	sbiw	r28, 0x3c	; 60
    1e58:	ee 96       	adiw	r28, 0x3e	; 62
    1e5a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e5c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e5e:	ee 97       	sbiw	r28, 0x3e	; 62
    1e60:	e2 17       	cp	r30, r18
    1e62:	f3 07       	cpc	r31, r19
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <get_position+0x490>
    1e66:	1f c4       	rjmp	.+2110   	; 0x26a6 <get_position+0xcce>
    1e68:	89 a9       	ldd	r24, Y+49	; 0x31
    1e6a:	9a a9       	ldd	r25, Y+50	; 0x32
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	a9 e0       	ldi	r26, 0x09	; 9
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ac 0f       	add	r26, r28
    1e76:	bd 1f       	adc	r27, r29
    1e78:	a8 0f       	add	r26, r24
    1e7a:	b9 1f       	adc	r27, r25
    1e7c:	26 96       	adiw	r28, 0x06	; 6
    1e7e:	bf af       	std	Y+63, r27	; 0x3f
    1e80:	ae af       	std	Y+62, r26	; 0x3e
    1e82:	26 97       	sbiw	r28, 0x06	; 6
    1e84:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e86:	fa a9       	ldd	r31, Y+50	; 0x32
    1e88:	24 96       	adiw	r28, 0x04	; 4
    1e8a:	ff af       	std	Y+63, r31	; 0x3f
    1e8c:	ee af       	std	Y+62, r30	; 0x3e
    1e8e:	24 97       	sbiw	r28, 0x04	; 4
    1e90:	9e 01       	movw	r18, r28
    1e92:	27 5f       	subi	r18, 0xF7	; 247
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	22 96       	adiw	r28, 0x02	; 2
    1e98:	3f af       	std	Y+63, r19	; 0x3f
    1e9a:	2e af       	std	Y+62, r18	; 0x3e
    1e9c:	22 97       	sbiw	r28, 0x02	; 2
    1e9e:	ea 96       	adiw	r28, 0x3a	; 58
    1ea0:	1f ae       	std	Y+63, r1	; 0x3f
    1ea2:	1e ae       	std	Y+62, r1	; 0x3e
    1ea4:	ea 97       	sbiw	r28, 0x3a	; 58
				{
					for(int k = 0; k < 4; k++)
					{
						if(k!= i && k!= j)
    1ea6:	ea 96       	adiw	r28, 0x3a	; 58
    1ea8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eaa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eac:	ea 97       	sbiw	r28, 0x3a	; 58
    1eae:	ee 96       	adiw	r28, 0x3e	; 62
    1eb0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1eb2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1eb4:	ee 97       	sbiw	r28, 0x3e	; 62
    1eb6:	8a 17       	cp	r24, r26
    1eb8:	9b 07       	cpc	r25, r27
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <get_position+0x4e6>
    1ebc:	cc c3       	rjmp	.+1944   	; 0x2656 <get_position+0xc7e>
    1ebe:	ec 96       	adiw	r28, 0x3c	; 60
    1ec0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ec2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ec4:	ec 97       	sbiw	r28, 0x3c	; 60
    1ec6:	8e 17       	cp	r24, r30
    1ec8:	9f 07       	cpc	r25, r31
    1eca:	09 f4       	brne	.+2      	; 0x1ece <get_position+0x4f6>
    1ecc:	c4 c3       	rjmp	.+1928   	; 0x2656 <get_position+0xc7e>
    1ece:	0f 2e       	mov	r0, r31
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	ef 2e       	mov	r14, r31
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	ff 2e       	mov	r15, r31
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	0f 2f       	mov	r16, r31
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	1f 2f       	mov	r17, r31
    1ee0:	f0 2d       	mov	r31, r0
    1ee2:	47 01       	movw	r8, r14
    1ee4:	58 01       	movw	r10, r16
    1ee6:	66 24       	eor	r6, r6
    1ee8:	77 24       	eor	r7, r7
    1eea:	cc 24       	eor	r12, r12
    1eec:	dd 24       	eor	r13, r13
							double ya[] = {0,0,0,0};
							double xavg = 0;
							double yavg = 0;
							for(int ii = 0; ii < 4; ii++)
							{
								if(ii != l)
    1eee:	24 96       	adiw	r28, 0x04	; 4
    1ef0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ef2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ef4:	24 97       	sbiw	r28, 0x04	; 4
    1ef6:	62 16       	cp	r6, r18
    1ef8:	73 06       	cpc	r7, r19
    1efa:	01 f1       	breq	.+64     	; 0x1f3c <get_position+0x564>
								{
									xa[ii] = xes[ii];
									xavg += xes[ii];
    1efc:	e1 e1       	ldi	r30, 0x11	; 17
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	ec 0f       	add	r30, r28
    1f02:	fd 1f       	adc	r31, r29
    1f04:	ec 0d       	add	r30, r12
    1f06:	fd 1d       	adc	r31, r13
    1f08:	c8 01       	movw	r24, r16
    1f0a:	b7 01       	movw	r22, r14
    1f0c:	20 81       	ld	r18, Z
    1f0e:	31 81       	ldd	r19, Z+1	; 0x01
    1f10:	42 81       	ldd	r20, Z+2	; 0x02
    1f12:	53 81       	ldd	r21, Z+3	; 0x03
    1f14:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1f18:	7b 01       	movw	r14, r22
    1f1a:	8c 01       	movw	r16, r24
									ya[ii] = yes[ii];
									yavg += yes[ii];
    1f1c:	e1 e2       	ldi	r30, 0x21	; 33
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	ec 0f       	add	r30, r28
    1f22:	fd 1f       	adc	r31, r29
    1f24:	ec 0d       	add	r30, r12
    1f26:	fd 1d       	adc	r31, r13
    1f28:	c5 01       	movw	r24, r10
    1f2a:	b4 01       	movw	r22, r8
    1f2c:	20 81       	ld	r18, Z
    1f2e:	31 81       	ldd	r19, Z+1	; 0x01
    1f30:	42 81       	ldd	r20, Z+2	; 0x02
    1f32:	53 81       	ldd	r21, Z+3	; 0x03
    1f34:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1f38:	4b 01       	movw	r8, r22
    1f3a:	5c 01       	movw	r10, r24
							int l = 10 - (i + j + k);
							double xa[] = {0,0,0,0};
							double ya[] = {0,0,0,0};
							double xavg = 0;
							double yavg = 0;
							for(int ii = 0; ii < 4; ii++)
    1f3c:	08 94       	sec
    1f3e:	61 1c       	adc	r6, r1
    1f40:	71 1c       	adc	r7, r1
    1f42:	84 e0       	ldi	r24, 0x04	; 4
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	c8 0e       	add	r12, r24
    1f48:	d9 1e       	adc	r13, r25
    1f4a:	94 e0       	ldi	r25, 0x04	; 4
    1f4c:	69 16       	cp	r6, r25
    1f4e:	71 04       	cpc	r7, r1
    1f50:	71 f6       	brne	.-100    	; 0x1eee <get_position+0x516>
									xavg += xes[ii];
									ya[ii] = yes[ii];
									yavg += yes[ii];
								}
							}
							xavg /= 3;
    1f52:	c8 01       	movw	r24, r16
    1f54:	b7 01       	movw	r22, r14
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e4       	ldi	r20, 0x40	; 64
    1f5c:	50 e4       	ldi	r21, 0x40	; 64
    1f5e:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1f62:	6f ab       	std	Y+55, r22	; 0x37
    1f64:	78 af       	std	Y+56, r23	; 0x38
    1f66:	89 af       	std	Y+57, r24	; 0x39
    1f68:	9a af       	std	Y+58, r25	; 0x3a
							yavg /= 3;	
    1f6a:	c5 01       	movw	r24, r10
    1f6c:	b4 01       	movw	r22, r8
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e4       	ldi	r20, 0x40	; 64
    1f74:	50 e4       	ldi	r21, 0x40	; 64
    1f76:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    1f7a:	1b 01       	movw	r2, r22
    1f7c:	2c 01       	movw	r4, r24
							
							double d1 = d(x1, y1, xavg, yavg);						
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	2f a9       	ldd	r18, Y+55	; 0x37
    1f88:	38 ad       	ldd	r19, Y+56	; 0x38
    1f8a:	49 ad       	ldd	r20, Y+57	; 0x39
    1f8c:	5a ad       	ldd	r21, Y+58	; 0x3a
    1f8e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1f92:	cf 54       	subi	r28, 0x4F	; 79
    1f94:	df 4f       	sbci	r29, 0xFF	; 255
    1f96:	68 83       	st	Y, r22
    1f98:	79 83       	std	Y+1, r23	; 0x01
    1f9a:	8a 83       	std	Y+2, r24	; 0x02
    1f9c:	9b 83       	std	Y+3, r25	; 0x03
    1f9e:	c1 5b       	subi	r28, 0xB1	; 177
    1fa0:	d0 40       	sbci	r29, 0x00	; 0
    1fa2:	9b 01       	movw	r18, r22
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1faa:	5b 01       	movw	r10, r22
    1fac:	6c 01       	movw	r12, r24
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	88 e6       	ldi	r24, 0x68	; 104
    1fb4:	91 e4       	ldi	r25, 0x41	; 65
    1fb6:	a2 01       	movw	r20, r4
    1fb8:	91 01       	movw	r18, r2
    1fba:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1fbe:	c3 55       	subi	r28, 0x53	; 83
    1fc0:	df 4f       	sbci	r29, 0xFF	; 255
    1fc2:	68 83       	st	Y, r22
    1fc4:	79 83       	std	Y+1, r23	; 0x01
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	9b 83       	std	Y+3, r25	; 0x03
    1fca:	cd 5a       	subi	r28, 0xAD	; 173
    1fcc:	d0 40       	sbci	r29, 0x00	; 0
    1fce:	9b 01       	movw	r18, r22
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	ac 01       	movw	r20, r24
    1fda:	c6 01       	movw	r24, r12
    1fdc:	b5 01       	movw	r22, r10
    1fde:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1fe2:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    1fe6:	e8 96       	adiw	r28, 0x38	; 56
    1fe8:	6c af       	std	Y+60, r22	; 0x3c
    1fea:	7d af       	std	Y+61, r23	; 0x3d
    1fec:	8e af       	std	Y+62, r24	; 0x3e
    1fee:	9f af       	std	Y+63, r25	; 0x3f
    1ff0:	e8 97       	sbiw	r28, 0x38	; 56
							double d2 = d(x2, y2, xavg, yavg);
    1ff2:	61 ee       	ldi	r22, 0xE1	; 225
    1ff4:	7a e7       	ldi	r23, 0x7A	; 122
    1ff6:	8a e3       	ldi	r24, 0x3A	; 58
    1ff8:	91 e4       	ldi	r25, 0x41	; 65
    1ffa:	2f a9       	ldd	r18, Y+55	; 0x37
    1ffc:	38 ad       	ldd	r19, Y+56	; 0x38
    1ffe:	49 ad       	ldd	r20, Y+57	; 0x39
    2000:	5a ad       	ldd	r21, Y+58	; 0x3a
    2002:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2006:	c7 55       	subi	r28, 0x57	; 87
    2008:	df 4f       	sbci	r29, 0xFF	; 255
    200a:	68 83       	st	Y, r22
    200c:	79 83       	std	Y+1, r23	; 0x01
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	9b 83       	std	Y+3, r25	; 0x03
    2012:	c9 5a       	subi	r28, 0xA9	; 169
    2014:	d0 40       	sbci	r29, 0x00	; 0
    2016:	63 e2       	ldi	r22, 0x23	; 35
    2018:	7b ed       	ldi	r23, 0xDB	; 219
    201a:	8b e0       	ldi	r24, 0x0B	; 11
    201c:	91 e4       	ldi	r25, 0x41	; 65
    201e:	a2 01       	movw	r20, r4
    2020:	91 01       	movw	r18, r2
    2022:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2026:	cb 55       	subi	r28, 0x5B	; 91
    2028:	df 4f       	sbci	r29, 0xFF	; 255
    202a:	68 83       	st	Y, r22
    202c:	79 83       	std	Y+1, r23	; 0x01
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	c5 5a       	subi	r28, 0xA5	; 165
    2034:	d0 40       	sbci	r29, 0x00	; 0
    2036:	c7 55       	subi	r28, 0x57	; 87
    2038:	df 4f       	sbci	r29, 0xFF	; 255
    203a:	68 81       	ld	r22, Y
    203c:	79 81       	ldd	r23, Y+1	; 0x01
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	c9 5a       	subi	r28, 0xA9	; 169
    2044:	d0 40       	sbci	r29, 0x00	; 0
    2046:	9b 01       	movw	r18, r22
    2048:	ac 01       	movw	r20, r24
    204a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    204e:	7b 01       	movw	r14, r22
    2050:	8c 01       	movw	r16, r24
    2052:	cb 55       	subi	r28, 0x5B	; 91
    2054:	df 4f       	sbci	r29, 0xFF	; 255
    2056:	68 81       	ld	r22, Y
    2058:	79 81       	ldd	r23, Y+1	; 0x01
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	c5 5a       	subi	r28, 0xA5	; 165
    2060:	d0 40       	sbci	r29, 0x00	; 0
    2062:	9b 01       	movw	r18, r22
    2064:	ac 01       	movw	r20, r24
    2066:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    206a:	9b 01       	movw	r18, r22
    206c:	ac 01       	movw	r20, r24
    206e:	c8 01       	movw	r24, r16
    2070:	b7 01       	movw	r22, r14
    2072:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2076:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    207a:	e4 96       	adiw	r28, 0x34	; 52
    207c:	6c af       	std	Y+60, r22	; 0x3c
    207e:	7d af       	std	Y+61, r23	; 0x3d
    2080:	8e af       	std	Y+62, r24	; 0x3e
    2082:	9f af       	std	Y+63, r25	; 0x3f
    2084:	e4 97       	sbiw	r28, 0x34	; 52
							double d3 = d(x3, y3, xavg, yavg);
    2086:	60 e0       	ldi	r22, 0x00	; 0
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	88 e6       	ldi	r24, 0x68	; 104
    208c:	91 ec       	ldi	r25, 0xC1	; 193
    208e:	a2 01       	movw	r20, r4
    2090:	91 01       	movw	r18, r2
    2092:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2096:	9b 01       	movw	r18, r22
    2098:	ac 01       	movw	r20, r24
    209a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	c6 01       	movw	r24, r12
    20a4:	b5 01       	movw	r22, r10
    20a6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    20aa:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    20ae:	3b 01       	movw	r6, r22
    20b0:	4c 01       	movw	r8, r24
							double d4 = d(x4, y4, xavg, yavg);
    20b2:	6c e0       	ldi	r22, 0x0C	; 12
    20b4:	72 e0       	ldi	r23, 0x02	; 2
    20b6:	89 e2       	ldi	r24, 0x29	; 41
    20b8:	91 ec       	ldi	r25, 0xC1	; 193
    20ba:	2f a9       	ldd	r18, Y+55	; 0x37
    20bc:	38 ad       	ldd	r19, Y+56	; 0x38
    20be:	49 ad       	ldd	r20, Y+57	; 0x39
    20c0:	5a ad       	ldd	r21, Y+58	; 0x3a
    20c2:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    20c6:	7b 01       	movw	r14, r22
    20c8:	8c 01       	movw	r16, r24
    20ca:	69 e7       	ldi	r22, 0x79	; 121
    20cc:	79 ee       	ldi	r23, 0xE9	; 233
    20ce:	8e e1       	ldi	r24, 0x1E	; 30
    20d0:	90 e4       	ldi	r25, 0x40	; 64
    20d2:	a2 01       	movw	r20, r4
    20d4:	91 01       	movw	r18, r2
    20d6:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    20da:	5b 01       	movw	r10, r22
    20dc:	6c 01       	movw	r12, r24
    20de:	c8 01       	movw	r24, r16
    20e0:	b7 01       	movw	r22, r14
    20e2:	a8 01       	movw	r20, r16
    20e4:	97 01       	movw	r18, r14
    20e6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    20ea:	7b 01       	movw	r14, r22
    20ec:	8c 01       	movw	r16, r24
    20ee:	c6 01       	movw	r24, r12
    20f0:	b5 01       	movw	r22, r10
    20f2:	a6 01       	movw	r20, r12
    20f4:	95 01       	movw	r18, r10
    20f6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    20fa:	9b 01       	movw	r18, r22
    20fc:	ac 01       	movw	r20, r24
    20fe:	c8 01       	movw	r24, r16
    2100:	b7 01       	movw	r22, r14
    2102:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2106:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    210a:	5b 01       	movw	r10, r22
    210c:	6c 01       	movw	r12, r24

							int dord[] = {d1, d2, d3, d4};
    210e:	e8 96       	adiw	r28, 0x38	; 56
    2110:	6c ad       	ldd	r22, Y+60	; 0x3c
    2112:	7d ad       	ldd	r23, Y+61	; 0x3d
    2114:	8e ad       	ldd	r24, Y+62	; 0x3e
    2116:	9f ad       	ldd	r25, Y+63	; 0x3f
    2118:	e8 97       	sbiw	r28, 0x38	; 56
    211a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    211e:	7a 87       	std	Y+10, r23	; 0x0a
    2120:	69 87       	std	Y+9, r22	; 0x09
    2122:	e4 96       	adiw	r28, 0x34	; 52
    2124:	6c ad       	ldd	r22, Y+60	; 0x3c
    2126:	7d ad       	ldd	r23, Y+61	; 0x3d
    2128:	8e ad       	ldd	r24, Y+62	; 0x3e
    212a:	9f ad       	ldd	r25, Y+63	; 0x3f
    212c:	e4 97       	sbiw	r28, 0x34	; 52
    212e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    2132:	7c 87       	std	Y+12, r23	; 0x0c
    2134:	6b 87       	std	Y+11, r22	; 0x0b
    2136:	c4 01       	movw	r24, r8
    2138:	b3 01       	movw	r22, r6
    213a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    213e:	7e 87       	std	Y+14, r23	; 0x0e
    2140:	6d 87       	std	Y+13, r22	; 0x0d
    2142:	c6 01       	movw	r24, r12
    2144:	b5 01       	movw	r22, r10
    2146:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    214a:	78 8b       	std	Y+16, r23	; 0x10
    214c:	6f 87       	std	Y+15, r22	; 0x0f
							dord[l] = dord[i];
    214e:	ab a9       	ldd	r26, Y+51	; 0x33
    2150:	bc a9       	ldd	r27, Y+52	; 0x34
    2152:	0d 90       	ld	r0, X+
    2154:	bc 91       	ld	r27, X
    2156:	a0 2d       	mov	r26, r0
    2158:	cd 55       	subi	r28, 0x5D	; 93
    215a:	df 4f       	sbci	r29, 0xFF	; 255
    215c:	b9 83       	std	Y+1, r27	; 0x01
    215e:	a8 83       	st	Y, r26
    2160:	c3 5a       	subi	r28, 0xA3	; 163
    2162:	d0 40       	sbci	r29, 0x00	; 0
}

double min4(double a, double b, double c, double d)
{
	double ret = a;
	if(b < ret)
    2164:	e4 96       	adiw	r28, 0x34	; 52
    2166:	6c ad       	ldd	r22, Y+60	; 0x3c
    2168:	7d ad       	ldd	r23, Y+61	; 0x3d
    216a:	8e ad       	ldd	r24, Y+62	; 0x3e
    216c:	9f ad       	ldd	r25, Y+63	; 0x3f
    216e:	e4 97       	sbiw	r28, 0x34	; 52
    2170:	e8 96       	adiw	r28, 0x38	; 56
    2172:	2c ad       	ldd	r18, Y+60	; 0x3c
    2174:	3d ad       	ldd	r19, Y+61	; 0x3d
    2176:	4e ad       	ldd	r20, Y+62	; 0x3e
    2178:	5f ad       	ldd	r21, Y+63	; 0x3f
    217a:	e8 97       	sbiw	r28, 0x38	; 56
    217c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    2180:	88 23       	and	r24, r24
    2182:	3c f4       	brge	.+14     	; 0x2192 <get_position+0x7ba>
    2184:	e4 96       	adiw	r28, 0x34	; 52
    2186:	ec ac       	ldd	r14, Y+60	; 0x3c
    2188:	fd ac       	ldd	r15, Y+61	; 0x3d
    218a:	0e ad       	ldd	r16, Y+62	; 0x3e
    218c:	1f ad       	ldd	r17, Y+63	; 0x3f
    218e:	e4 97       	sbiw	r28, 0x34	; 52
    2190:	06 c0       	rjmp	.+12     	; 0x219e <get_position+0x7c6>
    2192:	e8 96       	adiw	r28, 0x38	; 56
    2194:	ec ac       	ldd	r14, Y+60	; 0x3c
    2196:	fd ac       	ldd	r15, Y+61	; 0x3d
    2198:	0e ad       	ldd	r16, Y+62	; 0x3e
    219a:	1f ad       	ldd	r17, Y+63	; 0x3f
    219c:	e8 97       	sbiw	r28, 0x38	; 56
		ret = b;
	if(c < ret)
    219e:	c4 01       	movw	r24, r8
    21a0:	b3 01       	movw	r22, r6
    21a2:	a8 01       	movw	r20, r16
    21a4:	97 01       	movw	r18, r14
    21a6:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	14 f4       	brge	.+4      	; 0x21b2 <get_position+0x7da>
    21ae:	84 01       	movw	r16, r8
    21b0:	73 01       	movw	r14, r6
		ret = c;
	if(d < ret)
    21b2:	c6 01       	movw	r24, r12
    21b4:	b5 01       	movw	r22, r10
    21b6:	a8 01       	movw	r20, r16
    21b8:	97 01       	movw	r18, r14
    21ba:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    21be:	88 23       	and	r24, r24
    21c0:	14 f4       	brge	.+4      	; 0x21c6 <get_position+0x7ee>
    21c2:	86 01       	movw	r16, r12
    21c4:	75 01       	movw	r14, r10
							double d2 = d(x2, y2, xavg, yavg);
							double d3 = d(x3, y3, xavg, yavg);
							double d4 = d(x4, y4, xavg, yavg);

							int dord[] = {d1, d2, d3, d4};
							dord[l] = dord[i];
    21c6:	cd 55       	subi	r28, 0x5D	; 93
    21c8:	df 4f       	sbci	r29, 0xFF	; 255
    21ca:	28 81       	ld	r18, Y
    21cc:	39 81       	ldd	r19, Y+1	; 0x01
    21ce:	c3 5a       	subi	r28, 0xA3	; 163
    21d0:	d0 40       	sbci	r29, 0x00	; 0
    21d2:	26 96       	adiw	r28, 0x06	; 6
    21d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    21d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    21d8:	26 97       	sbiw	r28, 0x06	; 6
    21da:	31 83       	std	Z+1, r19	; 0x01
    21dc:	20 83       	st	Z, r18
							int mind = min4(d1, d2, d3, d4);
    21de:	c8 01       	movw	r24, r16
    21e0:	b7 01       	movw	r22, r14
    21e2:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    21e6:	9b 01       	movw	r18, r22
    21e8:	fe 01       	movw	r30, r28
    21ea:	39 96       	adiw	r30, 0x09	; 9
							for(int ii = 0; ii < 4; ii++)
								dord[ii] /= mind;
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	b9 01       	movw	r22, r18
    21f2:	0e 94 c9 1c 	call	0x3992	; 0x3992 <__divmodhi4>
    21f6:	61 93       	st	Z+, r22
    21f8:	71 93       	st	Z+, r23
							double d4 = d(x4, y4, xavg, yavg);

							int dord[] = {d1, d2, d3, d4};
							dord[l] = dord[i];
							int mind = min4(d1, d2, d3, d4);
							for(int ii = 0; ii < 4; ii++)
    21fa:	cf 52       	subi	r28, 0x2F	; 47
    21fc:	df 4f       	sbci	r29, 0xFF	; 255
    21fe:	88 81       	ld	r24, Y
    2200:	99 81       	ldd	r25, Y+1	; 0x01
    2202:	c1 5d       	subi	r28, 0xD1	; 209
    2204:	d0 40       	sbci	r29, 0x00	; 0
    2206:	e8 17       	cp	r30, r24
    2208:	f9 07       	cpc	r31, r25
    220a:	81 f7       	brne	.-32     	; 0x21ec <get_position+0x814>
								dord[ii] /= mind;

							double err = (diord[0]-dord[i]) * (diord[0]-dord[i]) + (diord[1]-dord[j]) * (diord[1]-dord[j]) + (diord[2]-dord[k]) * (diord[2]-dord[k]);
    220c:	ab a9       	ldd	r26, Y+51	; 0x33
    220e:	bc a9       	ldd	r27, Y+52	; 0x34
    2210:	8d 91       	ld	r24, X+
    2212:	9c 91       	ld	r25, X
    2214:	c7 54       	subi	r28, 0x47	; 71
    2216:	df 4f       	sbci	r29, 0xFF	; 255
    2218:	e8 81       	ld	r30, Y
    221a:	f9 81       	ldd	r31, Y+1	; 0x01
    221c:	c9 5b       	subi	r28, 0xB9	; 185
    221e:	d0 40       	sbci	r29, 0x00	; 0
    2220:	e8 1b       	sub	r30, r24
    2222:	f9 0b       	sbc	r31, r25
    2224:	ad ad       	ldd	r26, Y+61	; 0x3d
    2226:	be ad       	ldd	r27, Y+62	; 0x3e
    2228:	8d 91       	ld	r24, X+
    222a:	9c 91       	ld	r25, X
    222c:	c9 54       	subi	r28, 0x49	; 73
    222e:	df 4f       	sbci	r29, 0xFF	; 255
    2230:	28 81       	ld	r18, Y
    2232:	39 81       	ldd	r19, Y+1	; 0x01
    2234:	c7 5b       	subi	r28, 0xB7	; 183
    2236:	d0 40       	sbci	r29, 0x00	; 0
    2238:	28 1b       	sub	r18, r24
    223a:	39 0b       	sbc	r19, r25
    223c:	22 96       	adiw	r28, 0x02	; 2
    223e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2240:	bf ad       	ldd	r27, Y+63	; 0x3f
    2242:	22 97       	sbiw	r28, 0x02	; 2
    2244:	8d 91       	ld	r24, X+
    2246:	9c 91       	ld	r25, X
    2248:	cb 54       	subi	r28, 0x4B	; 75
    224a:	df 4f       	sbci	r29, 0xFF	; 255
    224c:	48 81       	ld	r20, Y
    224e:	59 81       	ldd	r21, Y+1	; 0x01
    2250:	c5 5b       	subi	r28, 0xB5	; 181
    2252:	d0 40       	sbci	r29, 0x00	; 0
    2254:	48 1b       	sub	r20, r24
    2256:	59 0b       	sbc	r21, r25
    2258:	22 9f       	mul	r18, r18
    225a:	b0 01       	movw	r22, r0
    225c:	23 9f       	mul	r18, r19
    225e:	70 0d       	add	r23, r0
    2260:	32 9f       	mul	r19, r18
    2262:	70 0d       	add	r23, r0
    2264:	11 24       	eor	r1, r1
    2266:	ee 9f       	mul	r30, r30
    2268:	90 01       	movw	r18, r0
    226a:	ef 9f       	mul	r30, r31
    226c:	30 0d       	add	r19, r0
    226e:	fe 9f       	mul	r31, r30
    2270:	30 0d       	add	r19, r0
    2272:	11 24       	eor	r1, r1
    2274:	62 0f       	add	r22, r18
    2276:	73 1f       	adc	r23, r19
    2278:	44 9f       	mul	r20, r20
    227a:	90 01       	movw	r18, r0
    227c:	45 9f       	mul	r20, r21
    227e:	30 0d       	add	r19, r0
    2280:	54 9f       	mul	r21, r20
    2282:	30 0d       	add	r19, r0
    2284:	11 24       	eor	r1, r1
    2286:	62 0f       	add	r22, r18
    2288:	73 1f       	adc	r23, r19
    228a:	88 27       	eor	r24, r24
    228c:	77 fd       	sbrc	r23, 7
    228e:	80 95       	com	r24
    2290:	98 2f       	mov	r25, r24
    2292:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2296:	e0 96       	adiw	r28, 0x30	; 48
    2298:	6c af       	std	Y+60, r22	; 0x3c
    229a:	7d af       	std	Y+61, r23	; 0x3d
    229c:	8e af       	std	Y+62, r24	; 0x3e
    229e:	9f af       	std	Y+63, r25	; 0x3f
    22a0:	e0 97       	sbiw	r28, 0x30	; 48
							if(first || err < min_err)
    22a2:	c2 57       	subi	r28, 0x72	; 114
    22a4:	df 4f       	sbci	r29, 0xFF	; 255
    22a6:	b8 81       	ld	r27, Y
    22a8:	ce 58       	subi	r28, 0x8E	; 142
    22aa:	d0 40       	sbci	r29, 0x00	; 0
    22ac:	bb 23       	and	r27, r27
    22ae:	c9 f4       	brne	.+50     	; 0x22e2 <get_position+0x90a>
    22b0:	c3 53       	subi	r28, 0x33	; 51
    22b2:	df 4f       	sbci	r29, 0xFF	; 255
    22b4:	28 81       	ld	r18, Y
    22b6:	cd 5c       	subi	r28, 0xCD	; 205
    22b8:	d0 40       	sbci	r29, 0x00	; 0
    22ba:	c2 53       	subi	r28, 0x32	; 50
    22bc:	df 4f       	sbci	r29, 0xFF	; 255
    22be:	38 81       	ld	r19, Y
    22c0:	ce 5c       	subi	r28, 0xCE	; 206
    22c2:	d0 40       	sbci	r29, 0x00	; 0
    22c4:	c1 53       	subi	r28, 0x31	; 49
    22c6:	df 4f       	sbci	r29, 0xFF	; 255
    22c8:	48 81       	ld	r20, Y
    22ca:	cf 5c       	subi	r28, 0xCF	; 207
    22cc:	d0 40       	sbci	r29, 0x00	; 0
    22ce:	c0 53       	subi	r28, 0x30	; 48
    22d0:	df 4f       	sbci	r29, 0xFF	; 255
    22d2:	58 81       	ld	r21, Y
    22d4:	c0 5d       	subi	r28, 0xD0	; 208
    22d6:	d0 40       	sbci	r29, 0x00	; 0
    22d8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    22dc:	88 23       	and	r24, r24
    22de:	0c f0       	brlt	.+2      	; 0x22e2 <get_position+0x90a>
    22e0:	ba c1       	rjmp	.+884    	; 0x2656 <get_position+0xc7e>
							{
								min_err = err;
								first = false;
								order[0] = i;
    22e2:	ee 96       	adiw	r28, 0x3e	; 62
    22e4:	ee ad       	ldd	r30, Y+62	; 0x3e
    22e6:	ff ad       	ldd	r31, Y+63	; 0x3f
    22e8:	ee 97       	sbiw	r28, 0x3e	; 62
    22ea:	fa 83       	std	Y+2, r31	; 0x02
    22ec:	e9 83       	std	Y+1, r30	; 0x01
								order[1] = j;
    22ee:	ec 96       	adiw	r28, 0x3c	; 60
    22f0:	2e ad       	ldd	r18, Y+62	; 0x3e
    22f2:	3f ad       	ldd	r19, Y+63	; 0x3f
    22f4:	ec 97       	sbiw	r28, 0x3c	; 60
    22f6:	3c 83       	std	Y+4, r19	; 0x04
    22f8:	2b 83       	std	Y+3, r18	; 0x03
								order[2] = k;
    22fa:	ea 96       	adiw	r28, 0x3a	; 58
    22fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    22fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2300:	ea 97       	sbiw	r28, 0x3a	; 58
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
								order[3] = 0;
    2306:	18 86       	std	Y+8, r1	; 0x08
    2308:	1f 82       	std	Y+7, r1	; 0x07

								double thetaf = 0;
								double dCenter = 0;

								int pos = 0;
								if(l == 1)
    230a:	24 96       	adiw	r28, 0x04	; 4
    230c:	ae ad       	ldd	r26, Y+62	; 0x3e
    230e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2310:	24 97       	sbiw	r28, 0x04	; 4
    2312:	11 97       	sbiw	r26, 0x01	; 1
    2314:	09 f0       	breq	.+2      	; 0x2318 <get_position+0x940>
    2316:	62 c0       	rjmp	.+196    	; 0x23dc <get_position+0xa04>
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	11 f4       	brne	.+4      	; 0x2326 <get_position+0x94e>
    2322:	61 e0       	ldi	r22, 0x01	; 1
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	4b 01       	movw	r8, r22
								{
									for(int ii = 0; ii < 3; ii++)
									{
										if(order[ii] == 2)
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	02 97       	sbiw	r24, 0x02	; 2
    232e:	19 f4       	brne	.+6      	; 0x2336 <get_position+0x95e>
    2330:	b2 e0       	ldi	r27, 0x02	; 2
    2332:	8b 2e       	mov	r8, r27
    2334:	91 2c       	mov	r9, r1
											pos = ii;
									}
									thetaf = atan2(-yavg, -xavg) - atan2(y2 - yavg, x2 - xavg);
    2336:	c2 01       	movw	r24, r4
    2338:	b1 01       	movw	r22, r2
    233a:	90 58       	subi	r25, 0x80	; 128
    233c:	2f a9       	ldd	r18, Y+55	; 0x37
    233e:	38 ad       	ldd	r19, Y+56	; 0x38
    2340:	49 ad       	ldd	r20, Y+57	; 0x39
    2342:	5a ad       	ldd	r21, Y+58	; 0x3a
    2344:	50 58       	subi	r21, 0x80	; 128
    2346:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
    234a:	7b 01       	movw	r14, r22
    234c:	8c 01       	movw	r16, r24
    234e:	cb 55       	subi	r28, 0x5B	; 91
    2350:	df 4f       	sbci	r29, 0xFF	; 255
    2352:	68 81       	ld	r22, Y
    2354:	79 81       	ldd	r23, Y+1	; 0x01
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	c5 5a       	subi	r28, 0xA5	; 165
    235c:	d0 40       	sbci	r29, 0x00	; 0
    235e:	c7 55       	subi	r28, 0x57	; 87
    2360:	df 4f       	sbci	r29, 0xFF	; 255
    2362:	28 81       	ld	r18, Y
    2364:	39 81       	ldd	r19, Y+1	; 0x01
    2366:	4a 81       	ldd	r20, Y+2	; 0x02
    2368:	5b 81       	ldd	r21, Y+3	; 0x03
    236a:	c9 5a       	subi	r28, 0xA9	; 169
    236c:	d0 40       	sbci	r29, 0x00	; 0
    236e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
    2372:	9b 01       	movw	r18, r22
    2374:	ac 01       	movw	r20, r24
    2376:	c8 01       	movw	r24, r16
    2378:	b7 01       	movw	r22, r14
    237a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    237e:	ac 96       	adiw	r28, 0x2c	; 44
    2380:	6c af       	std	Y+60, r22	; 0x3c
    2382:	7d af       	std	Y+61, r23	; 0x3d
    2384:	8e af       	std	Y+62, r24	; 0x3e
    2386:	9f af       	std	Y+63, r25	; 0x3f
    2388:	ac 97       	sbiw	r28, 0x2c	; 44
									dCenter = di2 / d2 * d(xavg, yavg, 0, 0);
    238a:	6f a9       	ldd	r22, Y+55	; 0x37
    238c:	78 ad       	ldd	r23, Y+56	; 0x38
    238e:	89 ad       	ldd	r24, Y+57	; 0x39
    2390:	9a ad       	ldd	r25, Y+58	; 0x3a
    2392:	9b 01       	movw	r18, r22
    2394:	ac 01       	movw	r20, r24
    2396:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    239a:	7b 01       	movw	r14, r22
    239c:	8c 01       	movw	r16, r24
    239e:	c2 01       	movw	r24, r4
    23a0:	b1 01       	movw	r22, r2
    23a2:	a2 01       	movw	r20, r4
    23a4:	91 01       	movw	r18, r2
    23a6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
    23ae:	c8 01       	movw	r24, r16
    23b0:	b7 01       	movw	r22, r14
    23b2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    23b6:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    23ba:	7b 01       	movw	r14, r22
    23bc:	8c 01       	movw	r16, r24
    23be:	c2 58       	subi	r28, 0x82	; 130
    23c0:	df 4f       	sbci	r29, 0xFF	; 255
    23c2:	68 81       	ld	r22, Y
    23c4:	79 81       	ldd	r23, Y+1	; 0x01
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ca:	ce 57       	subi	r28, 0x7E	; 126
    23cc:	d0 40       	sbci	r29, 0x00	; 0
    23ce:	e4 96       	adiw	r28, 0x34	; 52
    23d0:	2c ad       	ldd	r18, Y+60	; 0x3c
    23d2:	3d ad       	ldd	r19, Y+61	; 0x3d
    23d4:	4e ad       	ldd	r20, Y+62	; 0x3e
    23d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    23d8:	e4 97       	sbiw	r28, 0x34	; 52
    23da:	64 c0       	rjmp	.+200    	; 0x24a4 <get_position+0xacc>
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	ec 96       	adiw	r28, 0x3c	; 60
    23e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    23e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    23e6:	ec 97       	sbiw	r28, 0x3c	; 60
    23e8:	31 97       	sbiw	r30, 0x01	; 1
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <get_position+0xa18>
    23ec:	61 e0       	ldi	r22, 0x01	; 1
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	4b 01       	movw	r8, r22
								}
								else
								{
									for(int ii = 0; ii < 3; ii++)
									{
										if(order[ii] == 1)
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	19 f4       	brne	.+6      	; 0x2400 <get_position+0xa28>
    23fa:	a2 e0       	ldi	r26, 0x02	; 2
    23fc:	8a 2e       	mov	r8, r26
    23fe:	91 2c       	mov	r9, r1
										{
											pos = ii;
										}
									}
									thetaf = atan2(-yavg, -xavg) - atan2(y1 - yavg, x1 - xavg);
    2400:	c2 01       	movw	r24, r4
    2402:	b1 01       	movw	r22, r2
    2404:	90 58       	subi	r25, 0x80	; 128
    2406:	2f a9       	ldd	r18, Y+55	; 0x37
    2408:	38 ad       	ldd	r19, Y+56	; 0x38
    240a:	49 ad       	ldd	r20, Y+57	; 0x39
    240c:	5a ad       	ldd	r21, Y+58	; 0x3a
    240e:	50 58       	subi	r21, 0x80	; 128
    2410:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
    2414:	7b 01       	movw	r14, r22
    2416:	8c 01       	movw	r16, r24
    2418:	c3 55       	subi	r28, 0x53	; 83
    241a:	df 4f       	sbci	r29, 0xFF	; 255
    241c:	68 81       	ld	r22, Y
    241e:	79 81       	ldd	r23, Y+1	; 0x01
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	cd 5a       	subi	r28, 0xAD	; 173
    2426:	d0 40       	sbci	r29, 0x00	; 0
    2428:	cf 54       	subi	r28, 0x4F	; 79
    242a:	df 4f       	sbci	r29, 0xFF	; 255
    242c:	28 81       	ld	r18, Y
    242e:	39 81       	ldd	r19, Y+1	; 0x01
    2430:	4a 81       	ldd	r20, Y+2	; 0x02
    2432:	5b 81       	ldd	r21, Y+3	; 0x03
    2434:	c1 5b       	subi	r28, 0xB1	; 177
    2436:	d0 40       	sbci	r29, 0x00	; 0
    2438:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
    243c:	9b 01       	movw	r18, r22
    243e:	ac 01       	movw	r20, r24
    2440:	c8 01       	movw	r24, r16
    2442:	b7 01       	movw	r22, r14
    2444:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2448:	ac 96       	adiw	r28, 0x2c	; 44
    244a:	6c af       	std	Y+60, r22	; 0x3c
    244c:	7d af       	std	Y+61, r23	; 0x3d
    244e:	8e af       	std	Y+62, r24	; 0x3e
    2450:	9f af       	std	Y+63, r25	; 0x3f
    2452:	ac 97       	sbiw	r28, 0x2c	; 44
									dCenter = di1 / d1 * d(xavg, yavg, 0, 0);
    2454:	6f a9       	ldd	r22, Y+55	; 0x37
    2456:	78 ad       	ldd	r23, Y+56	; 0x38
    2458:	89 ad       	ldd	r24, Y+57	; 0x39
    245a:	9a ad       	ldd	r25, Y+58	; 0x3a
    245c:	9b 01       	movw	r18, r22
    245e:	ac 01       	movw	r20, r24
    2460:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2464:	7b 01       	movw	r14, r22
    2466:	8c 01       	movw	r16, r24
    2468:	c2 01       	movw	r24, r4
    246a:	b1 01       	movw	r22, r2
    246c:	a2 01       	movw	r20, r4
    246e:	91 01       	movw	r18, r2
    2470:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2474:	9b 01       	movw	r18, r22
    2476:	ac 01       	movw	r20, r24
    2478:	c8 01       	movw	r24, r16
    247a:	b7 01       	movw	r22, r14
    247c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2480:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    2484:	7b 01       	movw	r14, r22
    2486:	8c 01       	movw	r16, r24
    2488:	ce 57       	subi	r28, 0x7E	; 126
    248a:	df 4f       	sbci	r29, 0xFF	; 255
    248c:	68 81       	ld	r22, Y
    248e:	79 81       	ldd	r23, Y+1	; 0x01
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	9b 81       	ldd	r25, Y+3	; 0x03
    2494:	c2 58       	subi	r28, 0x82	; 130
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	e8 96       	adiw	r28, 0x38	; 56
    249a:	2c ad       	ldd	r18, Y+60	; 0x3c
    249c:	3d ad       	ldd	r19, Y+61	; 0x3d
    249e:	4e ad       	ldd	r20, Y+62	; 0x3e
    24a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    24a2:	e8 97       	sbiw	r28, 0x38	; 56
    24a4:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    24a8:	a8 01       	movw	r20, r16
    24aa:	97 01       	movw	r18, r14
    24ac:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    24b0:	a8 96       	adiw	r28, 0x28	; 40
    24b2:	6c af       	std	Y+60, r22	; 0x3c
    24b4:	7d af       	std	Y+61, r23	; 0x3d
    24b6:	8e af       	std	Y+62, r24	; 0x3e
    24b8:	9f af       	std	Y+63, r25	; 0x3f
    24ba:	a8 97       	sbiw	r28, 0x28	; 40
								}

								double theta_rot_off = atan2(-yavg, -xavg);
    24bc:	c2 01       	movw	r24, r4
    24be:	b1 01       	movw	r22, r2
    24c0:	90 58       	subi	r25, 0x80	; 128
    24c2:	2f a9       	ldd	r18, Y+55	; 0x37
    24c4:	38 ad       	ldd	r19, Y+56	; 0x38
    24c6:	49 ad       	ldd	r20, Y+57	; 0x39
    24c8:	5a ad       	ldd	r21, Y+58	; 0x3a
    24ca:	50 58       	subi	r21, 0x80	; 128
    24cc:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
    24d0:	5b 01       	movw	r10, r22
    24d2:	6c 01       	movw	r12, r24
								int xp = inp[pos * 2];
								int yp = inp[pos * 2 + 1];
								double theta2 = atan2((double)(yp) - yiavg, (double)(xp) - xiavg);
    24d4:	88 0c       	add	r8, r8
    24d6:	99 1c       	adc	r9, r9
    24d8:	88 0c       	add	r8, r8
    24da:	99 1c       	adc	r9, r9
    24dc:	c5 54       	subi	r28, 0x45	; 69
    24de:	df 4f       	sbci	r29, 0xFF	; 255
    24e0:	e8 81       	ld	r30, Y
    24e2:	f9 81       	ldd	r31, Y+1	; 0x01
    24e4:	cb 5b       	subi	r28, 0xBB	; 187
    24e6:	d0 40       	sbci	r29, 0x00	; 0
    24e8:	e8 0d       	add	r30, r8
    24ea:	f9 1d       	adc	r31, r9
    24ec:	62 81       	ldd	r22, Z+2	; 0x02
    24ee:	73 81       	ldd	r23, Z+3	; 0x03
    24f0:	88 27       	eor	r24, r24
    24f2:	77 fd       	sbrc	r23, 7
    24f4:	80 95       	com	r24
    24f6:	98 2f       	mov	r25, r24
    24f8:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    24fc:	ca 57       	subi	r28, 0x7A	; 122
    24fe:	df 4f       	sbci	r29, 0xFF	; 255
    2500:	28 81       	ld	r18, Y
    2502:	39 81       	ldd	r19, Y+1	; 0x01
    2504:	4a 81       	ldd	r20, Y+2	; 0x02
    2506:	5b 81       	ldd	r21, Y+3	; 0x03
    2508:	c6 58       	subi	r28, 0x86	; 134
    250a:	d0 40       	sbci	r29, 0x00	; 0
    250c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2510:	7b 01       	movw	r14, r22
    2512:	8c 01       	movw	r16, r24
    2514:	c5 54       	subi	r28, 0x45	; 69
    2516:	df 4f       	sbci	r29, 0xFF	; 255
    2518:	28 81       	ld	r18, Y
    251a:	39 81       	ldd	r19, Y+1	; 0x01
    251c:	cb 5b       	subi	r28, 0xBB	; 187
    251e:	d0 40       	sbci	r29, 0x00	; 0
    2520:	82 0e       	add	r8, r18
    2522:	93 1e       	adc	r9, r19
    2524:	d4 01       	movw	r26, r8
    2526:	6d 91       	ld	r22, X+
    2528:	7c 91       	ld	r23, X
    252a:	88 27       	eor	r24, r24
    252c:	77 fd       	sbrc	r23, 7
    252e:	80 95       	com	r24
    2530:	98 2f       	mov	r25, r24
    2532:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2536:	c6 57       	subi	r28, 0x76	; 118
    2538:	df 4f       	sbci	r29, 0xFF	; 255
    253a:	28 81       	ld	r18, Y
    253c:	39 81       	ldd	r19, Y+1	; 0x01
    253e:	4a 81       	ldd	r20, Y+2	; 0x02
    2540:	5b 81       	ldd	r21, Y+3	; 0x03
    2542:	ca 58       	subi	r28, 0x8A	; 138
    2544:	d0 40       	sbci	r29, 0x00	; 0
    2546:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    254a:	9b 01       	movw	r18, r22
    254c:	ac 01       	movw	r20, r24
    254e:	c8 01       	movw	r24, r16
    2550:	b7 01       	movw	r22, r14
    2552:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
								theta_rot = theta2 + thetaf - theta_rot_off;
    2556:	ac 96       	adiw	r28, 0x2c	; 44
    2558:	2c ad       	ldd	r18, Y+60	; 0x3c
    255a:	3d ad       	ldd	r19, Y+61	; 0x3d
    255c:	4e ad       	ldd	r20, Y+62	; 0x3e
    255e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2560:	ac 97       	sbiw	r28, 0x2c	; 44
    2562:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2566:	a6 01       	movw	r20, r12
    2568:	95 01       	movw	r18, r10
    256a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    256e:	c1 57       	subi	r28, 0x71	; 113
    2570:	df 4f       	sbci	r29, 0xFF	; 255
    2572:	68 83       	st	Y, r22
    2574:	79 83       	std	Y+1, r23	; 0x01
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	9b 83       	std	Y+3, r25	; 0x03
    257a:	cf 58       	subi	r28, 0x8F	; 143
    257c:	d0 40       	sbci	r29, 0x00	; 0
								x0 = xiavg + cos(theta_rot_off + theta_rot) * dCenter;
    257e:	c6 01       	movw	r24, r12
    2580:	b5 01       	movw	r22, r10
    2582:	c1 57       	subi	r28, 0x71	; 113
    2584:	df 4f       	sbci	r29, 0xFF	; 255
    2586:	28 81       	ld	r18, Y
    2588:	39 81       	ldd	r19, Y+1	; 0x01
    258a:	4a 81       	ldd	r20, Y+2	; 0x02
    258c:	5b 81       	ldd	r21, Y+3	; 0x03
    258e:	cf 58       	subi	r28, 0x8F	; 143
    2590:	d0 40       	sbci	r29, 0x00	; 0
    2592:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2596:	7b 01       	movw	r14, r22
    2598:	8c 01       	movw	r16, r24
    259a:	c8 01       	movw	r24, r16
    259c:	0e 94 3e 1a 	call	0x347c	; 0x347c <cos>
    25a0:	a8 96       	adiw	r28, 0x28	; 40
    25a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    25a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    25a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    25a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    25aa:	a8 97       	sbiw	r28, 0x28	; 40
    25ac:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    25b0:	9b 01       	movw	r18, r22
    25b2:	ac 01       	movw	r20, r24
    25b4:	c6 57       	subi	r28, 0x76	; 118
    25b6:	df 4f       	sbci	r29, 0xFF	; 255
    25b8:	68 81       	ld	r22, Y
    25ba:	79 81       	ldd	r23, Y+1	; 0x01
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	ca 58       	subi	r28, 0x8A	; 138
    25c2:	d0 40       	sbci	r29, 0x00	; 0
    25c4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    25c8:	c9 56       	subi	r28, 0x69	; 105
    25ca:	df 4f       	sbci	r29, 0xFF	; 255
    25cc:	68 83       	st	Y, r22
    25ce:	79 83       	std	Y+1, r23	; 0x01
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	9b 83       	std	Y+3, r25	; 0x03
    25d4:	c7 59       	subi	r28, 0x97	; 151
    25d6:	d0 40       	sbci	r29, 0x00	; 0
								y0 = yiavg + sin(theta_rot_off + theta_rot) * dCenter;
    25d8:	b7 01       	movw	r22, r14
    25da:	c8 01       	movw	r24, r16
    25dc:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <sin>
    25e0:	a8 96       	adiw	r28, 0x28	; 40
    25e2:	2c ad       	ldd	r18, Y+60	; 0x3c
    25e4:	3d ad       	ldd	r19, Y+61	; 0x3d
    25e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    25e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    25ea:	a8 97       	sbiw	r28, 0x28	; 40
    25ec:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    25f0:	9b 01       	movw	r18, r22
    25f2:	ac 01       	movw	r20, r24
    25f4:	ca 57       	subi	r28, 0x7A	; 122
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	68 81       	ld	r22, Y
    25fa:	79 81       	ldd	r23, Y+1	; 0x01
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	c6 58       	subi	r28, 0x86	; 134
    2602:	d0 40       	sbci	r29, 0x00	; 0
    2604:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2608:	cd 56       	subi	r28, 0x6D	; 109
    260a:	df 4f       	sbci	r29, 0xFF	; 255
    260c:	68 83       	st	Y, r22
    260e:	79 83       	std	Y+1, r23	; 0x01
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	9b 83       	std	Y+3, r25	; 0x03
    2614:	c3 59       	subi	r28, 0x93	; 147
    2616:	d0 40       	sbci	r29, 0x00	; 0
    2618:	e0 96       	adiw	r28, 0x30	; 48
    261a:	8c ad       	ldd	r24, Y+60	; 0x3c
    261c:	9d ad       	ldd	r25, Y+61	; 0x3d
    261e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2620:	bf ad       	ldd	r27, Y+63	; 0x3f
    2622:	e0 97       	sbiw	r28, 0x30	; 48
    2624:	c3 53       	subi	r28, 0x33	; 51
    2626:	df 4f       	sbci	r29, 0xFF	; 255
    2628:	88 83       	st	Y, r24
    262a:	cd 5c       	subi	r28, 0xCD	; 205
    262c:	d0 40       	sbci	r29, 0x00	; 0
    262e:	c2 53       	subi	r28, 0x32	; 50
    2630:	df 4f       	sbci	r29, 0xFF	; 255
    2632:	98 83       	st	Y, r25
    2634:	ce 5c       	subi	r28, 0xCE	; 206
    2636:	d0 40       	sbci	r29, 0x00	; 0
    2638:	c1 53       	subi	r28, 0x31	; 49
    263a:	df 4f       	sbci	r29, 0xFF	; 255
    263c:	a8 83       	st	Y, r26
    263e:	cf 5c       	subi	r28, 0xCF	; 207
    2640:	d0 40       	sbci	r29, 0x00	; 0
    2642:	c0 53       	subi	r28, 0x30	; 48
    2644:	df 4f       	sbci	r29, 0xFF	; 255
    2646:	b8 83       	st	Y, r27
    2648:	c0 5d       	subi	r28, 0xD0	; 208
    264a:	d0 40       	sbci	r29, 0x00	; 0
    264c:	c2 57       	subi	r28, 0x72	; 114
    264e:	df 4f       	sbci	r29, 0xFF	; 255
    2650:	18 82       	st	Y, r1
    2652:	ce 58       	subi	r28, 0x8E	; 142
    2654:	d0 40       	sbci	r29, 0x00	; 0
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
				{
					for(int k = 0; k < 4; k++)
    2656:	ea 96       	adiw	r28, 0x3a	; 58
    2658:	ee ad       	ldd	r30, Y+62	; 0x3e
    265a:	ff ad       	ldd	r31, Y+63	; 0x3f
    265c:	ea 97       	sbiw	r28, 0x3a	; 58
    265e:	31 96       	adiw	r30, 0x01	; 1
    2660:	ea 96       	adiw	r28, 0x3a	; 58
    2662:	ff af       	std	Y+63, r31	; 0x3f
    2664:	ee af       	std	Y+62, r30	; 0x3e
    2666:	ea 97       	sbiw	r28, 0x3a	; 58
    2668:	24 96       	adiw	r28, 0x04	; 4
    266a:	2e ad       	ldd	r18, Y+62	; 0x3e
    266c:	3f ad       	ldd	r19, Y+63	; 0x3f
    266e:	24 97       	sbiw	r28, 0x04	; 4
    2670:	21 50       	subi	r18, 0x01	; 1
    2672:	30 40       	sbci	r19, 0x00	; 0
    2674:	24 96       	adiw	r28, 0x04	; 4
    2676:	3f af       	std	Y+63, r19	; 0x3f
    2678:	2e af       	std	Y+62, r18	; 0x3e
    267a:	24 97       	sbiw	r28, 0x04	; 4
    267c:	22 96       	adiw	r28, 0x02	; 2
    267e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2680:	9f ad       	ldd	r25, Y+63	; 0x3f
    2682:	22 97       	sbiw	r28, 0x02	; 2
    2684:	02 96       	adiw	r24, 0x02	; 2
    2686:	22 96       	adiw	r28, 0x02	; 2
    2688:	9f af       	std	Y+63, r25	; 0x3f
    268a:	8e af       	std	Y+62, r24	; 0x3e
    268c:	22 97       	sbiw	r28, 0x02	; 2
    268e:	26 96       	adiw	r28, 0x06	; 6
    2690:	ae ad       	ldd	r26, Y+62	; 0x3e
    2692:	bf ad       	ldd	r27, Y+63	; 0x3f
    2694:	26 97       	sbiw	r28, 0x06	; 6
    2696:	12 97       	sbiw	r26, 0x02	; 2
    2698:	26 96       	adiw	r28, 0x06	; 6
    269a:	bf af       	std	Y+63, r27	; 0x3f
    269c:	ae af       	std	Y+62, r26	; 0x3e
    269e:	26 97       	sbiw	r28, 0x06	; 6
    26a0:	34 97       	sbiw	r30, 0x04	; 4
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <get_position+0xcce>
    26a4:	00 cc       	rjmp	.-2048   	; 0x1ea6 <get_position+0x4ce>
				
		double xes[] = {x1, x2, x3, x4};
		double yes[] = {y1, y2, y3, y4};
		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
    26a6:	ec 96       	adiw	r28, 0x3c	; 60
    26a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    26aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    26ac:	ec 97       	sbiw	r28, 0x3c	; 60
    26ae:	31 96       	adiw	r30, 0x01	; 1
    26b0:	ec 96       	adiw	r28, 0x3c	; 60
    26b2:	ff af       	std	Y+63, r31	; 0x3f
    26b4:	ee af       	std	Y+62, r30	; 0x3e
    26b6:	ec 97       	sbiw	r28, 0x3c	; 60
    26b8:	29 a9       	ldd	r18, Y+49	; 0x31
    26ba:	3a a9       	ldd	r19, Y+50	; 0x32
    26bc:	21 50       	subi	r18, 0x01	; 1
    26be:	30 40       	sbci	r19, 0x00	; 0
    26c0:	3a ab       	std	Y+50, r19	; 0x32
    26c2:	29 ab       	std	Y+49, r18	; 0x31
    26c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c8:	02 96       	adiw	r24, 0x02	; 2
    26ca:	9e af       	std	Y+62, r25	; 0x3e
    26cc:	8d af       	std	Y+61, r24	; 0x3d
    26ce:	34 97       	sbiw	r30, 0x04	; 4
    26d0:	09 f0       	breq	.+2      	; 0x26d4 <get_position+0xcfc>
    26d2:	be cb       	rjmp	.-2180   	; 0x1e50 <get_position+0x478>
		diord[1] = di2/mini;
		diord[2] = di3/mini;
				
		double xes[] = {x1, x2, x3, x4};
		double yes[] = {y1, y2, y3, y4};
		for(int i = 0; i < 4; i++)
    26d4:	ee 96       	adiw	r28, 0x3e	; 62
    26d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    26d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    26da:	ee 97       	sbiw	r28, 0x3e	; 62
    26dc:	11 96       	adiw	r26, 0x01	; 1
    26de:	ee 96       	adiw	r28, 0x3e	; 62
    26e0:	bf af       	std	Y+63, r27	; 0x3f
    26e2:	ae af       	std	Y+62, r26	; 0x3e
    26e4:	ee 97       	sbiw	r28, 0x3e	; 62
    26e6:	eb a9       	ldd	r30, Y+51	; 0x33
    26e8:	fc a9       	ldd	r31, Y+52	; 0x34
    26ea:	32 96       	adiw	r30, 0x02	; 2
    26ec:	fc ab       	std	Y+52, r31	; 0x34
    26ee:	eb ab       	std	Y+51, r30	; 0x33
    26f0:	14 97       	sbiw	r26, 0x04	; 4
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <get_position+0xd1e>
    26f4:	7c c4       	rjmp	.+2296   	; 0x2fee <get_position+0x1616>
    26f6:	2a e0       	ldi	r18, 0x0A	; 10
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	ee 96       	adiw	r28, 0x3e	; 62
    26fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    26fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    2700:	ee 97       	sbiw	r28, 0x3e	; 62
    2702:	28 1b       	sub	r18, r24
    2704:	39 0b       	sbc	r19, r25
    2706:	3a ab       	std	Y+50, r19	; 0x32
    2708:	29 ab       	std	Y+49, r18	; 0x31
    270a:	de 01       	movw	r26, r28
    270c:	19 96       	adiw	r26, 0x09	; 9
    270e:	be af       	std	Y+62, r27	; 0x3e
    2710:	ad af       	std	Y+61, r26	; 0x3d
    2712:	ec 96       	adiw	r28, 0x3c	; 60
    2714:	1f ae       	std	Y+63, r1	; 0x3f
    2716:	1e ae       	std	Y+62, r1	; 0x3e
    2718:	ec 97       	sbiw	r28, 0x3c	; 60
    271a:	9a cb       	rjmp	.-2252   	; 0x1e50 <get_position+0x478>
		double d1 = d(x1, y1, xavg, yavg);
		double d2 = d(x2, y2, xavg, yavg);
		double d3 = d(x3, y3, xavg, yavg);
		double d4 = d(x4, y4, xavg, yavg);
		
		double dord[] = {d1, d2, d3, d4};
    271c:	8d ea       	ldi	r24, 0xAD	; 173
    271e:	97 e2       	ldi	r25, 0x27	; 39
    2720:	ab e3       	ldi	r26, 0x3B	; 59
    2722:	b1 e4       	ldi	r27, 0x41	; 65
    2724:	89 a3       	std	Y+33, r24	; 0x21
    2726:	9a a3       	std	Y+34, r25	; 0x22
    2728:	ab a3       	std	Y+35, r26	; 0x23
    272a:	bc a3       	std	Y+36, r27	; 0x24
    272c:	8d e0       	ldi	r24, 0x0D	; 13
    272e:	92 e6       	ldi	r25, 0x62	; 98
    2730:	ad e4       	ldi	r26, 0x4D	; 77
    2732:	b1 e4       	ldi	r27, 0x41	; 65
    2734:	8d a3       	std	Y+37, r24	; 0x25
    2736:	9e a3       	std	Y+38, r25	; 0x26
    2738:	af a3       	std	Y+39, r26	; 0x27
    273a:	b8 a7       	std	Y+40, r27	; 0x28
    273c:	89 e1       	ldi	r24, 0x19	; 25
    273e:	97 e7       	ldi	r25, 0x77	; 119
    2740:	aa e8       	ldi	r26, 0x8A	; 138
    2742:	b1 e4       	ldi	r27, 0x41	; 65
    2744:	89 a7       	std	Y+41, r24	; 0x29
    2746:	9a a7       	std	Y+42, r25	; 0x2a
    2748:	ab a7       	std	Y+43, r26	; 0x2b
    274a:	bc a7       	std	Y+44, r27	; 0x2c
    274c:	88 ef       	ldi	r24, 0xF8	; 248
    274e:	93 e7       	ldi	r25, 0x73	; 115
    2750:	ad e2       	ldi	r26, 0x2D	; 45
    2752:	b1 e4       	ldi	r27, 0x41	; 65
    2754:	8d a7       	std	Y+45, r24	; 0x2d
    2756:	9e a7       	std	Y+46, r25	; 0x2e
    2758:	af a7       	std	Y+47, r26	; 0x2f
    275a:	b8 ab       	std	Y+48, r27	; 0x30
    275c:	8e 01       	movw	r16, r28
    275e:	0f 5d       	subi	r16, 0xDF	; 223
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
		double mind = min4(d1, d2, d3, d4);
		for(int ii = 0; ii < 4; ii++)
    2762:	71 e3       	ldi	r23, 0x31	; 49
    2764:	c7 2e       	mov	r12, r23
    2766:	d1 2c       	mov	r13, r1
    2768:	cc 0e       	add	r12, r28
    276a:	dd 1e       	adc	r13, r29
			dord[ii] /= mind;
    276c:	f8 01       	movw	r30, r16
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	28 ef       	ldi	r18, 0xF8	; 248
    2778:	33 e7       	ldi	r19, 0x73	; 115
    277a:	4d e2       	ldi	r20, 0x2D	; 45
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    2782:	d8 01       	movw	r26, r16
    2784:	6d 93       	st	X+, r22
    2786:	7d 93       	st	X+, r23
    2788:	8d 93       	st	X+, r24
    278a:	9d 93       	st	X+, r25
    278c:	8d 01       	movw	r16, r26
		double d3 = d(x3, y3, xavg, yavg);
		double d4 = d(x4, y4, xavg, yavg);
		
		double dord[] = {d1, d2, d3, d4};
		double mind = min4(d1, d2, d3, d4);
		for(int ii = 0; ii < 4; ii++)
    278e:	ac 15       	cp	r26, r12
    2790:	bd 05       	cpc	r27, r13
    2792:	61 f7       	brne	.-40     	; 0x276c <get_position+0xd94>
			dord[ii] /= mind;

		double xiavg = (xi1 + xi2 + xi3 + yi4)/4.0;
    2794:	c1 56       	subi	r28, 0x61	; 97
    2796:	df 4f       	sbci	r29, 0xFF	; 255
    2798:	68 81       	ld	r22, Y
    279a:	79 81       	ldd	r23, Y+1	; 0x01
    279c:	cf 59       	subi	r28, 0x9F	; 159
    279e:	d0 40       	sbci	r29, 0x00	; 0
    27a0:	66 0d       	add	r22, r6
    27a2:	77 1d       	adc	r23, r7
    27a4:	6e 0d       	add	r22, r14
    27a6:	7f 1d       	adc	r23, r15
    27a8:	64 0d       	add	r22, r4
    27aa:	75 1d       	adc	r23, r5
    27ac:	88 27       	eor	r24, r24
    27ae:	77 fd       	sbrc	r23, 7
    27b0:	80 95       	com	r24
    27b2:	98 2f       	mov	r25, r24
    27b4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5e e3       	ldi	r21, 0x3E	; 62
    27c0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    27c4:	a4 96       	adiw	r28, 0x24	; 36
    27c6:	6c af       	std	Y+60, r22	; 0x3c
    27c8:	7d af       	std	Y+61, r23	; 0x3d
    27ca:	8e af       	std	Y+62, r24	; 0x3e
    27cc:	9f af       	std	Y+63, r25	; 0x3f
    27ce:	a4 97       	sbiw	r28, 0x24	; 36
		double yiavg = (yi1 + yi2 + yi3 + yi4)/4.0;
    27d0:	b1 01       	movw	r22, r2
    27d2:	68 0d       	add	r22, r8
    27d4:	79 1d       	adc	r23, r9
    27d6:	c3 56       	subi	r28, 0x63	; 99
    27d8:	df 4f       	sbci	r29, 0xFF	; 255
    27da:	e8 81       	ld	r30, Y
    27dc:	f9 81       	ldd	r31, Y+1	; 0x01
    27de:	cd 59       	subi	r28, 0x9D	; 157
    27e0:	d0 40       	sbci	r29, 0x00	; 0
    27e2:	6e 0f       	add	r22, r30
    27e4:	7f 1f       	adc	r23, r31
    27e6:	64 0d       	add	r22, r4
    27e8:	75 1d       	adc	r23, r5
    27ea:	88 27       	eor	r24, r24
    27ec:	77 fd       	sbrc	r23, 7
    27ee:	80 95       	com	r24
    27f0:	98 2f       	mov	r25, r24
    27f2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5e e3       	ldi	r21, 0x3E	; 62
    27fe:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2802:	a0 96       	adiw	r28, 0x20	; 32
    2804:	6c af       	std	Y+60, r22	; 0x3c
    2806:	7d af       	std	Y+61, r23	; 0x3d
    2808:	8e af       	std	Y+62, r24	; 0x3e
    280a:	9f af       	std	Y+63, r25	; 0x3f
    280c:	a0 97       	sbiw	r28, 0x20	; 32
		
		double di1 = d(xi1, yi1, xiavg, yiavg);
    280e:	b7 01       	movw	r22, r14
    2810:	88 27       	eor	r24, r24
    2812:	77 fd       	sbrc	r23, 7
    2814:	80 95       	com	r24
    2816:	98 2f       	mov	r25, r24
    2818:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    281c:	a4 96       	adiw	r28, 0x24	; 36
    281e:	2c ad       	ldd	r18, Y+60	; 0x3c
    2820:	3d ad       	ldd	r19, Y+61	; 0x3d
    2822:	4e ad       	ldd	r20, Y+62	; 0x3e
    2824:	5f ad       	ldd	r21, Y+63	; 0x3f
    2826:	a4 97       	sbiw	r28, 0x24	; 36
    2828:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    282c:	5b 01       	movw	r10, r22
    282e:	6c 01       	movw	r12, r24
    2830:	b4 01       	movw	r22, r8
    2832:	88 27       	eor	r24, r24
    2834:	77 fd       	sbrc	r23, 7
    2836:	80 95       	com	r24
    2838:	98 2f       	mov	r25, r24
    283a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    283e:	a0 96       	adiw	r28, 0x20	; 32
    2840:	2c ad       	ldd	r18, Y+60	; 0x3c
    2842:	3d ad       	ldd	r19, Y+61	; 0x3d
    2844:	4e ad       	ldd	r20, Y+62	; 0x3e
    2846:	5f ad       	ldd	r21, Y+63	; 0x3f
    2848:	a0 97       	sbiw	r28, 0x20	; 32
    284a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    284e:	7b 01       	movw	r14, r22
    2850:	8c 01       	movw	r16, r24
    2852:	c6 01       	movw	r24, r12
    2854:	b5 01       	movw	r22, r10
    2856:	a6 01       	movw	r20, r12
    2858:	95 01       	movw	r18, r10
    285a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    285e:	5b 01       	movw	r10, r22
    2860:	6c 01       	movw	r12, r24
    2862:	c8 01       	movw	r24, r16
    2864:	b7 01       	movw	r22, r14
    2866:	a8 01       	movw	r20, r16
    2868:	97 01       	movw	r18, r14
    286a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	c6 01       	movw	r24, r12
    2874:	b5 01       	movw	r22, r10
    2876:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    287a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    287e:	6c 96       	adiw	r28, 0x1c	; 28
    2880:	6c af       	std	Y+60, r22	; 0x3c
    2882:	7d af       	std	Y+61, r23	; 0x3d
    2884:	8e af       	std	Y+62, r24	; 0x3e
    2886:	9f af       	std	Y+63, r25	; 0x3f
    2888:	6c 97       	sbiw	r28, 0x1c	; 28
		double di2 = d(xi2, yi2, xiavg, yiavg);
    288a:	b3 01       	movw	r22, r6
    288c:	88 27       	eor	r24, r24
    288e:	77 fd       	sbrc	r23, 7
    2890:	80 95       	com	r24
    2892:	98 2f       	mov	r25, r24
    2894:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2898:	a4 96       	adiw	r28, 0x24	; 36
    289a:	2c ad       	ldd	r18, Y+60	; 0x3c
    289c:	3d ad       	ldd	r19, Y+61	; 0x3d
    289e:	4e ad       	ldd	r20, Y+62	; 0x3e
    28a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    28a2:	a4 97       	sbiw	r28, 0x24	; 36
    28a4:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    28a8:	5b 01       	movw	r10, r22
    28aa:	6c 01       	movw	r12, r24
    28ac:	b1 01       	movw	r22, r2
    28ae:	88 27       	eor	r24, r24
    28b0:	77 fd       	sbrc	r23, 7
    28b2:	80 95       	com	r24
    28b4:	98 2f       	mov	r25, r24
    28b6:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    28ba:	a0 96       	adiw	r28, 0x20	; 32
    28bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    28be:	3d ad       	ldd	r19, Y+61	; 0x3d
    28c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    28c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    28c4:	a0 97       	sbiw	r28, 0x20	; 32
    28c6:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    28ca:	7b 01       	movw	r14, r22
    28cc:	8c 01       	movw	r16, r24
    28ce:	c6 01       	movw	r24, r12
    28d0:	b5 01       	movw	r22, r10
    28d2:	a6 01       	movw	r20, r12
    28d4:	95 01       	movw	r18, r10
    28d6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    28da:	5b 01       	movw	r10, r22
    28dc:	6c 01       	movw	r12, r24
    28de:	c8 01       	movw	r24, r16
    28e0:	b7 01       	movw	r22, r14
    28e2:	a8 01       	movw	r20, r16
    28e4:	97 01       	movw	r18, r14
    28e6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	c6 01       	movw	r24, r12
    28f0:	b5 01       	movw	r22, r10
    28f2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    28f6:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    28fa:	68 96       	adiw	r28, 0x18	; 24
    28fc:	6c af       	std	Y+60, r22	; 0x3c
    28fe:	7d af       	std	Y+61, r23	; 0x3d
    2900:	8e af       	std	Y+62, r24	; 0x3e
    2902:	9f af       	std	Y+63, r25	; 0x3f
    2904:	68 97       	sbiw	r28, 0x18	; 24
		double di3 = d(xi3, yi3, xiavg, yiavg);
    2906:	c1 56       	subi	r28, 0x61	; 97
    2908:	df 4f       	sbci	r29, 0xFF	; 255
    290a:	28 81       	ld	r18, Y
    290c:	39 81       	ldd	r19, Y+1	; 0x01
    290e:	cf 59       	subi	r28, 0x9F	; 159
    2910:	d0 40       	sbci	r29, 0x00	; 0
    2912:	b9 01       	movw	r22, r18
    2914:	88 27       	eor	r24, r24
    2916:	77 fd       	sbrc	r23, 7
    2918:	80 95       	com	r24
    291a:	98 2f       	mov	r25, r24
    291c:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2920:	a4 96       	adiw	r28, 0x24	; 36
    2922:	2c ad       	ldd	r18, Y+60	; 0x3c
    2924:	3d ad       	ldd	r19, Y+61	; 0x3d
    2926:	4e ad       	ldd	r20, Y+62	; 0x3e
    2928:	5f ad       	ldd	r21, Y+63	; 0x3f
    292a:	a4 97       	sbiw	r28, 0x24	; 36
    292c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2930:	5b 01       	movw	r10, r22
    2932:	6c 01       	movw	r12, r24
    2934:	c3 56       	subi	r28, 0x63	; 99
    2936:	df 4f       	sbci	r29, 0xFF	; 255
    2938:	a8 81       	ld	r26, Y
    293a:	b9 81       	ldd	r27, Y+1	; 0x01
    293c:	cd 59       	subi	r28, 0x9D	; 157
    293e:	d0 40       	sbci	r29, 0x00	; 0
    2940:	bd 01       	movw	r22, r26
    2942:	88 27       	eor	r24, r24
    2944:	77 fd       	sbrc	r23, 7
    2946:	80 95       	com	r24
    2948:	98 2f       	mov	r25, r24
    294a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    294e:	a0 96       	adiw	r28, 0x20	; 32
    2950:	2c ad       	ldd	r18, Y+60	; 0x3c
    2952:	3d ad       	ldd	r19, Y+61	; 0x3d
    2954:	4e ad       	ldd	r20, Y+62	; 0x3e
    2956:	5f ad       	ldd	r21, Y+63	; 0x3f
    2958:	a0 97       	sbiw	r28, 0x20	; 32
    295a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    295e:	7b 01       	movw	r14, r22
    2960:	8c 01       	movw	r16, r24
    2962:	c6 01       	movw	r24, r12
    2964:	b5 01       	movw	r22, r10
    2966:	a6 01       	movw	r20, r12
    2968:	95 01       	movw	r18, r10
    296a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    296e:	5b 01       	movw	r10, r22
    2970:	6c 01       	movw	r12, r24
    2972:	c8 01       	movw	r24, r16
    2974:	b7 01       	movw	r22, r14
    2976:	a8 01       	movw	r20, r16
    2978:	97 01       	movw	r18, r14
    297a:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	c6 01       	movw	r24, r12
    2984:	b5 01       	movw	r22, r10
    2986:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    298a:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    298e:	64 96       	adiw	r28, 0x14	; 20
    2990:	6c af       	std	Y+60, r22	; 0x3c
    2992:	7d af       	std	Y+61, r23	; 0x3d
    2994:	8e af       	std	Y+62, r24	; 0x3e
    2996:	9f af       	std	Y+63, r25	; 0x3f
    2998:	64 97       	sbiw	r28, 0x14	; 20
		double di4 = d(xi4, yi4, xiavg, yiavg);
    299a:	c5 56       	subi	r28, 0x65	; 101
    299c:	df 4f       	sbci	r29, 0xFF	; 255
    299e:	e8 81       	ld	r30, Y
    29a0:	f9 81       	ldd	r31, Y+1	; 0x01
    29a2:	cb 59       	subi	r28, 0x9B	; 155
    29a4:	d0 40       	sbci	r29, 0x00	; 0
    29a6:	bf 01       	movw	r22, r30
    29a8:	88 27       	eor	r24, r24
    29aa:	77 fd       	sbrc	r23, 7
    29ac:	80 95       	com	r24
    29ae:	98 2f       	mov	r25, r24
    29b0:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    29b4:	a4 96       	adiw	r28, 0x24	; 36
    29b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    29b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    29ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    29bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    29be:	a4 97       	sbiw	r28, 0x24	; 36
    29c0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    29c4:	5b 01       	movw	r10, r22
    29c6:	6c 01       	movw	r12, r24
    29c8:	b2 01       	movw	r22, r4
    29ca:	88 27       	eor	r24, r24
    29cc:	77 fd       	sbrc	r23, 7
    29ce:	80 95       	com	r24
    29d0:	98 2f       	mov	r25, r24
    29d2:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    29d6:	a0 96       	adiw	r28, 0x20	; 32
    29d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    29da:	3d ad       	ldd	r19, Y+61	; 0x3d
    29dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    29de:	5f ad       	ldd	r21, Y+63	; 0x3f
    29e0:	a0 97       	sbiw	r28, 0x20	; 32
    29e2:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    29e6:	7b 01       	movw	r14, r22
    29e8:	8c 01       	movw	r16, r24
    29ea:	c6 01       	movw	r24, r12
    29ec:	b5 01       	movw	r22, r10
    29ee:	a6 01       	movw	r20, r12
    29f0:	95 01       	movw	r18, r10
    29f2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    29f6:	5b 01       	movw	r10, r22
    29f8:	6c 01       	movw	r12, r24
    29fa:	c8 01       	movw	r24, r16
    29fc:	b7 01       	movw	r22, r14
    29fe:	a8 01       	movw	r20, r16
    2a00:	97 01       	movw	r18, r14
    2a02:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2a06:	9b 01       	movw	r18, r22
    2a08:	ac 01       	movw	r20, r24
    2a0a:	c6 01       	movw	r24, r12
    2a0c:	b5 01       	movw	r22, r10
    2a0e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2a12:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    2a16:	2b 01       	movw	r4, r22
    2a18:	3c 01       	movw	r6, r24
		
		int diord[] = {0,0,0,0};
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	39 96       	adiw	r30, 0x09	; 9
    2a1e:	88 e0       	ldi	r24, 0x08	; 8
    2a20:	df 01       	movw	r26, r30
    2a22:	1d 92       	st	X+, r1
    2a24:	8a 95       	dec	r24
    2a26:	e9 f7       	brne	.-6      	; 0x2a22 <get_position+0x104a>
}

double min4(double a, double b, double c, double d)
{
	double ret = a;
	if(b < ret)
    2a28:	68 96       	adiw	r28, 0x18	; 24
    2a2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a30:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a32:	68 97       	sbiw	r28, 0x18	; 24
    2a34:	6c 96       	adiw	r28, 0x1c	; 28
    2a36:	2c ad       	ldd	r18, Y+60	; 0x3c
    2a38:	3d ad       	ldd	r19, Y+61	; 0x3d
    2a3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2a3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2a3e:	6c 97       	sbiw	r28, 0x1c	; 28
    2a40:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	3c f4       	brge	.+14     	; 0x2a56 <get_position+0x107e>
    2a48:	68 96       	adiw	r28, 0x18	; 24
    2a4a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a4c:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a4e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a50:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a52:	68 97       	sbiw	r28, 0x18	; 24
    2a54:	06 c0       	rjmp	.+12     	; 0x2a62 <get_position+0x108a>
    2a56:	6c 96       	adiw	r28, 0x1c	; 28
    2a58:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a5a:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a5c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a5e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a60:	6c 97       	sbiw	r28, 0x1c	; 28
    2a62:	7c 01       	movw	r14, r24
    2a64:	8d 01       	movw	r16, r26
		ret = b;
	if(c < ret)
    2a66:	64 96       	adiw	r28, 0x14	; 20
    2a68:	6c ad       	ldd	r22, Y+60	; 0x3c
    2a6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2a6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2a6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a70:	64 97       	sbiw	r28, 0x14	; 20
    2a72:	97 01       	movw	r18, r14
    2a74:	ad 01       	movw	r20, r26
    2a76:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	44 f4       	brge	.+16     	; 0x2a8e <get_position+0x10b6>
    2a7e:	64 96       	adiw	r28, 0x14	; 20
    2a80:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a82:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a84:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a86:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a88:	64 97       	sbiw	r28, 0x14	; 20
    2a8a:	7c 01       	movw	r14, r24
    2a8c:	8d 01       	movw	r16, r26
		ret = c;
	if(d < ret)
    2a8e:	c3 01       	movw	r24, r6
    2a90:	b2 01       	movw	r22, r4
    2a92:	97 01       	movw	r18, r14
    2a94:	a8 01       	movw	r20, r16
    2a96:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	1c f4       	brge	.+6      	; 0x2aa4 <get_position+0x10cc>
    2a9e:	53 01       	movw	r10, r6
    2aa0:	42 01       	movw	r8, r4
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <get_position+0x10d4>
    2aa4:	c7 01       	movw	r24, r14
    2aa6:	d8 01       	movw	r26, r16
    2aa8:	4c 01       	movw	r8, r24
    2aaa:	5d 01       	movw	r10, r26
		double di3 = d(xi3, yi3, xiavg, yiavg);
		double di4 = d(xi4, yi4, xiavg, yiavg);
		
		int diord[] = {0,0,0,0};
		double mini = min4(di1, di2, di3, di4);
		diord[0] = di1/mini;
    2aac:	6c 96       	adiw	r28, 0x1c	; 28
    2aae:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ab0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ab2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ab4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ab6:	6c 97       	sbiw	r28, 0x1c	; 28
    2ab8:	a5 01       	movw	r20, r10
    2aba:	94 01       	movw	r18, r8
    2abc:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    2ac0:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    2ac4:	6b 01       	movw	r12, r22
    2ac6:	7a 87       	std	Y+10, r23	; 0x0a
    2ac8:	69 87       	std	Y+9, r22	; 0x09
		diord[1] = di2/mini;
    2aca:	68 96       	adiw	r28, 0x18	; 24
    2acc:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ace:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ad0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ad2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ad4:	68 97       	sbiw	r28, 0x18	; 24
    2ad6:	a5 01       	movw	r20, r10
    2ad8:	94 01       	movw	r18, r8
    2ada:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    2ade:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    2ae2:	7b 01       	movw	r14, r22
    2ae4:	7c 87       	std	Y+12, r23	; 0x0c
    2ae6:	6b 87       	std	Y+11, r22	; 0x0b
		diord[2] = di3/mini;
    2ae8:	64 96       	adiw	r28, 0x14	; 20
    2aea:	6c ad       	ldd	r22, Y+60	; 0x3c
    2aec:	7d ad       	ldd	r23, Y+61	; 0x3d
    2aee:	8e ad       	ldd	r24, Y+62	; 0x3e
    2af0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2af2:	64 97       	sbiw	r28, 0x14	; 20
    2af4:	a5 01       	movw	r20, r10
    2af6:	94 01       	movw	r18, r8
    2af8:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    2afc:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    2b00:	8b 01       	movw	r16, r22
    2b02:	7e 87       	std	Y+14, r23	; 0x0e
    2b04:	6d 87       	std	Y+13, r22	; 0x0d
		diord[3] = di4/mini;
    2b06:	c3 01       	movw	r24, r6
    2b08:	b2 01       	movw	r22, r4
    2b0a:	a5 01       	movw	r20, r10
    2b0c:	94 01       	movw	r18, r8
    2b0e:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    2b12:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__fixsfsi>
    2b16:	cf 55       	subi	r28, 0x5F	; 95
    2b18:	df 4f       	sbci	r29, 0xFF	; 255
    2b1a:	79 83       	std	Y+1, r23	; 0x01
    2b1c:	68 83       	st	Y, r22
    2b1e:	c1 5a       	subi	r28, 0xA1	; 161
    2b20:	d0 40       	sbci	r29, 0x00	; 0
    2b22:	78 8b       	std	Y+16, r23	; 0x10
    2b24:	6f 87       	std	Y+15, r22	; 0x0f
    2b26:	fe 01       	movw	r30, r28
    2b28:	b1 96       	adiw	r30, 0x21	; 33
    2b2a:	fe ab       	std	Y+54, r31	; 0x36
    2b2c:	ed ab       	std	Y+53, r30	; 0x35
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a0 e0       	ldi	r26, 0x00	; 0
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	c9 56       	subi	r28, 0x69	; 105
    2b38:	df 4f       	sbci	r29, 0xFF	; 255
    2b3a:	88 83       	st	Y, r24
    2b3c:	99 83       	std	Y+1, r25	; 0x01
    2b3e:	aa 83       	std	Y+2, r26	; 0x02
    2b40:	bb 83       	std	Y+3, r27	; 0x03
    2b42:	c7 59       	subi	r28, 0x97	; 151
    2b44:	d0 40       	sbci	r29, 0x00	; 0
    2b46:	cd 56       	subi	r28, 0x6D	; 109
    2b48:	df 4f       	sbci	r29, 0xFF	; 255
    2b4a:	88 83       	st	Y, r24
    2b4c:	99 83       	std	Y+1, r25	; 0x01
    2b4e:	aa 83       	std	Y+2, r26	; 0x02
    2b50:	bb 83       	std	Y+3, r27	; 0x03
    2b52:	c3 59       	subi	r28, 0x93	; 147
    2b54:	d0 40       	sbci	r29, 0x00	; 0
    2b56:	c1 57       	subi	r28, 0x71	; 113
    2b58:	df 4f       	sbci	r29, 0xFF	; 255
    2b5a:	88 83       	st	Y, r24
    2b5c:	99 83       	std	Y+1, r25	; 0x01
    2b5e:	aa 83       	std	Y+2, r26	; 0x02
    2b60:	bb 83       	std	Y+3, r27	; 0x03
    2b62:	cf 58       	subi	r28, 0x8F	; 143
    2b64:	d0 40       	sbci	r29, 0x00	; 0
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	9f af       	std	Y+63, r25	; 0x3f
    2b6a:	c7 53       	subi	r28, 0x37	; 55
    2b6c:	df 4f       	sbci	r29, 0xFF	; 255
    2b6e:	18 82       	st	Y, r1
    2b70:	c9 5c       	subi	r28, 0xC9	; 201
    2b72:	d0 40       	sbci	r29, 0x00	; 0
    2b74:	c6 53       	subi	r28, 0x36	; 54
    2b76:	df 4f       	sbci	r29, 0xFF	; 255
    2b78:	18 82       	st	Y, r1
    2b7a:	ca 5c       	subi	r28, 0xCA	; 202
    2b7c:	d0 40       	sbci	r29, 0x00	; 0
    2b7e:	c5 53       	subi	r28, 0x35	; 53
    2b80:	df 4f       	sbci	r29, 0xFF	; 255
    2b82:	18 82       	st	Y, r1
    2b84:	cb 5c       	subi	r28, 0xCB	; 203
    2b86:	d0 40       	sbci	r29, 0x00	; 0
    2b88:	c4 53       	subi	r28, 0x34	; 52
    2b8a:	df 4f       	sbci	r29, 0xFF	; 255
    2b8c:	18 82       	st	Y, r1
    2b8e:	cc 5c       	subi	r28, 0xCC	; 204
    2b90:	d0 40       	sbci	r29, 0x00	; 0
    2b92:	22 24       	eor	r2, r2
    2b94:	33 24       	eor	r3, r3
					for(int k = 0; k < 4; k++)
					{
						if(k!= i && k!= j)
						{
							int l = 10 - (i + j + k);
							double err = (diord[0]-dord[i]) * (diord[0]-dord[i]) + (diord[1]-dord[j]) * (diord[1]-dord[j]) + (diord[2]-dord[k]) * (diord[2]-dord[k]) + (diord[3] - diord[l]) * (diord[3] - diord[l]) ;
    2b96:	c6 01       	movw	r24, r12
    2b98:	aa 27       	eor	r26, r26
    2b9a:	97 fd       	sbrc	r25, 7
    2b9c:	a0 95       	com	r26
    2b9e:	ba 2f       	mov	r27, r26
    2ba0:	c3 54       	subi	r28, 0x43	; 67
    2ba2:	df 4f       	sbci	r29, 0xFF	; 255
    2ba4:	88 83       	st	Y, r24
    2ba6:	99 83       	std	Y+1, r25	; 0x01
    2ba8:	aa 83       	std	Y+2, r26	; 0x02
    2baa:	bb 83       	std	Y+3, r27	; 0x03
    2bac:	cd 5b       	subi	r28, 0xBD	; 189
    2bae:	d0 40       	sbci	r29, 0x00	; 0
    2bb0:	c7 01       	movw	r24, r14
    2bb2:	aa 27       	eor	r26, r26
    2bb4:	97 fd       	sbrc	r25, 7
    2bb6:	a0 95       	com	r26
    2bb8:	ba 2f       	mov	r27, r26
    2bba:	cf 53       	subi	r28, 0x3F	; 63
    2bbc:	df 4f       	sbci	r29, 0xFF	; 255
    2bbe:	88 83       	st	Y, r24
    2bc0:	99 83       	std	Y+1, r25	; 0x01
    2bc2:	aa 83       	std	Y+2, r26	; 0x02
    2bc4:	bb 83       	std	Y+3, r27	; 0x03
    2bc6:	c1 5c       	subi	r28, 0xC1	; 193
    2bc8:	d0 40       	sbci	r29, 0x00	; 0
    2bca:	c8 01       	movw	r24, r16
    2bcc:	aa 27       	eor	r26, r26
    2bce:	97 fd       	sbrc	r25, 7
    2bd0:	a0 95       	com	r26
    2bd2:	ba 2f       	mov	r27, r26
    2bd4:	cb 53       	subi	r28, 0x3B	; 59
    2bd6:	df 4f       	sbci	r29, 0xFF	; 255
    2bd8:	88 83       	st	Y, r24
    2bda:	99 83       	std	Y+1, r25	; 0x01
    2bdc:	aa 83       	std	Y+2, r26	; 0x02
    2bde:	bb 83       	std	Y+3, r27	; 0x03
    2be0:	c5 5c       	subi	r28, 0xC5	; 197
    2be2:	d0 40       	sbci	r29, 0x00	; 0
    2be4:	f2 c1       	rjmp	.+996    	; 0x2fca <get_position+0x15f2>

		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
    2be6:	60 96       	adiw	r28, 0x10	; 16
    2be8:	ae ad       	ldd	r26, Y+62	; 0x3e
    2bea:	bf ad       	ldd	r27, Y+63	; 0x3f
    2bec:	60 97       	sbiw	r28, 0x10	; 16
    2bee:	a2 15       	cp	r26, r2
    2bf0:	b3 05       	cpc	r27, r3
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <get_position+0x121e>
    2bf4:	c3 c1       	rjmp	.+902    	; 0x2f7c <get_position+0x15a4>
    2bf6:	2a 96       	adiw	r28, 0x0a	; 10
    2bf8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2bfa:	ff ad       	ldd	r31, Y+63	; 0x3f
    2bfc:	2a 97       	sbiw	r28, 0x0a	; 10
    2bfe:	ee 0f       	add	r30, r30
    2c00:	ff 1f       	adc	r31, r31
    2c02:	29 e0       	ldi	r18, 0x09	; 9
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	2c 0f       	add	r18, r28
    2c08:	3d 1f       	adc	r19, r29
    2c0a:	2e 0f       	add	r18, r30
    2c0c:	3f 1f       	adc	r19, r31
    2c0e:	2c 96       	adiw	r28, 0x0c	; 12
    2c10:	3f af       	std	Y+63, r19	; 0x3f
    2c12:	2e af       	std	Y+62, r18	; 0x3e
    2c14:	2c 97       	sbiw	r28, 0x0c	; 12
    2c16:	ce 01       	movw	r24, r28
    2c18:	81 96       	adiw	r24, 0x21	; 33
    2c1a:	28 96       	adiw	r28, 0x08	; 8
    2c1c:	9f af       	std	Y+63, r25	; 0x3f
    2c1e:	8e af       	std	Y+62, r24	; 0x3e
    2c20:	28 97       	sbiw	r28, 0x08	; 8
    2c22:	2e 96       	adiw	r28, 0x0e	; 14
    2c24:	1f ae       	std	Y+63, r1	; 0x3f
    2c26:	1e ae       	std	Y+62, r1	; 0x3e
    2c28:	2e 97       	sbiw	r28, 0x0e	; 14
				{
					for(int k = 0; k < 4; k++)
					{
						if(k!= i && k!= j)
    2c2a:	2e 96       	adiw	r28, 0x0e	; 14
    2c2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c30:	2e 97       	sbiw	r28, 0x0e	; 14
    2c32:	a2 15       	cp	r26, r2
    2c34:	b3 05       	cpc	r27, r3
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <get_position+0x1262>
    2c38:	81 c1       	rjmp	.+770    	; 0x2f3c <get_position+0x1564>
    2c3a:	60 96       	adiw	r28, 0x10	; 16
    2c3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c40:	60 97       	sbiw	r28, 0x10	; 16
    2c42:	ae 17       	cp	r26, r30
    2c44:	bf 07       	cpc	r27, r31
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <get_position+0x1272>
    2c48:	79 c1       	rjmp	.+754    	; 0x2f3c <get_position+0x1564>
						{
							int l = 10 - (i + j + k);
							double err = (diord[0]-dord[i]) * (diord[0]-dord[i]) + (diord[1]-dord[j]) * (diord[1]-dord[j]) + (diord[2]-dord[k]) * (diord[2]-dord[k]) + (diord[3] - diord[l]) * (diord[3] - diord[l]) ;
    2c4a:	c3 54       	subi	r28, 0x43	; 67
    2c4c:	df 4f       	sbci	r29, 0xFF	; 255
    2c4e:	68 81       	ld	r22, Y
    2c50:	79 81       	ldd	r23, Y+1	; 0x01
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	cd 5b       	subi	r28, 0xBD	; 189
    2c58:	d0 40       	sbci	r29, 0x00	; 0
    2c5a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2c5e:	ad a9       	ldd	r26, Y+53	; 0x35
    2c60:	be a9       	ldd	r27, Y+54	; 0x36
    2c62:	2d 91       	ld	r18, X+
    2c64:	3d 91       	ld	r19, X+
    2c66:	4d 91       	ld	r20, X+
    2c68:	5c 91       	ld	r21, X
    2c6a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2c6e:	7b 01       	movw	r14, r22
    2c70:	8c 01       	movw	r16, r24
    2c72:	cf 53       	subi	r28, 0x3F	; 63
    2c74:	df 4f       	sbci	r29, 0xFF	; 255
    2c76:	68 81       	ld	r22, Y
    2c78:	79 81       	ldd	r23, Y+1	; 0x01
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	c1 5c       	subi	r28, 0xC1	; 193
    2c80:	d0 40       	sbci	r29, 0x00	; 0
    2c82:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2c86:	eb ad       	ldd	r30, Y+59	; 0x3b
    2c88:	fc ad       	ldd	r31, Y+60	; 0x3c
    2c8a:	20 81       	ld	r18, Z
    2c8c:	31 81       	ldd	r19, Z+1	; 0x01
    2c8e:	42 81       	ldd	r20, Z+2	; 0x02
    2c90:	53 81       	ldd	r21, Z+3	; 0x03
    2c92:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2c96:	5b 01       	movw	r10, r22
    2c98:	6c 01       	movw	r12, r24
    2c9a:	cb 53       	subi	r28, 0x3B	; 59
    2c9c:	df 4f       	sbci	r29, 0xFF	; 255
    2c9e:	68 81       	ld	r22, Y
    2ca0:	79 81       	ldd	r23, Y+1	; 0x01
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	c5 5c       	subi	r28, 0xC5	; 197
    2ca8:	d0 40       	sbci	r29, 0x00	; 0
    2caa:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2cae:	28 96       	adiw	r28, 0x08	; 8
    2cb0:	ae ad       	ldd	r26, Y+62	; 0x3e
    2cb2:	bf ad       	ldd	r27, Y+63	; 0x3f
    2cb4:	28 97       	sbiw	r28, 0x08	; 8
    2cb6:	2d 91       	ld	r18, X+
    2cb8:	3d 91       	ld	r19, X+
    2cba:	4d 91       	ld	r20, X+
    2cbc:	5c 91       	ld	r21, X
    2cbe:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2cc2:	3b 01       	movw	r6, r22
    2cc4:	4c 01       	movw	r8, r24
    2cc6:	2c 96       	adiw	r28, 0x0c	; 12
    2cc8:	ee ad       	ldd	r30, Y+62	; 0x3e
    2cca:	ff ad       	ldd	r31, Y+63	; 0x3f
    2ccc:	2c 97       	sbiw	r28, 0x0c	; 12
    2cce:	80 81       	ld	r24, Z
    2cd0:	91 81       	ldd	r25, Z+1	; 0x01
    2cd2:	cf 55       	subi	r28, 0x5F	; 95
    2cd4:	df 4f       	sbci	r29, 0xFF	; 255
    2cd6:	48 80       	ld	r4, Y
    2cd8:	59 80       	ldd	r5, Y+1	; 0x01
    2cda:	c1 5a       	subi	r28, 0xA1	; 161
    2cdc:	d0 40       	sbci	r29, 0x00	; 0
    2cde:	48 1a       	sub	r4, r24
    2ce0:	59 0a       	sbc	r5, r25
    2ce2:	c8 01       	movw	r24, r16
    2ce4:	b7 01       	movw	r22, r14
    2ce6:	a8 01       	movw	r20, r16
    2ce8:	97 01       	movw	r18, r14
    2cea:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2cee:	7b 01       	movw	r14, r22
    2cf0:	8c 01       	movw	r16, r24
    2cf2:	c6 01       	movw	r24, r12
    2cf4:	b5 01       	movw	r22, r10
    2cf6:	a6 01       	movw	r20, r12
    2cf8:	95 01       	movw	r18, r10
    2cfa:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2cfe:	9b 01       	movw	r18, r22
    2d00:	ac 01       	movw	r20, r24
    2d02:	c8 01       	movw	r24, r16
    2d04:	b7 01       	movw	r22, r14
    2d06:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2d0a:	7b 01       	movw	r14, r22
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	c4 01       	movw	r24, r8
    2d10:	b3 01       	movw	r22, r6
    2d12:	a4 01       	movw	r20, r8
    2d14:	93 01       	movw	r18, r6
    2d16:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	c8 01       	movw	r24, r16
    2d20:	b7 01       	movw	r22, r14
    2d22:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2d26:	7b 01       	movw	r14, r22
    2d28:	8c 01       	movw	r16, r24
    2d2a:	44 9c       	mul	r4, r4
    2d2c:	b0 01       	movw	r22, r0
    2d2e:	45 9c       	mul	r4, r5
    2d30:	70 0d       	add	r23, r0
    2d32:	54 9c       	mul	r5, r4
    2d34:	70 0d       	add	r23, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	88 27       	eor	r24, r24
    2d3a:	77 fd       	sbrc	r23, 7
    2d3c:	80 95       	com	r24
    2d3e:	98 2f       	mov	r25, r24
    2d40:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2d44:	9b 01       	movw	r18, r22
    2d46:	ac 01       	movw	r20, r24
    2d48:	c8 01       	movw	r24, r16
    2d4a:	b7 01       	movw	r22, r14
    2d4c:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2d50:	2b 01       	movw	r4, r22
    2d52:	3c 01       	movw	r6, r24
							if(first || err < min_err)
    2d54:	ff ad       	ldd	r31, Y+63	; 0x3f
    2d56:	ff 23       	and	r31, r31
    2d58:	c9 f4       	brne	.+50     	; 0x2d8c <get_position+0x13b4>
    2d5a:	c7 53       	subi	r28, 0x37	; 55
    2d5c:	df 4f       	sbci	r29, 0xFF	; 255
    2d5e:	28 81       	ld	r18, Y
    2d60:	c9 5c       	subi	r28, 0xC9	; 201
    2d62:	d0 40       	sbci	r29, 0x00	; 0
    2d64:	c6 53       	subi	r28, 0x36	; 54
    2d66:	df 4f       	sbci	r29, 0xFF	; 255
    2d68:	38 81       	ld	r19, Y
    2d6a:	ca 5c       	subi	r28, 0xCA	; 202
    2d6c:	d0 40       	sbci	r29, 0x00	; 0
    2d6e:	c5 53       	subi	r28, 0x35	; 53
    2d70:	df 4f       	sbci	r29, 0xFF	; 255
    2d72:	48 81       	ld	r20, Y
    2d74:	cb 5c       	subi	r28, 0xCB	; 203
    2d76:	d0 40       	sbci	r29, 0x00	; 0
    2d78:	c4 53       	subi	r28, 0x34	; 52
    2d7a:	df 4f       	sbci	r29, 0xFF	; 255
    2d7c:	58 81       	ld	r21, Y
    2d7e:	cc 5c       	subi	r28, 0xCC	; 204
    2d80:	d0 40       	sbci	r29, 0x00	; 0
    2d82:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__cmpsf2>
    2d86:	88 23       	and	r24, r24
    2d88:	0c f0       	brlt	.+2      	; 0x2d8c <get_position+0x13b4>
    2d8a:	d8 c0       	rjmp	.+432    	; 0x2f3c <get_position+0x1564>
							{
								min_err = err;
								first = false;
								order[0] = i;
    2d8c:	3a 82       	std	Y+2, r3	; 0x02
    2d8e:	29 82       	std	Y+1, r2	; 0x01
								order[1] = j;
    2d90:	60 96       	adiw	r28, 0x10	; 16
    2d92:	2e ad       	ldd	r18, Y+62	; 0x3e
    2d94:	3f ad       	ldd	r19, Y+63	; 0x3f
    2d96:	60 97       	sbiw	r28, 0x10	; 16
    2d98:	3c 83       	std	Y+4, r19	; 0x04
    2d9a:	2b 83       	std	Y+3, r18	; 0x03
								order[2] = k;
    2d9c:	2e 96       	adiw	r28, 0x0e	; 14
    2d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2da0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2da2:	2e 97       	sbiw	r28, 0x0e	; 14
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
								order[3] = 0;
    2da8:	18 86       	std	Y+8, r1	; 0x08
    2daa:	1f 82       	std	Y+7, r1	; 0x07
    2dac:	fe 01       	movw	r30, r28
    2dae:	31 96       	adiw	r30, 0x01	; 1
    2db0:	88 24       	eor	r8, r8
    2db2:	99 24       	eor	r9, r9
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0

								int pos = 0;

								for(int ii = 0; ii < 4; ii++)
								{
									if(order[ii] == 1)
    2db8:	80 81       	ld	r24, Z
    2dba:	91 81       	ldd	r25, Z+1	; 0x01
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <get_position+0x13ea>
    2dc0:	49 01       	movw	r8, r18
								order[3] = 0;


								int pos = 0;

								for(int ii = 0; ii < 4; ii++)
    2dc2:	2f 5f       	subi	r18, 0xFF	; 255
    2dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc6:	32 96       	adiw	r30, 0x02	; 2
    2dc8:	24 30       	cpi	r18, 0x04	; 4
    2dca:	31 05       	cpc	r19, r1
    2dcc:	a9 f7       	brne	.-22     	; 0x2db8 <get_position+0x13e0>
										pos = ii;
									}
								}

								double thetaf = atan2(-yavg, -xavg) - atan2(y1 - yavg, x1 - xavg);
								double dCenter = di1 / d1 * d(xavg, yavg, 0, 0);
    2dce:	6c 96       	adiw	r28, 0x1c	; 28
    2dd0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2dd2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2dd4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dd8:	6c 97       	sbiw	r28, 0x1c	; 28
    2dda:	2d ea       	ldi	r18, 0xAD	; 173
    2ddc:	37 e2       	ldi	r19, 0x27	; 39
    2dde:	4b e3       	ldi	r20, 0x3B	; 59
    2de0:	51 e4       	ldi	r21, 0x41	; 65
    2de2:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    2de6:	24 e9       	ldi	r18, 0x94	; 148
    2de8:	3e e6       	ldi	r19, 0x6E	; 110
    2dea:	44 e3       	ldi	r20, 0x34	; 52
    2dec:	50 e4       	ldi	r21, 0x40	; 64
    2dee:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2df2:	5b 01       	movw	r10, r22
    2df4:	6c 01       	movw	r12, r24
								

								double theta_rot_off = atan2(-yavg, -xavg);
								int xp = inp[pos * 2];
								int yp = inp[pos * 2 + 1];
								double theta2 = atan2((double)(yp) - yiavg, (double)(xp) - xiavg);
    2df6:	88 0c       	add	r8, r8
    2df8:	99 1c       	adc	r9, r9
    2dfa:	88 0c       	add	r8, r8
    2dfc:	99 1c       	adc	r9, r9
    2dfe:	c5 54       	subi	r28, 0x45	; 69
    2e00:	df 4f       	sbci	r29, 0xFF	; 255
    2e02:	e8 81       	ld	r30, Y
    2e04:	f9 81       	ldd	r31, Y+1	; 0x01
    2e06:	cb 5b       	subi	r28, 0xBB	; 187
    2e08:	d0 40       	sbci	r29, 0x00	; 0
    2e0a:	e8 0d       	add	r30, r8
    2e0c:	f9 1d       	adc	r31, r9
    2e0e:	62 81       	ldd	r22, Z+2	; 0x02
    2e10:	73 81       	ldd	r23, Z+3	; 0x03
    2e12:	88 27       	eor	r24, r24
    2e14:	77 fd       	sbrc	r23, 7
    2e16:	80 95       	com	r24
    2e18:	98 2f       	mov	r25, r24
    2e1a:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2e1e:	a0 96       	adiw	r28, 0x20	; 32
    2e20:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e22:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e24:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e26:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e28:	a0 97       	sbiw	r28, 0x20	; 32
    2e2a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2e2e:	7b 01       	movw	r14, r22
    2e30:	8c 01       	movw	r16, r24
    2e32:	c5 54       	subi	r28, 0x45	; 69
    2e34:	df 4f       	sbci	r29, 0xFF	; 255
    2e36:	a8 81       	ld	r26, Y
    2e38:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3a:	cb 5b       	subi	r28, 0xBB	; 187
    2e3c:	d0 40       	sbci	r29, 0x00	; 0
    2e3e:	8a 0e       	add	r8, r26
    2e40:	9b 1e       	adc	r9, r27
    2e42:	f4 01       	movw	r30, r8
    2e44:	60 81       	ld	r22, Z
    2e46:	71 81       	ldd	r23, Z+1	; 0x01
    2e48:	88 27       	eor	r24, r24
    2e4a:	77 fd       	sbrc	r23, 7
    2e4c:	80 95       	com	r24
    2e4e:	98 2f       	mov	r25, r24
    2e50:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    2e54:	a4 96       	adiw	r28, 0x24	; 36
    2e56:	2c ad       	ldd	r18, Y+60	; 0x3c
    2e58:	3d ad       	ldd	r19, Y+61	; 0x3d
    2e5a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2e5c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2e5e:	a4 97       	sbiw	r28, 0x24	; 36
    2e60:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	c8 01       	movw	r24, r16
    2e6a:	b7 01       	movw	r22, r14
    2e6c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
								theta_rot = theta2 + thetaf - theta_rot_off;
    2e70:	2c e4       	ldi	r18, 0x4C	; 76
    2e72:	33 ec       	ldi	r19, 0xC3	; 195
    2e74:	40 e5       	ldi	r20, 0x50	; 80
    2e76:	50 e4       	ldi	r21, 0x40	; 64
    2e78:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2e7c:	26 ee       	ldi	r18, 0xE6	; 230
    2e7e:	39 e7       	ldi	r19, 0x79	; 121
    2e80:	45 ed       	ldi	r20, 0xD5	; 213
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2e88:	c1 57       	subi	r28, 0x71	; 113
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	68 83       	st	Y, r22
    2e8e:	79 83       	std	Y+1, r23	; 0x01
    2e90:	8a 83       	std	Y+2, r24	; 0x02
    2e92:	9b 83       	std	Y+3, r25	; 0x03
    2e94:	cf 58       	subi	r28, 0x8F	; 143
    2e96:	d0 40       	sbci	r29, 0x00	; 0
								x0 = xiavg + cos(theta_rot_off + theta_rot) * dCenter;
    2e98:	26 ee       	ldi	r18, 0xE6	; 230
    2e9a:	39 e7       	ldi	r19, 0x79	; 121
    2e9c:	45 ed       	ldi	r20, 0xD5	; 213
    2e9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ea0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    2ea4:	7b 01       	movw	r14, r22
    2ea6:	8c 01       	movw	r16, r24
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	0e 94 3e 1a 	call	0x347c	; 0x347c <cos>
    2eae:	a6 01       	movw	r20, r12
    2eb0:	95 01       	movw	r18, r10
    2eb2:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2eb6:	9b 01       	movw	r18, r22
    2eb8:	ac 01       	movw	r20, r24
    2eba:	a4 96       	adiw	r28, 0x24	; 36
    2ebc:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ebe:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ec0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ec2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ec4:	a4 97       	sbiw	r28, 0x24	; 36
    2ec6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2eca:	c9 56       	subi	r28, 0x69	; 105
    2ecc:	df 4f       	sbci	r29, 0xFF	; 255
    2ece:	68 83       	st	Y, r22
    2ed0:	79 83       	std	Y+1, r23	; 0x01
    2ed2:	8a 83       	std	Y+2, r24	; 0x02
    2ed4:	9b 83       	std	Y+3, r25	; 0x03
    2ed6:	c7 59       	subi	r28, 0x97	; 151
    2ed8:	d0 40       	sbci	r29, 0x00	; 0
								y0 = yiavg + sin(theta_rot_off + theta_rot) * dCenter;
    2eda:	b7 01       	movw	r22, r14
    2edc:	c8 01       	movw	r24, r16
    2ede:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <sin>
    2ee2:	a6 01       	movw	r20, r12
    2ee4:	95 01       	movw	r18, r10
    2ee6:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    2eea:	9b 01       	movw	r18, r22
    2eec:	ac 01       	movw	r20, r24
    2eee:	a0 96       	adiw	r28, 0x20	; 32
    2ef0:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ef2:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ef4:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ef6:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ef8:	a0 97       	sbiw	r28, 0x20	; 32
    2efa:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2efe:	cd 56       	subi	r28, 0x6D	; 109
    2f00:	df 4f       	sbci	r29, 0xFF	; 255
    2f02:	68 83       	st	Y, r22
    2f04:	79 83       	std	Y+1, r23	; 0x01
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	9b 83       	std	Y+3, r25	; 0x03
    2f0a:	c3 59       	subi	r28, 0x93	; 147
    2f0c:	d0 40       	sbci	r29, 0x00	; 0
    2f0e:	d3 01       	movw	r26, r6
    2f10:	c2 01       	movw	r24, r4
    2f12:	c7 53       	subi	r28, 0x37	; 55
    2f14:	df 4f       	sbci	r29, 0xFF	; 255
    2f16:	48 82       	st	Y, r4
    2f18:	c9 5c       	subi	r28, 0xC9	; 201
    2f1a:	d0 40       	sbci	r29, 0x00	; 0
    2f1c:	c6 53       	subi	r28, 0x36	; 54
    2f1e:	df 4f       	sbci	r29, 0xFF	; 255
    2f20:	98 83       	st	Y, r25
    2f22:	ca 5c       	subi	r28, 0xCA	; 202
    2f24:	d0 40       	sbci	r29, 0x00	; 0
    2f26:	c5 53       	subi	r28, 0x35	; 53
    2f28:	df 4f       	sbci	r29, 0xFF	; 255
    2f2a:	a8 83       	st	Y, r26
    2f2c:	cb 5c       	subi	r28, 0xCB	; 203
    2f2e:	d0 40       	sbci	r29, 0x00	; 0
    2f30:	c4 53       	subi	r28, 0x34	; 52
    2f32:	df 4f       	sbci	r29, 0xFF	; 255
    2f34:	b8 83       	st	Y, r27
    2f36:	cc 5c       	subi	r28, 0xCC	; 204
    2f38:	d0 40       	sbci	r29, 0x00	; 0
    2f3a:	1f ae       	std	Y+63, r1	; 0x3f
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
				{
					for(int k = 0; k < 4; k++)
    2f3c:	2e 96       	adiw	r28, 0x0e	; 14
    2f3e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2f40:	3f ad       	ldd	r19, Y+63	; 0x3f
    2f42:	2e 97       	sbiw	r28, 0x0e	; 14
    2f44:	2f 5f       	subi	r18, 0xFF	; 255
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	2e 96       	adiw	r28, 0x0e	; 14
    2f4a:	3f af       	std	Y+63, r19	; 0x3f
    2f4c:	2e af       	std	Y+62, r18	; 0x3e
    2f4e:	2e 97       	sbiw	r28, 0x0e	; 14
    2f50:	28 96       	adiw	r28, 0x08	; 8
    2f52:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f54:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f56:	28 97       	sbiw	r28, 0x08	; 8
    2f58:	04 96       	adiw	r24, 0x04	; 4
    2f5a:	28 96       	adiw	r28, 0x08	; 8
    2f5c:	9f af       	std	Y+63, r25	; 0x3f
    2f5e:	8e af       	std	Y+62, r24	; 0x3e
    2f60:	28 97       	sbiw	r28, 0x08	; 8
    2f62:	2c 96       	adiw	r28, 0x0c	; 12
    2f64:	ae ad       	ldd	r26, Y+62	; 0x3e
    2f66:	bf ad       	ldd	r27, Y+63	; 0x3f
    2f68:	2c 97       	sbiw	r28, 0x0c	; 12
    2f6a:	12 97       	sbiw	r26, 0x02	; 2
    2f6c:	2c 96       	adiw	r28, 0x0c	; 12
    2f6e:	bf af       	std	Y+63, r27	; 0x3f
    2f70:	ae af       	std	Y+62, r26	; 0x3e
    2f72:	2c 97       	sbiw	r28, 0x0c	; 12
    2f74:	24 30       	cpi	r18, 0x04	; 4
    2f76:	31 05       	cpc	r19, r1
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <get_position+0x15a4>
    2f7a:	57 ce       	rjmp	.-850    	; 0x2c2a <get_position+0x1252>
		diord[2] = di3/mini;
		diord[3] = di4/mini;

		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
    2f7c:	60 96       	adiw	r28, 0x10	; 16
    2f7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2f80:	ff ad       	ldd	r31, Y+63	; 0x3f
    2f82:	60 97       	sbiw	r28, 0x10	; 16
    2f84:	31 96       	adiw	r30, 0x01	; 1
    2f86:	60 96       	adiw	r28, 0x10	; 16
    2f88:	ff af       	std	Y+63, r31	; 0x3f
    2f8a:	ee af       	std	Y+62, r30	; 0x3e
    2f8c:	60 97       	sbiw	r28, 0x10	; 16
    2f8e:	2b ad       	ldd	r18, Y+59	; 0x3b
    2f90:	3c ad       	ldd	r19, Y+60	; 0x3c
    2f92:	2c 5f       	subi	r18, 0xFC	; 252
    2f94:	3f 4f       	sbci	r19, 0xFF	; 255
    2f96:	3c af       	std	Y+60, r19	; 0x3c
    2f98:	2b af       	std	Y+59, r18	; 0x3b
    2f9a:	2a 96       	adiw	r28, 0x0a	; 10
    2f9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2fa0:	2a 97       	sbiw	r28, 0x0a	; 10
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	2a 96       	adiw	r28, 0x0a	; 10
    2fa6:	9f af       	std	Y+63, r25	; 0x3f
    2fa8:	8e af       	std	Y+62, r24	; 0x3e
    2faa:	2a 97       	sbiw	r28, 0x0a	; 10
    2fac:	34 97       	sbiw	r30, 0x04	; 4
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <get_position+0x15da>
    2fb0:	1a ce       	rjmp	.-972    	; 0x2be6 <get_position+0x120e>
		diord[0] = di1/mini;
		diord[1] = di2/mini;
		diord[2] = di3/mini;
		diord[3] = di4/mini;

		for(int i = 0; i < 4; i++)
    2fb2:	08 94       	sec
    2fb4:	21 1c       	adc	r2, r1
    2fb6:	31 1c       	adc	r3, r1
    2fb8:	ad a9       	ldd	r26, Y+53	; 0x35
    2fba:	be a9       	ldd	r27, Y+54	; 0x36
    2fbc:	14 96       	adiw	r26, 0x04	; 4
    2fbe:	be ab       	std	Y+54, r27	; 0x36
    2fc0:	ad ab       	std	Y+53, r26	; 0x35
    2fc2:	b4 e0       	ldi	r27, 0x04	; 4
    2fc4:	2b 16       	cp	r2, r27
    2fc6:	31 04       	cpc	r3, r1
    2fc8:	91 f0       	breq	.+36     	; 0x2fee <get_position+0x1616>
    2fca:	ea e0       	ldi	r30, 0x0A	; 10
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	e2 19       	sub	r30, r2
    2fd0:	f3 09       	sbc	r31, r3
    2fd2:	2a 96       	adiw	r28, 0x0a	; 10
    2fd4:	ff af       	std	Y+63, r31	; 0x3f
    2fd6:	ee af       	std	Y+62, r30	; 0x3e
    2fd8:	2a 97       	sbiw	r28, 0x0a	; 10
    2fda:	9e 01       	movw	r18, r28
    2fdc:	2f 5d       	subi	r18, 0xDF	; 223
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	3c af       	std	Y+60, r19	; 0x3c
    2fe2:	2b af       	std	Y+59, r18	; 0x3b
    2fe4:	60 96       	adiw	r28, 0x10	; 16
    2fe6:	1f ae       	std	Y+63, r1	; 0x3f
    2fe8:	1e ae       	std	Y+62, r1	; 0x3e
    2fea:	60 97       	sbiw	r28, 0x10	; 16
    2fec:	fc cd       	rjmp	.-1032   	; 0x2be6 <get_position+0x120e>
	
	int pos = 0;
	int sum = 0;
	double scale = 0;
	for(int i = 0; i < 4; i++)
		sum += order[i];
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ff4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ff6:	82 0f       	add	r24, r18
    2ff8:	93 1f       	adc	r25, r19
    2ffa:	2d 81       	ldd	r18, Y+5	; 0x05
    2ffc:	3e 81       	ldd	r19, Y+6	; 0x06
    2ffe:	82 0f       	add	r24, r18
    3000:	93 1f       	adc	r25, r19
	if(sum == 9)
    3002:	2f 81       	ldd	r18, Y+7	; 0x07
    3004:	38 85       	ldd	r19, Y+8	; 0x08
    3006:	82 0f       	add	r24, r18
    3008:	93 1f       	adc	r25, r19
    300a:	9e 01       	movw	r18, r28
    300c:	2f 5f       	subi	r18, 0xFF	; 255
    300e:	3f 4f       	sbci	r19, 0xFF	; 255
    3010:	09 97       	sbiw	r24, 0x09	; 9
    3012:	d9 f5       	brne	.+118    	; 0x308a <get_position+0x16b2>
    3014:	f9 01       	movw	r30, r18
    3016:	00 e0       	ldi	r16, 0x00	; 0
    3018:	10 e0       	ldi	r17, 0x00	; 0
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(int ii = 0; ii < 4; ii++)
		{
			if(order[ii] == 3)
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	03 97       	sbiw	r24, 0x03	; 3
    3024:	09 f4       	brne	.+2      	; 0x3028 <get_position+0x1650>
    3026:	89 01       	movw	r16, r18
	double scale = 0;
	for(int i = 0; i < 4; i++)
		sum += order[i];
	if(sum == 9)
	{
		for(int ii = 0; ii < 4; ii++)
    3028:	2f 5f       	subi	r18, 0xFF	; 255
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	32 96       	adiw	r30, 0x02	; 2
    302e:	24 30       	cpi	r18, 0x04	; 4
    3030:	31 05       	cpc	r19, r1
    3032:	a9 f7       	brne	.-22     	; 0x301e <get_position+0x1646>
		{
			if(order[ii] == 3)
				pos = ii;
		}
		scale = d(x3,y3,0,0) / d(x0,y0, inp[pos * 2 ], inp[pos * 2 + 1]);
    3034:	00 0f       	add	r16, r16
    3036:	11 1f       	adc	r17, r17
    3038:	00 0f       	add	r16, r16
    303a:	11 1f       	adc	r17, r17
    303c:	c5 54       	subi	r28, 0x45	; 69
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	e8 81       	ld	r30, Y
    3042:	f9 81       	ldd	r31, Y+1	; 0x01
    3044:	cb 5b       	subi	r28, 0xBB	; 187
    3046:	d0 40       	sbci	r29, 0x00	; 0
    3048:	e0 0f       	add	r30, r16
    304a:	f1 1f       	adc	r31, r17
    304c:	60 81       	ld	r22, Z
    304e:	71 81       	ldd	r23, Z+1	; 0x01
    3050:	88 27       	eor	r24, r24
    3052:	77 fd       	sbrc	r23, 7
    3054:	80 95       	com	r24
    3056:	98 2f       	mov	r25, r24
    3058:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    305c:	9b 01       	movw	r18, r22
    305e:	ac 01       	movw	r20, r24
    3060:	c9 56       	subi	r28, 0x69	; 105
    3062:	df 4f       	sbci	r29, 0xFF	; 255
    3064:	68 81       	ld	r22, Y
    3066:	79 81       	ldd	r23, Y+1	; 0x01
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	9b 81       	ldd	r25, Y+3	; 0x03
    306c:	c7 59       	subi	r28, 0x97	; 151
    306e:	d0 40       	sbci	r29, 0x00	; 0
    3070:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    3074:	5b 01       	movw	r10, r22
    3076:	6c 01       	movw	r12, r24
    3078:	c5 54       	subi	r28, 0x45	; 69
    307a:	df 4f       	sbci	r29, 0xFF	; 255
    307c:	88 81       	ld	r24, Y
    307e:	99 81       	ldd	r25, Y+1	; 0x01
    3080:	cb 5b       	subi	r28, 0xBB	; 187
    3082:	d0 40       	sbci	r29, 0x00	; 0
    3084:	08 0f       	add	r16, r24
    3086:	19 1f       	adc	r17, r25
    3088:	3a c0       	rjmp	.+116    	; 0x30fe <get_position+0x1726>
    308a:	f9 01       	movw	r30, r18
    308c:	00 e0       	ldi	r16, 0x00	; 0
    308e:	10 e0       	ldi	r17, 0x00	; 0
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		for(int ii =0; ii < 4; ii++)
		{
			if(order[ii] == 1)
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	09 f4       	brne	.+2      	; 0x309e <get_position+0x16c6>
    309c:	89 01       	movw	r16, r18
		}
		scale = d(x3,y3,0,0) / d(x0,y0, inp[pos * 2 ], inp[pos * 2 + 1]);
	}
	else
	{
		for(int ii =0; ii < 4; ii++)
    309e:	2f 5f       	subi	r18, 0xFF	; 255
    30a0:	3f 4f       	sbci	r19, 0xFF	; 255
    30a2:	32 96       	adiw	r30, 0x02	; 2
    30a4:	24 30       	cpi	r18, 0x04	; 4
    30a6:	31 05       	cpc	r19, r1
    30a8:	a9 f7       	brne	.-22     	; 0x3094 <get_position+0x16bc>
		{
			if(order[ii] == 1)
				pos = ii;
		}
		scale = d(x1,y1,0,0) / d(x0,y0, inp[pos * 2 ], inp[pos * 2 + 1]);
    30aa:	00 0f       	add	r16, r16
    30ac:	11 1f       	adc	r17, r17
    30ae:	00 0f       	add	r16, r16
    30b0:	11 1f       	adc	r17, r17
    30b2:	c5 54       	subi	r28, 0x45	; 69
    30b4:	df 4f       	sbci	r29, 0xFF	; 255
    30b6:	e8 81       	ld	r30, Y
    30b8:	f9 81       	ldd	r31, Y+1	; 0x01
    30ba:	cb 5b       	subi	r28, 0xBB	; 187
    30bc:	d0 40       	sbci	r29, 0x00	; 0
    30be:	e0 0f       	add	r30, r16
    30c0:	f1 1f       	adc	r31, r17
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	88 27       	eor	r24, r24
    30c8:	77 fd       	sbrc	r23, 7
    30ca:	80 95       	com	r24
    30cc:	98 2f       	mov	r25, r24
    30ce:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	c9 56       	subi	r28, 0x69	; 105
    30d8:	df 4f       	sbci	r29, 0xFF	; 255
    30da:	68 81       	ld	r22, Y
    30dc:	79 81       	ldd	r23, Y+1	; 0x01
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	c7 59       	subi	r28, 0x97	; 151
    30e4:	d0 40       	sbci	r29, 0x00	; 0
    30e6:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    30ea:	5b 01       	movw	r10, r22
    30ec:	6c 01       	movw	r12, r24
    30ee:	c5 54       	subi	r28, 0x45	; 69
    30f0:	df 4f       	sbci	r29, 0xFF	; 255
    30f2:	e8 81       	ld	r30, Y
    30f4:	f9 81       	ldd	r31, Y+1	; 0x01
    30f6:	cb 5b       	subi	r28, 0xBB	; 187
    30f8:	d0 40       	sbci	r29, 0x00	; 0
    30fa:	0e 0f       	add	r16, r30
    30fc:	1f 1f       	adc	r17, r31
    30fe:	d8 01       	movw	r26, r16
    3100:	12 96       	adiw	r26, 0x02	; 2
    3102:	6d 91       	ld	r22, X+
    3104:	7c 91       	ld	r23, X
    3106:	13 97       	sbiw	r26, 0x03	; 3
    3108:	88 27       	eor	r24, r24
    310a:	77 fd       	sbrc	r23, 7
    310c:	80 95       	com	r24
    310e:	98 2f       	mov	r25, r24
    3110:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    3114:	9b 01       	movw	r18, r22
    3116:	ac 01       	movw	r20, r24
    3118:	cd 56       	subi	r28, 0x6D	; 109
    311a:	df 4f       	sbci	r29, 0xFF	; 255
    311c:	68 81       	ld	r22, Y
    311e:	79 81       	ldd	r23, Y+1	; 0x01
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	9b 81       	ldd	r25, Y+3	; 0x03
    3124:	c3 59       	subi	r28, 0x93	; 147
    3126:	d0 40       	sbci	r29, 0x00	; 0
    3128:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    312c:	7b 01       	movw	r14, r22
    312e:	8c 01       	movw	r16, r24
    3130:	c6 01       	movw	r24, r12
    3132:	b5 01       	movw	r22, r10
    3134:	a6 01       	movw	r20, r12
    3136:	95 01       	movw	r18, r10
    3138:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    313c:	5b 01       	movw	r10, r22
    313e:	6c 01       	movw	r12, r24
    3140:	c8 01       	movw	r24, r16
    3142:	b7 01       	movw	r22, r14
    3144:	a8 01       	movw	r20, r16
    3146:	97 01       	movw	r18, r14
    3148:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    314c:	9b 01       	movw	r18, r22
    314e:	ac 01       	movw	r20, r24
    3150:	c6 01       	movw	r24, r12
    3152:	b5 01       	movw	r22, r10
    3154:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    3158:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    315c:	9b 01       	movw	r18, r22
    315e:	ac 01       	movw	r20, r24
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	88 e6       	ldi	r24, 0x68	; 104
    3166:	91 e4       	ldi	r25, 0x41	; 65
    3168:	0e 94 41 1a 	call	0x3482	; 0x3482 <__divsf3>
    316c:	1b 01       	movw	r2, r22
    316e:	2c 01       	movw	r4, r24
	}
	
	double theta = -theta_rot + pi/2;
	double dist = d(x_init, y_init, x0,y0);
    3170:	60 91 83 01 	lds	r22, 0x0183
    3174:	70 91 84 01 	lds	r23, 0x0184
    3178:	88 27       	eor	r24, r24
    317a:	77 fd       	sbrc	r23, 7
    317c:	80 95       	com	r24
    317e:	98 2f       	mov	r25, r24
    3180:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    3184:	c9 56       	subi	r28, 0x69	; 105
    3186:	df 4f       	sbci	r29, 0xFF	; 255
    3188:	28 81       	ld	r18, Y
    318a:	39 81       	ldd	r19, Y+1	; 0x01
    318c:	4a 81       	ldd	r20, Y+2	; 0x02
    318e:	5b 81       	ldd	r21, Y+3	; 0x03
    3190:	c7 59       	subi	r28, 0x97	; 151
    3192:	d0 40       	sbci	r29, 0x00	; 0
    3194:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    3198:	3b 01       	movw	r6, r22
    319a:	4c 01       	movw	r8, r24
    319c:	60 91 85 01 	lds	r22, 0x0185
    31a0:	70 91 86 01 	lds	r23, 0x0186
    31a4:	88 27       	eor	r24, r24
    31a6:	77 fd       	sbrc	r23, 7
    31a8:	80 95       	com	r24
    31aa:	98 2f       	mov	r25, r24
    31ac:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__floatsisf>
    31b0:	cd 56       	subi	r28, 0x6D	; 109
    31b2:	df 4f       	sbci	r29, 0xFF	; 255
    31b4:	28 81       	ld	r18, Y
    31b6:	39 81       	ldd	r19, Y+1	; 0x01
    31b8:	4a 81       	ldd	r20, Y+2	; 0x02
    31ba:	5b 81       	ldd	r21, Y+3	; 0x03
    31bc:	c3 59       	subi	r28, 0x93	; 147
    31be:	d0 40       	sbci	r29, 0x00	; 0
    31c0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    31c4:	7b 01       	movw	r14, r22
    31c6:	8c 01       	movw	r16, r24
    31c8:	c4 01       	movw	r24, r8
    31ca:	b3 01       	movw	r22, r6
    31cc:	a4 01       	movw	r20, r8
    31ce:	93 01       	movw	r18, r6
    31d0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    31d4:	5b 01       	movw	r10, r22
    31d6:	6c 01       	movw	r12, r24
    31d8:	c8 01       	movw	r24, r16
    31da:	b7 01       	movw	r22, r14
    31dc:	a8 01       	movw	r20, r16
    31de:	97 01       	movw	r18, r14
    31e0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    31e4:	9b 01       	movw	r18, r22
    31e6:	ac 01       	movw	r20, r24
    31e8:	c6 01       	movw	r24, r12
    31ea:	b5 01       	movw	r22, r10
    31ec:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    31f0:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <sqrt>
    31f4:	5b 01       	movw	r10, r22
    31f6:	6c 01       	movw	r12, r24
    double theta1 = atan2(x_init - x0, y_init - y0);
    31f8:	c4 01       	movw	r24, r8
    31fa:	b3 01       	movw	r22, r6
    31fc:	a8 01       	movw	r20, r16
    31fe:	97 01       	movw	r18, r14
    3200:	0e 94 e7 19 	call	0x33ce	; 0x33ce <atan2>
    3204:	7b 01       	movw	r14, r22
    3206:	8c 01       	movw	r16, r24
    double x = dist * scale * cos(theta1 - theta_rot);
    3208:	c6 01       	movw	r24, r12
    320a:	b5 01       	movw	r22, r10
    320c:	a2 01       	movw	r20, r4
    320e:	91 01       	movw	r18, r2
    3210:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    3214:	3b 01       	movw	r6, r22
    3216:	4c 01       	movw	r8, r24
    3218:	c8 01       	movw	r24, r16
    321a:	b7 01       	movw	r22, r14
    321c:	c1 57       	subi	r28, 0x71	; 113
    321e:	df 4f       	sbci	r29, 0xFF	; 255
    3220:	28 81       	ld	r18, Y
    3222:	39 81       	ldd	r19, Y+1	; 0x01
    3224:	4a 81       	ldd	r20, Y+2	; 0x02
    3226:	5b 81       	ldd	r21, Y+3	; 0x03
    3228:	cf 58       	subi	r28, 0x8F	; 143
    322a:	d0 40       	sbci	r29, 0x00	; 0
    322c:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    3230:	7b 01       	movw	r14, r22
    3232:	8c 01       	movw	r16, r24
    3234:	c8 01       	movw	r24, r16
    3236:	0e 94 3e 1a 	call	0x347c	; 0x347c <cos>
    323a:	5b 01       	movw	r10, r22
    323c:	6c 01       	movw	r12, r24
    double y = dist * scale * sin(theta1 - theta_rot);
    323e:	b7 01       	movw	r22, r14
    3240:	c8 01       	movw	r24, r16
    3242:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <sin>
    3246:	7b 01       	movw	r14, r22
    3248:	8c 01       	movw	r16, r24

	location[0] = x;
    324a:	c4 01       	movw	r24, r8
    324c:	b3 01       	movw	r22, r6
    324e:	a6 01       	movw	r20, r12
    3250:	95 01       	movw	r18, r10
    3252:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    3256:	60 93 77 01 	sts	0x0177, r22
    325a:	70 93 78 01 	sts	0x0178, r23
    325e:	80 93 79 01 	sts	0x0179, r24
    3262:	90 93 7a 01 	sts	0x017A, r25
	location[1] = y;
    3266:	c4 01       	movw	r24, r8
    3268:	b3 01       	movw	r22, r6
    326a:	a8 01       	movw	r20, r16
    326c:	97 01       	movw	r18, r14
    326e:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <__mulsf3>
    3272:	60 93 7b 01 	sts	0x017B, r22
    3276:	70 93 7c 01 	sts	0x017C, r23
    327a:	80 93 7d 01 	sts	0x017D, r24
    327e:	90 93 7e 01 	sts	0x017E, r25
	location[2] = theta;
    3282:	6b ed       	ldi	r22, 0xDB	; 219
    3284:	7f e0       	ldi	r23, 0x0F	; 15
    3286:	89 ec       	ldi	r24, 0xC9	; 201
    3288:	9f e3       	ldi	r25, 0x3F	; 63
    328a:	c1 57       	subi	r28, 0x71	; 113
    328c:	df 4f       	sbci	r29, 0xFF	; 255
    328e:	28 81       	ld	r18, Y
    3290:	39 81       	ldd	r19, Y+1	; 0x01
    3292:	4a 81       	ldd	r20, Y+2	; 0x02
    3294:	5b 81       	ldd	r21, Y+3	; 0x03
    3296:	cf 58       	subi	r28, 0x8F	; 143
    3298:	d0 40       	sbci	r29, 0x00	; 0
    329a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    329e:	60 93 7f 01 	sts	0x017F, r22
    32a2:	70 93 80 01 	sts	0x0180, r23
    32a6:	80 93 81 01 	sts	0x0181, r24
    32aa:	90 93 82 01 	sts	0x0182, r25
	return location;

}
    32ae:	87 e7       	ldi	r24, 0x77	; 119
    32b0:	91 e0       	ldi	r25, 0x01	; 1
    32b2:	ce 52       	subi	r28, 0x2E	; 46
    32b4:	df 4f       	sbci	r29, 0xFF	; 255
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	cf 90       	pop	r12
    32d0:	bf 90       	pop	r11
    32d2:	af 90       	pop	r10
    32d4:	9f 90       	pop	r9
    32d6:	8f 90       	pop	r8
    32d8:	7f 90       	pop	r7
    32da:	6f 90       	pop	r6
    32dc:	5f 90       	pop	r5
    32de:	4f 90       	pop	r4
    32e0:	3f 90       	pop	r3
    32e2:	2f 90       	pop	r2
    32e4:	08 95       	ret

000032e6 <__subsf3>:
    32e6:	50 58       	subi	r21, 0x80	; 128

000032e8 <__addsf3>:
    32e8:	bb 27       	eor	r27, r27
    32ea:	aa 27       	eor	r26, r26
    32ec:	0e d0       	rcall	.+28     	; 0x330a <__addsf3x>
    32ee:	27 c2       	rjmp	.+1102   	; 0x373e <__fp_round>
    32f0:	f0 d1       	rcall	.+992    	; 0x36d2 <__fp_pscA>
    32f2:	30 f0       	brcs	.+12     	; 0x3300 <__addsf3+0x18>
    32f4:	f5 d1       	rcall	.+1002   	; 0x36e0 <__fp_pscB>
    32f6:	20 f0       	brcs	.+8      	; 0x3300 <__addsf3+0x18>
    32f8:	31 f4       	brne	.+12     	; 0x3306 <__addsf3+0x1e>
    32fa:	9f 3f       	cpi	r25, 0xFF	; 255
    32fc:	11 f4       	brne	.+4      	; 0x3302 <__addsf3+0x1a>
    32fe:	1e f4       	brtc	.+6      	; 0x3306 <__addsf3+0x1e>
    3300:	c0 c1       	rjmp	.+896    	; 0x3682 <__fp_nan>
    3302:	0e f4       	brtc	.+2      	; 0x3306 <__addsf3+0x1e>
    3304:	e0 95       	com	r30
    3306:	e7 fb       	bst	r30, 7
    3308:	b6 c1       	rjmp	.+876    	; 0x3676 <__fp_inf>

0000330a <__addsf3x>:
    330a:	e9 2f       	mov	r30, r25
    330c:	3a d2       	rcall	.+1140   	; 0x3782 <__fp_split3>
    330e:	80 f3       	brcs	.-32     	; 0x32f0 <__addsf3+0x8>
    3310:	ba 17       	cp	r27, r26
    3312:	62 07       	cpc	r22, r18
    3314:	73 07       	cpc	r23, r19
    3316:	84 07       	cpc	r24, r20
    3318:	95 07       	cpc	r25, r21
    331a:	18 f0       	brcs	.+6      	; 0x3322 <__addsf3x+0x18>
    331c:	71 f4       	brne	.+28     	; 0x333a <__addsf3x+0x30>
    331e:	9e f5       	brtc	.+102    	; 0x3386 <__addsf3x+0x7c>
    3320:	52 c2       	rjmp	.+1188   	; 0x37c6 <__fp_zero>
    3322:	0e f4       	brtc	.+2      	; 0x3326 <__addsf3x+0x1c>
    3324:	e0 95       	com	r30
    3326:	0b 2e       	mov	r0, r27
    3328:	ba 2f       	mov	r27, r26
    332a:	a0 2d       	mov	r26, r0
    332c:	0b 01       	movw	r0, r22
    332e:	b9 01       	movw	r22, r18
    3330:	90 01       	movw	r18, r0
    3332:	0c 01       	movw	r0, r24
    3334:	ca 01       	movw	r24, r20
    3336:	a0 01       	movw	r20, r0
    3338:	11 24       	eor	r1, r1
    333a:	ff 27       	eor	r31, r31
    333c:	59 1b       	sub	r21, r25
    333e:	99 f0       	breq	.+38     	; 0x3366 <__addsf3x+0x5c>
    3340:	59 3f       	cpi	r21, 0xF9	; 249
    3342:	50 f4       	brcc	.+20     	; 0x3358 <__addsf3x+0x4e>
    3344:	50 3e       	cpi	r21, 0xE0	; 224
    3346:	68 f1       	brcs	.+90     	; 0x33a2 <__addsf3x+0x98>
    3348:	1a 16       	cp	r1, r26
    334a:	f0 40       	sbci	r31, 0x00	; 0
    334c:	a2 2f       	mov	r26, r18
    334e:	23 2f       	mov	r18, r19
    3350:	34 2f       	mov	r19, r20
    3352:	44 27       	eor	r20, r20
    3354:	58 5f       	subi	r21, 0xF8	; 248
    3356:	f3 cf       	rjmp	.-26     	; 0x333e <__addsf3x+0x34>
    3358:	46 95       	lsr	r20
    335a:	37 95       	ror	r19
    335c:	27 95       	ror	r18
    335e:	a7 95       	ror	r26
    3360:	f0 40       	sbci	r31, 0x00	; 0
    3362:	53 95       	inc	r21
    3364:	c9 f7       	brne	.-14     	; 0x3358 <__addsf3x+0x4e>
    3366:	7e f4       	brtc	.+30     	; 0x3386 <__addsf3x+0x7c>
    3368:	1f 16       	cp	r1, r31
    336a:	ba 0b       	sbc	r27, r26
    336c:	62 0b       	sbc	r22, r18
    336e:	73 0b       	sbc	r23, r19
    3370:	84 0b       	sbc	r24, r20
    3372:	ba f0       	brmi	.+46     	; 0x33a2 <__addsf3x+0x98>
    3374:	91 50       	subi	r25, 0x01	; 1
    3376:	a1 f0       	breq	.+40     	; 0x33a0 <__addsf3x+0x96>
    3378:	ff 0f       	add	r31, r31
    337a:	bb 1f       	adc	r27, r27
    337c:	66 1f       	adc	r22, r22
    337e:	77 1f       	adc	r23, r23
    3380:	88 1f       	adc	r24, r24
    3382:	c2 f7       	brpl	.-16     	; 0x3374 <__addsf3x+0x6a>
    3384:	0e c0       	rjmp	.+28     	; 0x33a2 <__addsf3x+0x98>
    3386:	ba 0f       	add	r27, r26
    3388:	62 1f       	adc	r22, r18
    338a:	73 1f       	adc	r23, r19
    338c:	84 1f       	adc	r24, r20
    338e:	48 f4       	brcc	.+18     	; 0x33a2 <__addsf3x+0x98>
    3390:	87 95       	ror	r24
    3392:	77 95       	ror	r23
    3394:	67 95       	ror	r22
    3396:	b7 95       	ror	r27
    3398:	f7 95       	ror	r31
    339a:	9e 3f       	cpi	r25, 0xFE	; 254
    339c:	08 f0       	brcs	.+2      	; 0x33a0 <__addsf3x+0x96>
    339e:	b3 cf       	rjmp	.-154    	; 0x3306 <__addsf3+0x1e>
    33a0:	93 95       	inc	r25
    33a2:	88 0f       	add	r24, r24
    33a4:	08 f0       	brcs	.+2      	; 0x33a8 <__addsf3x+0x9e>
    33a6:	99 27       	eor	r25, r25
    33a8:	ee 0f       	add	r30, r30
    33aa:	97 95       	ror	r25
    33ac:	87 95       	ror	r24
    33ae:	08 95       	ret
    33b0:	90 d1       	rcall	.+800    	; 0x36d2 <__fp_pscA>
    33b2:	58 f0       	brcs	.+22     	; 0x33ca <__addsf3x+0xc0>
    33b4:	80 e8       	ldi	r24, 0x80	; 128
    33b6:	91 e0       	ldi	r25, 0x01	; 1
    33b8:	09 f4       	brne	.+2      	; 0x33bc <__addsf3x+0xb2>
    33ba:	9e ef       	ldi	r25, 0xFE	; 254
    33bc:	91 d1       	rcall	.+802    	; 0x36e0 <__fp_pscB>
    33be:	28 f0       	brcs	.+10     	; 0x33ca <__addsf3x+0xc0>
    33c0:	40 e8       	ldi	r20, 0x80	; 128
    33c2:	51 e0       	ldi	r21, 0x01	; 1
    33c4:	59 f4       	brne	.+22     	; 0x33dc <atan2+0xe>
    33c6:	5e ef       	ldi	r21, 0xFE	; 254
    33c8:	09 c0       	rjmp	.+18     	; 0x33dc <atan2+0xe>
    33ca:	5b c1       	rjmp	.+694    	; 0x3682 <__fp_nan>
    33cc:	fc c1       	rjmp	.+1016   	; 0x37c6 <__fp_zero>

000033ce <atan2>:
    33ce:	e9 2f       	mov	r30, r25
    33d0:	e0 78       	andi	r30, 0x80	; 128
    33d2:	d7 d1       	rcall	.+942    	; 0x3782 <__fp_split3>
    33d4:	68 f3       	brcs	.-38     	; 0x33b0 <__addsf3x+0xa6>
    33d6:	09 2e       	mov	r0, r25
    33d8:	05 2a       	or	r0, r21
    33da:	c1 f3       	breq	.-16     	; 0x33cc <__addsf3x+0xc2>
    33dc:	26 17       	cp	r18, r22
    33de:	37 07       	cpc	r19, r23
    33e0:	48 07       	cpc	r20, r24
    33e2:	59 07       	cpc	r21, r25
    33e4:	38 f0       	brcs	.+14     	; 0x33f4 <atan2+0x26>
    33e6:	0e 2e       	mov	r0, r30
    33e8:	07 f8       	bld	r0, 7
    33ea:	e0 25       	eor	r30, r0
    33ec:	69 f0       	breq	.+26     	; 0x3408 <atan2+0x3a>
    33ee:	e0 25       	eor	r30, r0
    33f0:	e0 64       	ori	r30, 0x40	; 64
    33f2:	0a c0       	rjmp	.+20     	; 0x3408 <atan2+0x3a>
    33f4:	ef 63       	ori	r30, 0x3F	; 63
    33f6:	07 f8       	bld	r0, 7
    33f8:	00 94       	com	r0
    33fa:	07 fa       	bst	r0, 7
    33fc:	db 01       	movw	r26, r22
    33fe:	b9 01       	movw	r22, r18
    3400:	9d 01       	movw	r18, r26
    3402:	dc 01       	movw	r26, r24
    3404:	ca 01       	movw	r24, r20
    3406:	ad 01       	movw	r20, r26
    3408:	ef 93       	push	r30
    340a:	4a d0       	rcall	.+148    	; 0x34a0 <__divsf3_pse>
    340c:	98 d1       	rcall	.+816    	; 0x373e <__fp_round>
    340e:	0a d0       	rcall	.+20     	; 0x3424 <atan>
    3410:	5f 91       	pop	r21
    3412:	55 23       	and	r21, r21
    3414:	31 f0       	breq	.+12     	; 0x3422 <atan2+0x54>
    3416:	2b ed       	ldi	r18, 0xDB	; 219
    3418:	3f e0       	ldi	r19, 0x0F	; 15
    341a:	49 e4       	ldi	r20, 0x49	; 73
    341c:	50 fd       	sbrc	r21, 0
    341e:	49 ec       	ldi	r20, 0xC9	; 201
    3420:	63 cf       	rjmp	.-314    	; 0x32e8 <__addsf3>
    3422:	08 95       	ret

00003424 <atan>:
    3424:	df 93       	push	r29
    3426:	dd 27       	eor	r29, r29
    3428:	b9 2f       	mov	r27, r25
    342a:	bf 77       	andi	r27, 0x7F	; 127
    342c:	40 e8       	ldi	r20, 0x80	; 128
    342e:	5f e3       	ldi	r21, 0x3F	; 63
    3430:	16 16       	cp	r1, r22
    3432:	17 06       	cpc	r1, r23
    3434:	48 07       	cpc	r20, r24
    3436:	5b 07       	cpc	r21, r27
    3438:	10 f4       	brcc	.+4      	; 0x343e <atan+0x1a>
    343a:	d9 2f       	mov	r29, r25
    343c:	cf d1       	rcall	.+926    	; 0x37dc <inverse>
    343e:	9f 93       	push	r25
    3440:	8f 93       	push	r24
    3442:	7f 93       	push	r23
    3444:	6f 93       	push	r22
    3446:	7c d2       	rcall	.+1272   	; 0x3940 <square>
    3448:	ee e2       	ldi	r30, 0x2E	; 46
    344a:	f1 e0       	ldi	r31, 0x01	; 1
    344c:	1d d1       	rcall	.+570    	; 0x3688 <__fp_powser>
    344e:	77 d1       	rcall	.+750    	; 0x373e <__fp_round>
    3450:	2f 91       	pop	r18
    3452:	3f 91       	pop	r19
    3454:	4f 91       	pop	r20
    3456:	5f 91       	pop	r21
    3458:	d4 d1       	rcall	.+936    	; 0x3802 <__mulsf3x>
    345a:	dd 23       	and	r29, r29
    345c:	49 f0       	breq	.+18     	; 0x3470 <atan+0x4c>
    345e:	90 58       	subi	r25, 0x80	; 128
    3460:	a2 ea       	ldi	r26, 0xA2	; 162
    3462:	2a ed       	ldi	r18, 0xDA	; 218
    3464:	3f e0       	ldi	r19, 0x0F	; 15
    3466:	49 ec       	ldi	r20, 0xC9	; 201
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	d0 78       	andi	r29, 0x80	; 128
    346c:	5d 27       	eor	r21, r29
    346e:	4d df       	rcall	.-358    	; 0x330a <__addsf3x>
    3470:	df 91       	pop	r29
    3472:	65 c1       	rjmp	.+714    	; 0x373e <__fp_round>

00003474 <__cmpsf2>:
    3474:	dc d0       	rcall	.+440    	; 0x362e <__fp_cmp>
    3476:	08 f4       	brcc	.+2      	; 0x347a <__cmpsf2+0x6>
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	08 95       	ret

0000347c <cos>:
    347c:	39 d1       	rcall	.+626    	; 0x36f0 <__fp_rempio2>
    347e:	e3 95       	inc	r30
    3480:	6f c1       	rjmp	.+734    	; 0x3760 <__fp_sinus>

00003482 <__divsf3>:
    3482:	0c d0       	rcall	.+24     	; 0x349c <__divsf3x>
    3484:	5c c1       	rjmp	.+696    	; 0x373e <__fp_round>
    3486:	2c d1       	rcall	.+600    	; 0x36e0 <__fp_pscB>
    3488:	40 f0       	brcs	.+16     	; 0x349a <__divsf3+0x18>
    348a:	23 d1       	rcall	.+582    	; 0x36d2 <__fp_pscA>
    348c:	30 f0       	brcs	.+12     	; 0x349a <__divsf3+0x18>
    348e:	21 f4       	brne	.+8      	; 0x3498 <__divsf3+0x16>
    3490:	5f 3f       	cpi	r21, 0xFF	; 255
    3492:	19 f0       	breq	.+6      	; 0x349a <__divsf3+0x18>
    3494:	f0 c0       	rjmp	.+480    	; 0x3676 <__fp_inf>
    3496:	51 11       	cpse	r21, r1
    3498:	97 c1       	rjmp	.+814    	; 0x37c8 <__fp_szero>
    349a:	f3 c0       	rjmp	.+486    	; 0x3682 <__fp_nan>

0000349c <__divsf3x>:
    349c:	72 d1       	rcall	.+740    	; 0x3782 <__fp_split3>
    349e:	98 f3       	brcs	.-26     	; 0x3486 <__divsf3+0x4>

000034a0 <__divsf3_pse>:
    34a0:	99 23       	and	r25, r25
    34a2:	c9 f3       	breq	.-14     	; 0x3496 <__divsf3+0x14>
    34a4:	55 23       	and	r21, r21
    34a6:	b1 f3       	breq	.-20     	; 0x3494 <__divsf3+0x12>
    34a8:	95 1b       	sub	r25, r21
    34aa:	55 0b       	sbc	r21, r21
    34ac:	bb 27       	eor	r27, r27
    34ae:	aa 27       	eor	r26, r26
    34b0:	62 17       	cp	r22, r18
    34b2:	73 07       	cpc	r23, r19
    34b4:	84 07       	cpc	r24, r20
    34b6:	38 f0       	brcs	.+14     	; 0x34c6 <__divsf3_pse+0x26>
    34b8:	9f 5f       	subi	r25, 0xFF	; 255
    34ba:	5f 4f       	sbci	r21, 0xFF	; 255
    34bc:	22 0f       	add	r18, r18
    34be:	33 1f       	adc	r19, r19
    34c0:	44 1f       	adc	r20, r20
    34c2:	aa 1f       	adc	r26, r26
    34c4:	a9 f3       	breq	.-22     	; 0x34b0 <__divsf3_pse+0x10>
    34c6:	33 d0       	rcall	.+102    	; 0x352e <__divsf3_pse+0x8e>
    34c8:	0e 2e       	mov	r0, r30
    34ca:	3a f0       	brmi	.+14     	; 0x34da <__divsf3_pse+0x3a>
    34cc:	e0 e8       	ldi	r30, 0x80	; 128
    34ce:	30 d0       	rcall	.+96     	; 0x3530 <__divsf3_pse+0x90>
    34d0:	91 50       	subi	r25, 0x01	; 1
    34d2:	50 40       	sbci	r21, 0x00	; 0
    34d4:	e6 95       	lsr	r30
    34d6:	00 1c       	adc	r0, r0
    34d8:	ca f7       	brpl	.-14     	; 0x34cc <__divsf3_pse+0x2c>
    34da:	29 d0       	rcall	.+82     	; 0x352e <__divsf3_pse+0x8e>
    34dc:	fe 2f       	mov	r31, r30
    34de:	27 d0       	rcall	.+78     	; 0x352e <__divsf3_pse+0x8e>
    34e0:	66 0f       	add	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	88 1f       	adc	r24, r24
    34e6:	bb 1f       	adc	r27, r27
    34e8:	26 17       	cp	r18, r22
    34ea:	37 07       	cpc	r19, r23
    34ec:	48 07       	cpc	r20, r24
    34ee:	ab 07       	cpc	r26, r27
    34f0:	b0 e8       	ldi	r27, 0x80	; 128
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <__divsf3_pse+0x56>
    34f4:	bb 0b       	sbc	r27, r27
    34f6:	80 2d       	mov	r24, r0
    34f8:	bf 01       	movw	r22, r30
    34fa:	ff 27       	eor	r31, r31
    34fc:	93 58       	subi	r25, 0x83	; 131
    34fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3500:	2a f0       	brmi	.+10     	; 0x350c <__divsf3_pse+0x6c>
    3502:	9e 3f       	cpi	r25, 0xFE	; 254
    3504:	51 05       	cpc	r21, r1
    3506:	68 f0       	brcs	.+26     	; 0x3522 <__divsf3_pse+0x82>
    3508:	b6 c0       	rjmp	.+364    	; 0x3676 <__fp_inf>
    350a:	5e c1       	rjmp	.+700    	; 0x37c8 <__fp_szero>
    350c:	5f 3f       	cpi	r21, 0xFF	; 255
    350e:	ec f3       	brlt	.-6      	; 0x350a <__divsf3_pse+0x6a>
    3510:	98 3e       	cpi	r25, 0xE8	; 232
    3512:	dc f3       	brlt	.-10     	; 0x350a <__divsf3_pse+0x6a>
    3514:	86 95       	lsr	r24
    3516:	77 95       	ror	r23
    3518:	67 95       	ror	r22
    351a:	b7 95       	ror	r27
    351c:	f7 95       	ror	r31
    351e:	9f 5f       	subi	r25, 0xFF	; 255
    3520:	c9 f7       	brne	.-14     	; 0x3514 <__divsf3_pse+0x74>
    3522:	88 0f       	add	r24, r24
    3524:	91 1d       	adc	r25, r1
    3526:	96 95       	lsr	r25
    3528:	87 95       	ror	r24
    352a:	97 f9       	bld	r25, 7
    352c:	08 95       	ret
    352e:	e1 e0       	ldi	r30, 0x01	; 1
    3530:	66 0f       	add	r22, r22
    3532:	77 1f       	adc	r23, r23
    3534:	88 1f       	adc	r24, r24
    3536:	bb 1f       	adc	r27, r27
    3538:	62 17       	cp	r22, r18
    353a:	73 07       	cpc	r23, r19
    353c:	84 07       	cpc	r24, r20
    353e:	ba 07       	cpc	r27, r26
    3540:	20 f0       	brcs	.+8      	; 0x354a <__divsf3_pse+0xaa>
    3542:	62 1b       	sub	r22, r18
    3544:	73 0b       	sbc	r23, r19
    3546:	84 0b       	sbc	r24, r20
    3548:	ba 0b       	sbc	r27, r26
    354a:	ee 1f       	adc	r30, r30
    354c:	88 f7       	brcc	.-30     	; 0x3530 <__divsf3_pse+0x90>
    354e:	e0 95       	com	r30
    3550:	08 95       	ret

00003552 <__fixsfsi>:
    3552:	04 d0       	rcall	.+8      	; 0x355c <__fixunssfsi>
    3554:	68 94       	set
    3556:	b1 11       	cpse	r27, r1
    3558:	37 c1       	rjmp	.+622    	; 0x37c8 <__fp_szero>
    355a:	08 95       	ret

0000355c <__fixunssfsi>:
    355c:	1a d1       	rcall	.+564    	; 0x3792 <__fp_splitA>
    355e:	88 f0       	brcs	.+34     	; 0x3582 <__fixunssfsi+0x26>
    3560:	9f 57       	subi	r25, 0x7F	; 127
    3562:	90 f0       	brcs	.+36     	; 0x3588 <__fixunssfsi+0x2c>
    3564:	b9 2f       	mov	r27, r25
    3566:	99 27       	eor	r25, r25
    3568:	b7 51       	subi	r27, 0x17	; 23
    356a:	a0 f0       	brcs	.+40     	; 0x3594 <__fixunssfsi+0x38>
    356c:	d1 f0       	breq	.+52     	; 0x35a2 <__fixunssfsi+0x46>
    356e:	66 0f       	add	r22, r22
    3570:	77 1f       	adc	r23, r23
    3572:	88 1f       	adc	r24, r24
    3574:	99 1f       	adc	r25, r25
    3576:	1a f0       	brmi	.+6      	; 0x357e <__fixunssfsi+0x22>
    3578:	ba 95       	dec	r27
    357a:	c9 f7       	brne	.-14     	; 0x356e <__fixunssfsi+0x12>
    357c:	12 c0       	rjmp	.+36     	; 0x35a2 <__fixunssfsi+0x46>
    357e:	b1 30       	cpi	r27, 0x01	; 1
    3580:	81 f0       	breq	.+32     	; 0x35a2 <__fixunssfsi+0x46>
    3582:	21 d1       	rcall	.+578    	; 0x37c6 <__fp_zero>
    3584:	b1 e0       	ldi	r27, 0x01	; 1
    3586:	08 95       	ret
    3588:	1e c1       	rjmp	.+572    	; 0x37c6 <__fp_zero>
    358a:	67 2f       	mov	r22, r23
    358c:	78 2f       	mov	r23, r24
    358e:	88 27       	eor	r24, r24
    3590:	b8 5f       	subi	r27, 0xF8	; 248
    3592:	39 f0       	breq	.+14     	; 0x35a2 <__fixunssfsi+0x46>
    3594:	b9 3f       	cpi	r27, 0xF9	; 249
    3596:	cc f3       	brlt	.-14     	; 0x358a <__fixunssfsi+0x2e>
    3598:	86 95       	lsr	r24
    359a:	77 95       	ror	r23
    359c:	67 95       	ror	r22
    359e:	b3 95       	inc	r27
    35a0:	d9 f7       	brne	.-10     	; 0x3598 <__fixunssfsi+0x3c>
    35a2:	3e f4       	brtc	.+14     	; 0x35b2 <__fixunssfsi+0x56>
    35a4:	90 95       	com	r25
    35a6:	80 95       	com	r24
    35a8:	70 95       	com	r23
    35aa:	61 95       	neg	r22
    35ac:	7f 4f       	sbci	r23, 0xFF	; 255
    35ae:	8f 4f       	sbci	r24, 0xFF	; 255
    35b0:	9f 4f       	sbci	r25, 0xFF	; 255
    35b2:	08 95       	ret

000035b4 <__floatunsisf>:
    35b4:	e8 94       	clt
    35b6:	09 c0       	rjmp	.+18     	; 0x35ca <__floatsisf+0x12>

000035b8 <__floatsisf>:
    35b8:	97 fb       	bst	r25, 7
    35ba:	3e f4       	brtc	.+14     	; 0x35ca <__floatsisf+0x12>
    35bc:	90 95       	com	r25
    35be:	80 95       	com	r24
    35c0:	70 95       	com	r23
    35c2:	61 95       	neg	r22
    35c4:	7f 4f       	sbci	r23, 0xFF	; 255
    35c6:	8f 4f       	sbci	r24, 0xFF	; 255
    35c8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ca:	99 23       	and	r25, r25
    35cc:	a9 f0       	breq	.+42     	; 0x35f8 <__floatsisf+0x40>
    35ce:	f9 2f       	mov	r31, r25
    35d0:	96 e9       	ldi	r25, 0x96	; 150
    35d2:	bb 27       	eor	r27, r27
    35d4:	93 95       	inc	r25
    35d6:	f6 95       	lsr	r31
    35d8:	87 95       	ror	r24
    35da:	77 95       	ror	r23
    35dc:	67 95       	ror	r22
    35de:	b7 95       	ror	r27
    35e0:	f1 11       	cpse	r31, r1
    35e2:	f8 cf       	rjmp	.-16     	; 0x35d4 <__floatsisf+0x1c>
    35e4:	fa f4       	brpl	.+62     	; 0x3624 <__floatsisf+0x6c>
    35e6:	bb 0f       	add	r27, r27
    35e8:	11 f4       	brne	.+4      	; 0x35ee <__floatsisf+0x36>
    35ea:	60 ff       	sbrs	r22, 0
    35ec:	1b c0       	rjmp	.+54     	; 0x3624 <__floatsisf+0x6c>
    35ee:	6f 5f       	subi	r22, 0xFF	; 255
    35f0:	7f 4f       	sbci	r23, 0xFF	; 255
    35f2:	8f 4f       	sbci	r24, 0xFF	; 255
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	16 c0       	rjmp	.+44     	; 0x3624 <__floatsisf+0x6c>
    35f8:	88 23       	and	r24, r24
    35fa:	11 f0       	breq	.+4      	; 0x3600 <__floatsisf+0x48>
    35fc:	96 e9       	ldi	r25, 0x96	; 150
    35fe:	11 c0       	rjmp	.+34     	; 0x3622 <__floatsisf+0x6a>
    3600:	77 23       	and	r23, r23
    3602:	21 f0       	breq	.+8      	; 0x360c <__floatsisf+0x54>
    3604:	9e e8       	ldi	r25, 0x8E	; 142
    3606:	87 2f       	mov	r24, r23
    3608:	76 2f       	mov	r23, r22
    360a:	05 c0       	rjmp	.+10     	; 0x3616 <__floatsisf+0x5e>
    360c:	66 23       	and	r22, r22
    360e:	71 f0       	breq	.+28     	; 0x362c <__floatsisf+0x74>
    3610:	96 e8       	ldi	r25, 0x86	; 134
    3612:	86 2f       	mov	r24, r22
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	2a f0       	brmi	.+10     	; 0x3624 <__floatsisf+0x6c>
    361a:	9a 95       	dec	r25
    361c:	66 0f       	add	r22, r22
    361e:	77 1f       	adc	r23, r23
    3620:	88 1f       	adc	r24, r24
    3622:	da f7       	brpl	.-10     	; 0x361a <__floatsisf+0x62>
    3624:	88 0f       	add	r24, r24
    3626:	96 95       	lsr	r25
    3628:	87 95       	ror	r24
    362a:	97 f9       	bld	r25, 7
    362c:	08 95       	ret

0000362e <__fp_cmp>:
    362e:	99 0f       	add	r25, r25
    3630:	00 08       	sbc	r0, r0
    3632:	55 0f       	add	r21, r21
    3634:	aa 0b       	sbc	r26, r26
    3636:	e0 e8       	ldi	r30, 0x80	; 128
    3638:	fe ef       	ldi	r31, 0xFE	; 254
    363a:	16 16       	cp	r1, r22
    363c:	17 06       	cpc	r1, r23
    363e:	e8 07       	cpc	r30, r24
    3640:	f9 07       	cpc	r31, r25
    3642:	c0 f0       	brcs	.+48     	; 0x3674 <__fp_cmp+0x46>
    3644:	12 16       	cp	r1, r18
    3646:	13 06       	cpc	r1, r19
    3648:	e4 07       	cpc	r30, r20
    364a:	f5 07       	cpc	r31, r21
    364c:	98 f0       	brcs	.+38     	; 0x3674 <__fp_cmp+0x46>
    364e:	62 1b       	sub	r22, r18
    3650:	73 0b       	sbc	r23, r19
    3652:	84 0b       	sbc	r24, r20
    3654:	95 0b       	sbc	r25, r21
    3656:	39 f4       	brne	.+14     	; 0x3666 <__fp_cmp+0x38>
    3658:	0a 26       	eor	r0, r26
    365a:	61 f0       	breq	.+24     	; 0x3674 <__fp_cmp+0x46>
    365c:	23 2b       	or	r18, r19
    365e:	24 2b       	or	r18, r20
    3660:	25 2b       	or	r18, r21
    3662:	21 f4       	brne	.+8      	; 0x366c <__fp_cmp+0x3e>
    3664:	08 95       	ret
    3666:	0a 26       	eor	r0, r26
    3668:	09 f4       	brne	.+2      	; 0x366c <__fp_cmp+0x3e>
    366a:	a1 40       	sbci	r26, 0x01	; 1
    366c:	a6 95       	lsr	r26
    366e:	8f ef       	ldi	r24, 0xFF	; 255
    3670:	81 1d       	adc	r24, r1
    3672:	81 1d       	adc	r24, r1
    3674:	08 95       	ret

00003676 <__fp_inf>:
    3676:	97 f9       	bld	r25, 7
    3678:	9f 67       	ori	r25, 0x7F	; 127
    367a:	80 e8       	ldi	r24, 0x80	; 128
    367c:	70 e0       	ldi	r23, 0x00	; 0
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	08 95       	ret

00003682 <__fp_nan>:
    3682:	9f ef       	ldi	r25, 0xFF	; 255
    3684:	80 ec       	ldi	r24, 0xC0	; 192
    3686:	08 95       	ret

00003688 <__fp_powser>:
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	1f 93       	push	r17
    368e:	0f 93       	push	r16
    3690:	ff 92       	push	r15
    3692:	ef 92       	push	r14
    3694:	df 92       	push	r13
    3696:	7b 01       	movw	r14, r22
    3698:	8c 01       	movw	r16, r24
    369a:	68 94       	set
    369c:	05 c0       	rjmp	.+10     	; 0x36a8 <__fp_powser+0x20>
    369e:	da 2e       	mov	r13, r26
    36a0:	ef 01       	movw	r28, r30
    36a2:	af d0       	rcall	.+350    	; 0x3802 <__mulsf3x>
    36a4:	fe 01       	movw	r30, r28
    36a6:	e8 94       	clt
    36a8:	a5 91       	lpm	r26, Z+
    36aa:	25 91       	lpm	r18, Z+
    36ac:	35 91       	lpm	r19, Z+
    36ae:	45 91       	lpm	r20, Z+
    36b0:	55 91       	lpm	r21, Z+
    36b2:	ae f3       	brts	.-22     	; 0x369e <__fp_powser+0x16>
    36b4:	ef 01       	movw	r28, r30
    36b6:	29 de       	rcall	.-942    	; 0x330a <__addsf3x>
    36b8:	fe 01       	movw	r30, r28
    36ba:	97 01       	movw	r18, r14
    36bc:	a8 01       	movw	r20, r16
    36be:	da 94       	dec	r13
    36c0:	79 f7       	brne	.-34     	; 0x36a0 <__fp_powser+0x18>
    36c2:	df 90       	pop	r13
    36c4:	ef 90       	pop	r14
    36c6:	ff 90       	pop	r15
    36c8:	0f 91       	pop	r16
    36ca:	1f 91       	pop	r17
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	08 95       	ret

000036d2 <__fp_pscA>:
    36d2:	00 24       	eor	r0, r0
    36d4:	0a 94       	dec	r0
    36d6:	16 16       	cp	r1, r22
    36d8:	17 06       	cpc	r1, r23
    36da:	18 06       	cpc	r1, r24
    36dc:	09 06       	cpc	r0, r25
    36de:	08 95       	ret

000036e0 <__fp_pscB>:
    36e0:	00 24       	eor	r0, r0
    36e2:	0a 94       	dec	r0
    36e4:	12 16       	cp	r1, r18
    36e6:	13 06       	cpc	r1, r19
    36e8:	14 06       	cpc	r1, r20
    36ea:	05 06       	cpc	r0, r21
    36ec:	08 95       	ret
    36ee:	c9 cf       	rjmp	.-110    	; 0x3682 <__fp_nan>

000036f0 <__fp_rempio2>:
    36f0:	50 d0       	rcall	.+160    	; 0x3792 <__fp_splitA>
    36f2:	e8 f3       	brcs	.-6      	; 0x36ee <__fp_pscB+0xe>
    36f4:	e8 94       	clt
    36f6:	e0 e0       	ldi	r30, 0x00	; 0
    36f8:	bb 27       	eor	r27, r27
    36fa:	9f 57       	subi	r25, 0x7F	; 127
    36fc:	f0 f0       	brcs	.+60     	; 0x373a <__fp_rempio2+0x4a>
    36fe:	2a ed       	ldi	r18, 0xDA	; 218
    3700:	3f e0       	ldi	r19, 0x0F	; 15
    3702:	49 ec       	ldi	r20, 0xC9	; 201
    3704:	06 c0       	rjmp	.+12     	; 0x3712 <__fp_rempio2+0x22>
    3706:	ee 0f       	add	r30, r30
    3708:	bb 0f       	add	r27, r27
    370a:	66 1f       	adc	r22, r22
    370c:	77 1f       	adc	r23, r23
    370e:	88 1f       	adc	r24, r24
    3710:	28 f0       	brcs	.+10     	; 0x371c <__fp_rempio2+0x2c>
    3712:	b2 3a       	cpi	r27, 0xA2	; 162
    3714:	62 07       	cpc	r22, r18
    3716:	73 07       	cpc	r23, r19
    3718:	84 07       	cpc	r24, r20
    371a:	28 f0       	brcs	.+10     	; 0x3726 <__fp_rempio2+0x36>
    371c:	b2 5a       	subi	r27, 0xA2	; 162
    371e:	62 0b       	sbc	r22, r18
    3720:	73 0b       	sbc	r23, r19
    3722:	84 0b       	sbc	r24, r20
    3724:	e3 95       	inc	r30
    3726:	9a 95       	dec	r25
    3728:	72 f7       	brpl	.-36     	; 0x3706 <__fp_rempio2+0x16>
    372a:	80 38       	cpi	r24, 0x80	; 128
    372c:	30 f4       	brcc	.+12     	; 0x373a <__fp_rempio2+0x4a>
    372e:	9a 95       	dec	r25
    3730:	bb 0f       	add	r27, r27
    3732:	66 1f       	adc	r22, r22
    3734:	77 1f       	adc	r23, r23
    3736:	88 1f       	adc	r24, r24
    3738:	d2 f7       	brpl	.-12     	; 0x372e <__fp_rempio2+0x3e>
    373a:	90 48       	sbci	r25, 0x80	; 128
    373c:	06 c1       	rjmp	.+524    	; 0x394a <__fp_mpack_finite>

0000373e <__fp_round>:
    373e:	09 2e       	mov	r0, r25
    3740:	03 94       	inc	r0
    3742:	00 0c       	add	r0, r0
    3744:	11 f4       	brne	.+4      	; 0x374a <__fp_round+0xc>
    3746:	88 23       	and	r24, r24
    3748:	52 f0       	brmi	.+20     	; 0x375e <__fp_round+0x20>
    374a:	bb 0f       	add	r27, r27
    374c:	40 f4       	brcc	.+16     	; 0x375e <__fp_round+0x20>
    374e:	bf 2b       	or	r27, r31
    3750:	11 f4       	brne	.+4      	; 0x3756 <__fp_round+0x18>
    3752:	60 ff       	sbrs	r22, 0
    3754:	04 c0       	rjmp	.+8      	; 0x375e <__fp_round+0x20>
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	8f 4f       	sbci	r24, 0xFF	; 255
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	08 95       	ret

00003760 <__fp_sinus>:
    3760:	ef 93       	push	r30
    3762:	e0 ff       	sbrs	r30, 0
    3764:	06 c0       	rjmp	.+12     	; 0x3772 <__fp_sinus+0x12>
    3766:	a2 ea       	ldi	r26, 0xA2	; 162
    3768:	2a ed       	ldi	r18, 0xDA	; 218
    376a:	3f e0       	ldi	r19, 0x0F	; 15
    376c:	49 ec       	ldi	r20, 0xC9	; 201
    376e:	5f eb       	ldi	r21, 0xBF	; 191
    3770:	cc dd       	rcall	.-1128   	; 0x330a <__addsf3x>
    3772:	e5 df       	rcall	.-54     	; 0x373e <__fp_round>
    3774:	0f 90       	pop	r0
    3776:	03 94       	inc	r0
    3778:	01 fc       	sbrc	r0, 1
    377a:	90 58       	subi	r25, 0x80	; 128
    377c:	eb e5       	ldi	r30, 0x5B	; 91
    377e:	f1 e0       	ldi	r31, 0x01	; 1
    3780:	f7 c0       	rjmp	.+494    	; 0x3970 <__fp_powsodd>

00003782 <__fp_split3>:
    3782:	57 fd       	sbrc	r21, 7
    3784:	90 58       	subi	r25, 0x80	; 128
    3786:	44 0f       	add	r20, r20
    3788:	55 1f       	adc	r21, r21
    378a:	59 f0       	breq	.+22     	; 0x37a2 <__fp_splitA+0x10>
    378c:	5f 3f       	cpi	r21, 0xFF	; 255
    378e:	71 f0       	breq	.+28     	; 0x37ac <__fp_splitA+0x1a>
    3790:	47 95       	ror	r20

00003792 <__fp_splitA>:
    3792:	88 0f       	add	r24, r24
    3794:	97 fb       	bst	r25, 7
    3796:	99 1f       	adc	r25, r25
    3798:	61 f0       	breq	.+24     	; 0x37b2 <__fp_splitA+0x20>
    379a:	9f 3f       	cpi	r25, 0xFF	; 255
    379c:	79 f0       	breq	.+30     	; 0x37bc <__fp_splitA+0x2a>
    379e:	87 95       	ror	r24
    37a0:	08 95       	ret
    37a2:	12 16       	cp	r1, r18
    37a4:	13 06       	cpc	r1, r19
    37a6:	14 06       	cpc	r1, r20
    37a8:	55 1f       	adc	r21, r21
    37aa:	f2 cf       	rjmp	.-28     	; 0x3790 <__fp_split3+0xe>
    37ac:	46 95       	lsr	r20
    37ae:	f1 df       	rcall	.-30     	; 0x3792 <__fp_splitA>
    37b0:	08 c0       	rjmp	.+16     	; 0x37c2 <__fp_splitA+0x30>
    37b2:	16 16       	cp	r1, r22
    37b4:	17 06       	cpc	r1, r23
    37b6:	18 06       	cpc	r1, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	f1 cf       	rjmp	.-30     	; 0x379e <__fp_splitA+0xc>
    37bc:	86 95       	lsr	r24
    37be:	71 05       	cpc	r23, r1
    37c0:	61 05       	cpc	r22, r1
    37c2:	08 94       	sec
    37c4:	08 95       	ret

000037c6 <__fp_zero>:
    37c6:	e8 94       	clt

000037c8 <__fp_szero>:
    37c8:	bb 27       	eor	r27, r27
    37ca:	66 27       	eor	r22, r22
    37cc:	77 27       	eor	r23, r23
    37ce:	cb 01       	movw	r24, r22
    37d0:	97 f9       	bld	r25, 7
    37d2:	08 95       	ret

000037d4 <__gesf2>:
    37d4:	2c df       	rcall	.-424    	; 0x362e <__fp_cmp>
    37d6:	08 f4       	brcc	.+2      	; 0x37da <__gesf2+0x6>
    37d8:	8f ef       	ldi	r24, 0xFF	; 255
    37da:	08 95       	ret

000037dc <inverse>:
    37dc:	9b 01       	movw	r18, r22
    37de:	ac 01       	movw	r20, r24
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	80 e8       	ldi	r24, 0x80	; 128
    37e6:	9f e3       	ldi	r25, 0x3F	; 63
    37e8:	4c ce       	rjmp	.-872    	; 0x3482 <__divsf3>

000037ea <__mulsf3>:
    37ea:	0b d0       	rcall	.+22     	; 0x3802 <__mulsf3x>
    37ec:	a8 cf       	rjmp	.-176    	; 0x373e <__fp_round>
    37ee:	71 df       	rcall	.-286    	; 0x36d2 <__fp_pscA>
    37f0:	28 f0       	brcs	.+10     	; 0x37fc <__mulsf3+0x12>
    37f2:	76 df       	rcall	.-276    	; 0x36e0 <__fp_pscB>
    37f4:	18 f0       	brcs	.+6      	; 0x37fc <__mulsf3+0x12>
    37f6:	95 23       	and	r25, r21
    37f8:	09 f0       	breq	.+2      	; 0x37fc <__mulsf3+0x12>
    37fa:	3d cf       	rjmp	.-390    	; 0x3676 <__fp_inf>
    37fc:	42 cf       	rjmp	.-380    	; 0x3682 <__fp_nan>
    37fe:	11 24       	eor	r1, r1
    3800:	e3 cf       	rjmp	.-58     	; 0x37c8 <__fp_szero>

00003802 <__mulsf3x>:
    3802:	bf df       	rcall	.-130    	; 0x3782 <__fp_split3>
    3804:	a0 f3       	brcs	.-24     	; 0x37ee <__mulsf3+0x4>

00003806 <__mulsf3_pse>:
    3806:	95 9f       	mul	r25, r21
    3808:	d1 f3       	breq	.-12     	; 0x37fe <__mulsf3+0x14>
    380a:	95 0f       	add	r25, r21
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	55 1f       	adc	r21, r21
    3810:	62 9f       	mul	r22, r18
    3812:	f0 01       	movw	r30, r0
    3814:	72 9f       	mul	r23, r18
    3816:	bb 27       	eor	r27, r27
    3818:	f0 0d       	add	r31, r0
    381a:	b1 1d       	adc	r27, r1
    381c:	63 9f       	mul	r22, r19
    381e:	aa 27       	eor	r26, r26
    3820:	f0 0d       	add	r31, r0
    3822:	b1 1d       	adc	r27, r1
    3824:	aa 1f       	adc	r26, r26
    3826:	64 9f       	mul	r22, r20
    3828:	66 27       	eor	r22, r22
    382a:	b0 0d       	add	r27, r0
    382c:	a1 1d       	adc	r26, r1
    382e:	66 1f       	adc	r22, r22
    3830:	82 9f       	mul	r24, r18
    3832:	22 27       	eor	r18, r18
    3834:	b0 0d       	add	r27, r0
    3836:	a1 1d       	adc	r26, r1
    3838:	62 1f       	adc	r22, r18
    383a:	73 9f       	mul	r23, r19
    383c:	b0 0d       	add	r27, r0
    383e:	a1 1d       	adc	r26, r1
    3840:	62 1f       	adc	r22, r18
    3842:	83 9f       	mul	r24, r19
    3844:	a0 0d       	add	r26, r0
    3846:	61 1d       	adc	r22, r1
    3848:	22 1f       	adc	r18, r18
    384a:	74 9f       	mul	r23, r20
    384c:	33 27       	eor	r19, r19
    384e:	a0 0d       	add	r26, r0
    3850:	61 1d       	adc	r22, r1
    3852:	23 1f       	adc	r18, r19
    3854:	84 9f       	mul	r24, r20
    3856:	60 0d       	add	r22, r0
    3858:	21 1d       	adc	r18, r1
    385a:	82 2f       	mov	r24, r18
    385c:	76 2f       	mov	r23, r22
    385e:	6a 2f       	mov	r22, r26
    3860:	11 24       	eor	r1, r1
    3862:	9f 57       	subi	r25, 0x7F	; 127
    3864:	50 40       	sbci	r21, 0x00	; 0
    3866:	8a f0       	brmi	.+34     	; 0x388a <__mulsf3_pse+0x84>
    3868:	e1 f0       	breq	.+56     	; 0x38a2 <__mulsf3_pse+0x9c>
    386a:	88 23       	and	r24, r24
    386c:	4a f0       	brmi	.+18     	; 0x3880 <__mulsf3_pse+0x7a>
    386e:	ee 0f       	add	r30, r30
    3870:	ff 1f       	adc	r31, r31
    3872:	bb 1f       	adc	r27, r27
    3874:	66 1f       	adc	r22, r22
    3876:	77 1f       	adc	r23, r23
    3878:	88 1f       	adc	r24, r24
    387a:	91 50       	subi	r25, 0x01	; 1
    387c:	50 40       	sbci	r21, 0x00	; 0
    387e:	a9 f7       	brne	.-22     	; 0x386a <__mulsf3_pse+0x64>
    3880:	9e 3f       	cpi	r25, 0xFE	; 254
    3882:	51 05       	cpc	r21, r1
    3884:	70 f0       	brcs	.+28     	; 0x38a2 <__mulsf3_pse+0x9c>
    3886:	f7 ce       	rjmp	.-530    	; 0x3676 <__fp_inf>
    3888:	9f cf       	rjmp	.-194    	; 0x37c8 <__fp_szero>
    388a:	5f 3f       	cpi	r21, 0xFF	; 255
    388c:	ec f3       	brlt	.-6      	; 0x3888 <__mulsf3_pse+0x82>
    388e:	98 3e       	cpi	r25, 0xE8	; 232
    3890:	dc f3       	brlt	.-10     	; 0x3888 <__mulsf3_pse+0x82>
    3892:	86 95       	lsr	r24
    3894:	77 95       	ror	r23
    3896:	67 95       	ror	r22
    3898:	b7 95       	ror	r27
    389a:	f7 95       	ror	r31
    389c:	e7 95       	ror	r30
    389e:	9f 5f       	subi	r25, 0xFF	; 255
    38a0:	c1 f7       	brne	.-16     	; 0x3892 <__mulsf3_pse+0x8c>
    38a2:	fe 2b       	or	r31, r30
    38a4:	88 0f       	add	r24, r24
    38a6:	91 1d       	adc	r25, r1
    38a8:	96 95       	lsr	r25
    38aa:	87 95       	ror	r24
    38ac:	97 f9       	bld	r25, 7
    38ae:	08 95       	ret

000038b0 <sin>:
    38b0:	9f 93       	push	r25
    38b2:	1e df       	rcall	.-452    	; 0x36f0 <__fp_rempio2>
    38b4:	0f 90       	pop	r0
    38b6:	07 fc       	sbrc	r0, 7
    38b8:	ee 5f       	subi	r30, 0xFE	; 254
    38ba:	52 cf       	rjmp	.-348    	; 0x3760 <__fp_sinus>
    38bc:	11 f4       	brne	.+4      	; 0x38c2 <sin+0x12>
    38be:	0e f4       	brtc	.+2      	; 0x38c2 <sin+0x12>
    38c0:	e0 ce       	rjmp	.-576    	; 0x3682 <__fp_nan>
    38c2:	41 c0       	rjmp	.+130    	; 0x3946 <__fp_mpack>

000038c4 <sqrt>:
    38c4:	66 df       	rcall	.-308    	; 0x3792 <__fp_splitA>
    38c6:	d0 f3       	brcs	.-12     	; 0x38bc <sin+0xc>
    38c8:	99 23       	and	r25, r25
    38ca:	d9 f3       	breq	.-10     	; 0x38c2 <sin+0x12>
    38cc:	ce f3       	brts	.-14     	; 0x38c0 <sin+0x10>
    38ce:	9f 57       	subi	r25, 0x7F	; 127
    38d0:	55 0b       	sbc	r21, r21
    38d2:	87 ff       	sbrs	r24, 7
    38d4:	46 d0       	rcall	.+140    	; 0x3962 <__fp_norm2>
    38d6:	00 24       	eor	r0, r0
    38d8:	a0 e6       	ldi	r26, 0x60	; 96
    38da:	40 ea       	ldi	r20, 0xA0	; 160
    38dc:	90 01       	movw	r18, r0
    38de:	80 58       	subi	r24, 0x80	; 128
    38e0:	56 95       	lsr	r21
    38e2:	97 95       	ror	r25
    38e4:	28 f4       	brcc	.+10     	; 0x38f0 <sqrt+0x2c>
    38e6:	80 5c       	subi	r24, 0xC0	; 192
    38e8:	66 0f       	add	r22, r22
    38ea:	77 1f       	adc	r23, r23
    38ec:	88 1f       	adc	r24, r24
    38ee:	20 f0       	brcs	.+8      	; 0x38f8 <sqrt+0x34>
    38f0:	26 17       	cp	r18, r22
    38f2:	37 07       	cpc	r19, r23
    38f4:	48 07       	cpc	r20, r24
    38f6:	30 f4       	brcc	.+12     	; 0x3904 <sqrt+0x40>
    38f8:	62 1b       	sub	r22, r18
    38fa:	73 0b       	sbc	r23, r19
    38fc:	84 0b       	sbc	r24, r20
    38fe:	20 29       	or	r18, r0
    3900:	31 29       	or	r19, r1
    3902:	4a 2b       	or	r20, r26
    3904:	a6 95       	lsr	r26
    3906:	17 94       	ror	r1
    3908:	07 94       	ror	r0
    390a:	20 25       	eor	r18, r0
    390c:	31 25       	eor	r19, r1
    390e:	4a 27       	eor	r20, r26
    3910:	58 f7       	brcc	.-42     	; 0x38e8 <sqrt+0x24>
    3912:	66 0f       	add	r22, r22
    3914:	77 1f       	adc	r23, r23
    3916:	88 1f       	adc	r24, r24
    3918:	20 f0       	brcs	.+8      	; 0x3922 <sqrt+0x5e>
    391a:	26 17       	cp	r18, r22
    391c:	37 07       	cpc	r19, r23
    391e:	48 07       	cpc	r20, r24
    3920:	30 f4       	brcc	.+12     	; 0x392e <sqrt+0x6a>
    3922:	62 0b       	sbc	r22, r18
    3924:	73 0b       	sbc	r23, r19
    3926:	84 0b       	sbc	r24, r20
    3928:	20 0d       	add	r18, r0
    392a:	31 1d       	adc	r19, r1
    392c:	41 1d       	adc	r20, r1
    392e:	a0 95       	com	r26
    3930:	81 f7       	brne	.-32     	; 0x3912 <sqrt+0x4e>
    3932:	b9 01       	movw	r22, r18
    3934:	84 2f       	mov	r24, r20
    3936:	91 58       	subi	r25, 0x81	; 129
    3938:	88 0f       	add	r24, r24
    393a:	96 95       	lsr	r25
    393c:	87 95       	ror	r24
    393e:	08 95       	ret

00003940 <square>:
    3940:	9b 01       	movw	r18, r22
    3942:	ac 01       	movw	r20, r24
    3944:	52 cf       	rjmp	.-348    	; 0x37ea <__mulsf3>

00003946 <__fp_mpack>:
    3946:	9f 3f       	cpi	r25, 0xFF	; 255
    3948:	31 f0       	breq	.+12     	; 0x3956 <__fp_mpack_finite+0xc>

0000394a <__fp_mpack_finite>:
    394a:	91 50       	subi	r25, 0x01	; 1
    394c:	20 f4       	brcc	.+8      	; 0x3956 <__fp_mpack_finite+0xc>
    394e:	87 95       	ror	r24
    3950:	77 95       	ror	r23
    3952:	67 95       	ror	r22
    3954:	b7 95       	ror	r27
    3956:	88 0f       	add	r24, r24
    3958:	91 1d       	adc	r25, r1
    395a:	96 95       	lsr	r25
    395c:	87 95       	ror	r24
    395e:	97 f9       	bld	r25, 7
    3960:	08 95       	ret

00003962 <__fp_norm2>:
    3962:	91 50       	subi	r25, 0x01	; 1
    3964:	50 40       	sbci	r21, 0x00	; 0
    3966:	66 0f       	add	r22, r22
    3968:	77 1f       	adc	r23, r23
    396a:	88 1f       	adc	r24, r24
    396c:	d2 f7       	brpl	.-12     	; 0x3962 <__fp_norm2>
    396e:	08 95       	ret

00003970 <__fp_powsodd>:
    3970:	9f 93       	push	r25
    3972:	8f 93       	push	r24
    3974:	7f 93       	push	r23
    3976:	6f 93       	push	r22
    3978:	ff 93       	push	r31
    397a:	ef 93       	push	r30
    397c:	9b 01       	movw	r18, r22
    397e:	ac 01       	movw	r20, r24
    3980:	34 df       	rcall	.-408    	; 0x37ea <__mulsf3>
    3982:	ef 91       	pop	r30
    3984:	ff 91       	pop	r31
    3986:	80 de       	rcall	.-768    	; 0x3688 <__fp_powser>
    3988:	2f 91       	pop	r18
    398a:	3f 91       	pop	r19
    398c:	4f 91       	pop	r20
    398e:	5f 91       	pop	r21
    3990:	2c cf       	rjmp	.-424    	; 0x37ea <__mulsf3>

00003992 <__divmodhi4>:
    3992:	97 fb       	bst	r25, 7
    3994:	09 2e       	mov	r0, r25
    3996:	07 26       	eor	r0, r23
    3998:	0a d0       	rcall	.+20     	; 0x39ae <__divmodhi4_neg1>
    399a:	77 fd       	sbrc	r23, 7
    399c:	04 d0       	rcall	.+8      	; 0x39a6 <__divmodhi4_neg2>
    399e:	0c d0       	rcall	.+24     	; 0x39b8 <__udivmodhi4>
    39a0:	06 d0       	rcall	.+12     	; 0x39ae <__divmodhi4_neg1>
    39a2:	00 20       	and	r0, r0
    39a4:	1a f4       	brpl	.+6      	; 0x39ac <__divmodhi4_exit>

000039a6 <__divmodhi4_neg2>:
    39a6:	70 95       	com	r23
    39a8:	61 95       	neg	r22
    39aa:	7f 4f       	sbci	r23, 0xFF	; 255

000039ac <__divmodhi4_exit>:
    39ac:	08 95       	ret

000039ae <__divmodhi4_neg1>:
    39ae:	f6 f7       	brtc	.-4      	; 0x39ac <__divmodhi4_exit>
    39b0:	90 95       	com	r25
    39b2:	81 95       	neg	r24
    39b4:	9f 4f       	sbci	r25, 0xFF	; 255
    39b6:	08 95       	ret

000039b8 <__udivmodhi4>:
    39b8:	aa 1b       	sub	r26, r26
    39ba:	bb 1b       	sub	r27, r27
    39bc:	51 e1       	ldi	r21, 0x11	; 17
    39be:	07 c0       	rjmp	.+14     	; 0x39ce <__udivmodhi4_ep>

000039c0 <__udivmodhi4_loop>:
    39c0:	aa 1f       	adc	r26, r26
    39c2:	bb 1f       	adc	r27, r27
    39c4:	a6 17       	cp	r26, r22
    39c6:	b7 07       	cpc	r27, r23
    39c8:	10 f0       	brcs	.+4      	; 0x39ce <__udivmodhi4_ep>
    39ca:	a6 1b       	sub	r26, r22
    39cc:	b7 0b       	sbc	r27, r23

000039ce <__udivmodhi4_ep>:
    39ce:	88 1f       	adc	r24, r24
    39d0:	99 1f       	adc	r25, r25
    39d2:	5a 95       	dec	r21
    39d4:	a9 f7       	brne	.-22     	; 0x39c0 <__udivmodhi4_loop>
    39d6:	80 95       	com	r24
    39d8:	90 95       	com	r25
    39da:	bc 01       	movw	r22, r24
    39dc:	cd 01       	movw	r24, r26
    39de:	08 95       	ret

000039e0 <itoa>:
    39e0:	fb 01       	movw	r30, r22
    39e2:	9f 01       	movw	r18, r30
    39e4:	e8 94       	clt
    39e6:	42 30       	cpi	r20, 0x02	; 2
    39e8:	c4 f0       	brlt	.+48     	; 0x3a1a <itoa+0x3a>
    39ea:	45 32       	cpi	r20, 0x25	; 37
    39ec:	b4 f4       	brge	.+44     	; 0x3a1a <itoa+0x3a>
    39ee:	4a 30       	cpi	r20, 0x0A	; 10
    39f0:	29 f4       	brne	.+10     	; 0x39fc <itoa+0x1c>
    39f2:	97 fb       	bst	r25, 7
    39f4:	1e f4       	brtc	.+6      	; 0x39fc <itoa+0x1c>
    39f6:	90 95       	com	r25
    39f8:	81 95       	neg	r24
    39fa:	9f 4f       	sbci	r25, 0xFF	; 255
    39fc:	64 2f       	mov	r22, r20
    39fe:	77 27       	eor	r23, r23
    3a00:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__udivmodhi4>
    3a04:	80 5d       	subi	r24, 0xD0	; 208
    3a06:	8a 33       	cpi	r24, 0x3A	; 58
    3a08:	0c f0       	brlt	.+2      	; 0x3a0c <itoa+0x2c>
    3a0a:	89 5d       	subi	r24, 0xD9	; 217
    3a0c:	81 93       	st	Z+, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	a1 f7       	brne	.-24     	; 0x39fc <itoa+0x1c>
    3a14:	16 f4       	brtc	.+4      	; 0x3a1a <itoa+0x3a>
    3a16:	5d e2       	ldi	r21, 0x2D	; 45
    3a18:	51 93       	st	Z+, r21
    3a1a:	10 82       	st	Z, r1
    3a1c:	c9 01       	movw	r24, r18
    3a1e:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <strrev>

00003a22 <ltoa>:
    3a22:	fa 01       	movw	r30, r20
    3a24:	cf 93       	push	r28
    3a26:	ff 93       	push	r31
    3a28:	ef 93       	push	r30
    3a2a:	22 30       	cpi	r18, 0x02	; 2
    3a2c:	44 f1       	brlt	.+80     	; 0x3a7e <ltoa+0x5c>
    3a2e:	25 32       	cpi	r18, 0x25	; 37
    3a30:	34 f5       	brge	.+76     	; 0x3a7e <ltoa+0x5c>
    3a32:	c2 2f       	mov	r28, r18
    3a34:	e8 94       	clt
    3a36:	ca 30       	cpi	r28, 0x0A	; 10
    3a38:	49 f4       	brne	.+18     	; 0x3a4c <ltoa+0x2a>
    3a3a:	97 fb       	bst	r25, 7
    3a3c:	3e f4       	brtc	.+14     	; 0x3a4c <ltoa+0x2a>
    3a3e:	90 95       	com	r25
    3a40:	80 95       	com	r24
    3a42:	70 95       	com	r23
    3a44:	61 95       	neg	r22
    3a46:	7f 4f       	sbci	r23, 0xFF	; 255
    3a48:	8f 4f       	sbci	r24, 0xFF	; 255
    3a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4c:	2c 2f       	mov	r18, r28
    3a4e:	33 27       	eor	r19, r19
    3a50:	44 27       	eor	r20, r20
    3a52:	55 27       	eor	r21, r21
    3a54:	ff 93       	push	r31
    3a56:	ef 93       	push	r30
    3a58:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__udivmodsi4>
    3a5c:	ef 91       	pop	r30
    3a5e:	ff 91       	pop	r31
    3a60:	60 5d       	subi	r22, 0xD0	; 208
    3a62:	6a 33       	cpi	r22, 0x3A	; 58
    3a64:	0c f0       	brlt	.+2      	; 0x3a68 <ltoa+0x46>
    3a66:	69 5d       	subi	r22, 0xD9	; 217
    3a68:	61 93       	st	Z+, r22
    3a6a:	b9 01       	movw	r22, r18
    3a6c:	ca 01       	movw	r24, r20
    3a6e:	60 50       	subi	r22, 0x00	; 0
    3a70:	70 40       	sbci	r23, 0x00	; 0
    3a72:	80 40       	sbci	r24, 0x00	; 0
    3a74:	90 40       	sbci	r25, 0x00	; 0
    3a76:	51 f7       	brne	.-44     	; 0x3a4c <ltoa+0x2a>
    3a78:	16 f4       	brtc	.+4      	; 0x3a7e <ltoa+0x5c>
    3a7a:	cd e2       	ldi	r28, 0x2D	; 45
    3a7c:	c1 93       	st	Z+, r28
    3a7e:	10 82       	st	Z, r1
    3a80:	8f 91       	pop	r24
    3a82:	9f 91       	pop	r25
    3a84:	cf 91       	pop	r28
    3a86:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <strrev>

00003a8a <ultoa>:
    3a8a:	fa 01       	movw	r30, r20
    3a8c:	cf 93       	push	r28
    3a8e:	ff 93       	push	r31
    3a90:	ef 93       	push	r30
    3a92:	22 30       	cpi	r18, 0x02	; 2
    3a94:	cc f0       	brlt	.+50     	; 0x3ac8 <ultoa+0x3e>
    3a96:	25 32       	cpi	r18, 0x25	; 37
    3a98:	bc f4       	brge	.+46     	; 0x3ac8 <ultoa+0x3e>
    3a9a:	c2 2f       	mov	r28, r18
    3a9c:	2c 2f       	mov	r18, r28
    3a9e:	33 27       	eor	r19, r19
    3aa0:	44 27       	eor	r20, r20
    3aa2:	55 27       	eor	r21, r21
    3aa4:	ff 93       	push	r31
    3aa6:	ef 93       	push	r30
    3aa8:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <__udivmodsi4>
    3aac:	ef 91       	pop	r30
    3aae:	ff 91       	pop	r31
    3ab0:	60 5d       	subi	r22, 0xD0	; 208
    3ab2:	6a 33       	cpi	r22, 0x3A	; 58
    3ab4:	0c f0       	brlt	.+2      	; 0x3ab8 <ultoa+0x2e>
    3ab6:	69 5d       	subi	r22, 0xD9	; 217
    3ab8:	61 93       	st	Z+, r22
    3aba:	b9 01       	movw	r22, r18
    3abc:	ca 01       	movw	r24, r20
    3abe:	60 50       	subi	r22, 0x00	; 0
    3ac0:	70 40       	sbci	r23, 0x00	; 0
    3ac2:	80 40       	sbci	r24, 0x00	; 0
    3ac4:	90 40       	sbci	r25, 0x00	; 0
    3ac6:	51 f7       	brne	.-44     	; 0x3a9c <ultoa+0x12>
    3ac8:	10 82       	st	Z, r1
    3aca:	8f 91       	pop	r24
    3acc:	9f 91       	pop	r25
    3ace:	cf 91       	pop	r28
    3ad0:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <strrev>

00003ad4 <utoa>:
    3ad4:	fb 01       	movw	r30, r22
    3ad6:	9f 01       	movw	r18, r30
    3ad8:	42 30       	cpi	r20, 0x02	; 2
    3ada:	74 f0       	brlt	.+28     	; 0x3af8 <utoa+0x24>
    3adc:	45 32       	cpi	r20, 0x25	; 37
    3ade:	64 f4       	brge	.+24     	; 0x3af8 <utoa+0x24>
    3ae0:	64 2f       	mov	r22, r20
    3ae2:	77 27       	eor	r23, r23
    3ae4:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__udivmodhi4>
    3ae8:	80 5d       	subi	r24, 0xD0	; 208
    3aea:	8a 33       	cpi	r24, 0x3A	; 58
    3aec:	0c f0       	brlt	.+2      	; 0x3af0 <utoa+0x1c>
    3aee:	89 5d       	subi	r24, 0xD9	; 217
    3af0:	81 93       	st	Z+, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	a1 f7       	brne	.-24     	; 0x3ae0 <utoa+0xc>
    3af8:	10 82       	st	Z, r1
    3afa:	c9 01       	movw	r24, r18
    3afc:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <strrev>

00003b00 <strrev>:
    3b00:	dc 01       	movw	r26, r24
    3b02:	fc 01       	movw	r30, r24
    3b04:	67 2f       	mov	r22, r23
    3b06:	71 91       	ld	r23, Z+
    3b08:	77 23       	and	r23, r23
    3b0a:	e1 f7       	brne	.-8      	; 0x3b04 <strrev+0x4>
    3b0c:	32 97       	sbiw	r30, 0x02	; 2
    3b0e:	04 c0       	rjmp	.+8      	; 0x3b18 <strrev+0x18>
    3b10:	7c 91       	ld	r23, X
    3b12:	6d 93       	st	X+, r22
    3b14:	70 83       	st	Z, r23
    3b16:	62 91       	ld	r22, -Z
    3b18:	ae 17       	cp	r26, r30
    3b1a:	bf 07       	cpc	r27, r31
    3b1c:	c8 f3       	brcs	.-14     	; 0x3b10 <strrev+0x10>
    3b1e:	08 95       	ret

00003b20 <__udivmodsi4>:
    3b20:	a1 e2       	ldi	r26, 0x21	; 33
    3b22:	1a 2e       	mov	r1, r26
    3b24:	aa 1b       	sub	r26, r26
    3b26:	bb 1b       	sub	r27, r27
    3b28:	fd 01       	movw	r30, r26
    3b2a:	0d c0       	rjmp	.+26     	; 0x3b46 <__udivmodsi4_ep>

00003b2c <__udivmodsi4_loop>:
    3b2c:	aa 1f       	adc	r26, r26
    3b2e:	bb 1f       	adc	r27, r27
    3b30:	ee 1f       	adc	r30, r30
    3b32:	ff 1f       	adc	r31, r31
    3b34:	a2 17       	cp	r26, r18
    3b36:	b3 07       	cpc	r27, r19
    3b38:	e4 07       	cpc	r30, r20
    3b3a:	f5 07       	cpc	r31, r21
    3b3c:	20 f0       	brcs	.+8      	; 0x3b46 <__udivmodsi4_ep>
    3b3e:	a2 1b       	sub	r26, r18
    3b40:	b3 0b       	sbc	r27, r19
    3b42:	e4 0b       	sbc	r30, r20
    3b44:	f5 0b       	sbc	r31, r21

00003b46 <__udivmodsi4_ep>:
    3b46:	66 1f       	adc	r22, r22
    3b48:	77 1f       	adc	r23, r23
    3b4a:	88 1f       	adc	r24, r24
    3b4c:	99 1f       	adc	r25, r25
    3b4e:	1a 94       	dec	r1
    3b50:	69 f7       	brne	.-38     	; 0x3b2c <__udivmodsi4_loop>
    3b52:	60 95       	com	r22
    3b54:	70 95       	com	r23
    3b56:	80 95       	com	r24
    3b58:	90 95       	com	r25
    3b5a:	9b 01       	movw	r18, r22
    3b5c:	ac 01       	movw	r20, r24
    3b5e:	bd 01       	movw	r22, r26
    3b60:	cf 01       	movw	r24, r30
    3b62:	08 95       	ret

00003b64 <_exit>:
    3b64:	f8 94       	cli

00003b66 <__stop_program>:
    3b66:	ff cf       	rjmp	.-2      	; 0x3b66 <__stop_program>
