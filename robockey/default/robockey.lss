
robockey.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00003f52  00003fe6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800140  00800140  00004026  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000006a4  00000000  00000000  00004166  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002571  00000000  00000000  0000480a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b59  00000000  00000000  00006d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025cb  00000000  00000000  000078d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00009ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079d  00000000  00000000  0000a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d83  00000000  00000000  0000aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0000c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 23 01 	jmp	0x246	; 0x246 <__ctors_end>
       4:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       8:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       c:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__vector_3>
      10:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      14:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      18:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      1c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      20:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      24:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      28:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__vector_10>
      2c:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_11>
      30:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      34:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      38:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      3c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      40:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      44:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      48:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      4c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      50:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      54:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      58:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      5c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      60:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      64:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      68:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      6c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      70:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      74:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      78:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      7c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      80:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      84:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      88:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      8c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      90:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      94:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      98:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      9c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      a0:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      a4:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      a8:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      ac:	c9 16       	cp	r12, r25
      ae:	c6 16       	cp	r12, r22
      b0:	c3 16       	cp	r12, r19
      b2:	c0 16       	cp	r12, r16
      b4:	bd 16       	cp	r11, r29
      b6:	ba 16       	cp	r11, r26
      b8:	b7 16       	cp	r11, r23
      ba:	b4 16       	cp	r11, r20
      bc:	b1 16       	cp	r11, r17
      be:	ae 16       	cp	r10, r30
      c0:	ab 16       	cp	r10, r27
      c2:	a8 16       	cp	r10, r24
      c4:	a5 16       	cp	r10, r21
      c6:	a2 16       	cp	r10, r18
      c8:	9f 16       	cp	r9, r31
      ca:	9c 16       	cp	r9, r28
      cc:	99 16       	cp	r9, r25
      ce:	96 16       	cp	r9, r22
      d0:	93 16       	cp	r9, r19
      d2:	90 16       	cp	r9, r16
      d4:	8d 16       	cp	r8, r29
      d6:	8a 16       	cp	r8, r26
      d8:	87 16       	cp	r8, r23
      da:	84 16       	cp	r8, r20
      dc:	81 16       	cp	r8, r17
      de:	7e 16       	cp	r7, r30
      e0:	7b 16       	cp	r7, r27
      e2:	78 16       	cp	r7, r24
      e4:	75 16       	cp	r7, r21
      e6:	72 16       	cp	r7, r18
      e8:	6f 16       	cp	r6, r31
      ea:	6c 16       	cp	r6, r28
      ec:	69 16       	cp	r6, r25
      ee:	66 16       	cp	r6, r22
      f0:	63 16       	cp	r6, r19
      f2:	60 16       	cp	r6, r16
      f4:	5d 16       	cp	r5, r29
      f6:	5a 16       	cp	r5, r26
      f8:	57 16       	cp	r5, r23
      fa:	54 16       	cp	r5, r20
      fc:	51 16       	cp	r5, r17
      fe:	4e 16       	cp	r4, r30
     100:	4b 16       	cp	r4, r27
     102:	48 16       	cp	r4, r24
     104:	45 16       	cp	r4, r21
     106:	42 16       	cp	r4, r18
     108:	3f 16       	cp	r3, r31
     10a:	3c 16       	cp	r3, r28
     10c:	39 16       	cp	r3, r25
     10e:	36 16       	cp	r3, r22
     110:	33 16       	cp	r3, r19
     112:	30 16       	cp	r3, r16
     114:	2d 16       	cp	r2, r29
     116:	2a 16       	cp	r2, r26
     118:	27 16       	cp	r2, r23
     11a:	24 16       	cp	r2, r20
     11c:	21 16       	cp	r2, r17
     11e:	1e 16       	cp	r1, r30
     120:	1b 16       	cp	r1, r27
     122:	18 16       	cp	r1, r24
     124:	15 16       	cp	r1, r21
     126:	12 16       	cp	r1, r18
     128:	0f 16       	cp	r0, r31
     12a:	0c 16       	cp	r0, r28
     12c:	09 16       	cp	r0, r25
     12e:	08 4a       	sbci	r16, 0xA8	; 168
     130:	d7 3b       	cpi	r29, 0xB7	; 183
     132:	3b ce       	rjmp	.-906    	; 0xfffffdaa <__eeprom_end+0xff7efdaa>
     134:	01 6e       	ori	r16, 0xE1	; 225
     136:	84 bc       	out	0x24, r8	; 36
     138:	bf fd       	.word	0xfdbf	; ????
     13a:	c1 2f       	mov	r28, r17
     13c:	3d 6c       	ori	r19, 0xCD	; 205
     13e:	74 31       	cpi	r23, 0x14	; 20
     140:	9a bd       	out	0x2a, r25	; 42
     142:	56 83       	std	Z+6, r21	; 0x06
     144:	3d da       	rcall	.-2950   	; 0xfffff5c0 <__eeprom_end+0xff7ef5c0>
     146:	3d 00       	.word	0x003d	; ????
     148:	c7 7f       	andi	r28, 0xF7	; 247
     14a:	11 be       	out	0x31, r1	; 49
     14c:	d9 e4       	ldi	r29, 0x49	; 73
     14e:	bb 4c       	sbci	r27, 0xCB	; 203
     150:	3e 91       	ld	r19, -X
     152:	6b aa       	std	Y+51, r6	; 0x33
     154:	aa be       	out	0x3a, r10	; 58
     156:	00 00       	nop
     158:	00 80       	ld	r0, Z
     15a:	3f 05       	cpc	r19, r15
     15c:	a8 4c       	sbci	r26, 0xC8	; 200
     15e:	cd b2       	in	r12, 0x1d	; 29
     160:	d4 4e       	sbci	r29, 0xE4	; 228
     162:	b9 38       	cpi	r27, 0x89	; 137
     164:	36 a9       	ldd	r19, Z+54	; 0x36
     166:	02 0c       	add	r0, r2
     168:	50 b9       	out	0x00, r21	; 0
     16a:	91 86       	std	Z+9, r9	; 0x09
     16c:	88 08       	sbc	r8, r8
     16e:	3c a6       	std	Y+44, r3	; 0x2c
     170:	aa aa       	std	Y+50, r10	; 0x32
     172:	2a be       	out	0x3a, r2	; 58
     174:	00 00       	nop
     176:	00 80       	ld	r0, Z
     178:	3f 0a       	sbc	r3, r31

00000179 <__c.1923>:
     179:	0a 00                                               ..

0000017b <__c.1921>:
     17b:	54 68 65 74 61 20 3d 20 00                          Theta = .

00000184 <__c.1919>:
     184:	0a 00                                               ..

00000186 <__c.1917>:
     186:	59 20 3d 20 00                                      Y = .

0000018b <__c.1915>:
     18b:	0a 00                                               ..

0000018d <__c.1913>:
     18d:	58 20 3d 20 00                                      X = .

00000192 <descriptor_list>:
     192:	00 01 00 00 c6 01 12 00 02 00 00 d8 01 43 00 03     .............C..
     1a2:	00 00 1b 02 04 01 03 09 04 1f 02 12 02 03 09 04     ................
     1b2:	33 02 06 03 03 09 04 3b 02 08                       3......;..

000001bc <endpoint_config_table>:
     1bc:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001c6 <device_descriptor>:
     1c6:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1d6:	03 01                                               ..

000001d8 <config1_descriptor>:
     1d8:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1e8:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1f8:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     208:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     218:	40 00 00                                            @..

0000021b <string0>:
     21b:	04 03 09 04                                         ....

0000021f <string1>:
     21f:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     22f:	65 00 00 00                                         e...

00000233 <string2>:
     233:	06 03 4d 00 32 00 00 00                             ..M.2...

0000023b <string3>:
     23b:	08 03 34 00 31 00 30 00 00 00 00                    ..4.1.0....

00000246 <__ctors_end>:
     246:	11 24       	eor	r1, r1
     248:	1f be       	out	0x3f, r1	; 63
     24a:	cf ef       	ldi	r28, 0xFF	; 255
     24c:	da e0       	ldi	r29, 0x0A	; 10
     24e:	de bf       	out	0x3e, r29	; 62
     250:	cd bf       	out	0x3d, r28	; 61

00000252 <__do_copy_data>:
     252:	11 e0       	ldi	r17, 0x01	; 1
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	e2 e5       	ldi	r30, 0x52	; 82
     25a:	ff e3       	ldi	r31, 0x3F	; 63
     25c:	02 c0       	rjmp	.+4      	; 0x262 <.do_copy_data_start>

0000025e <.do_copy_data_loop>:
     25e:	05 90       	lpm	r0, Z+
     260:	0d 92       	st	X+, r0

00000262 <.do_copy_data_start>:
     262:	a0 34       	cpi	r26, 0x40	; 64
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <.do_copy_data_loop>

00000268 <__do_clear_bss>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e4       	ldi	r26, 0x40	; 64
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	a4 3b       	cpi	r26, 0xB4	; 180
     274:	b1 07       	cpc	r27, r17
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	0e 94 42 01 	call	0x284	; 0x284 <main>
     27c:	0c 94 a7 1f 	jmp	0x3f4e	; 0x3f4e <_exit>

00000280 <__bad_interrupt>:
     280:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000284 <main>:
		send_message_to_bot(b, 0x24);
		m_wait(2000);
		m_red(TOGGLE);
	}
	*/
	goalie();	
     284:	0e 94 9c 13 	call	0x2738	; 0x2738 <goalie>

	#endif

}
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	08 95       	ret

0000028e <set_position>:

}

void set_position(int x, int y)
{
	x_init = x;
     28e:	90 93 60 01 	sts	0x0160, r25
     292:	80 93 5f 01 	sts	0x015F, r24
	y_init = y;
     296:	70 93 71 01 	sts	0x0171, r23
     29a:	60 93 70 01 	sts	0x0170, r22
}
     29e:	08 95       	ret

000002a0 <min3>:

double min3(double a, double b, double c)
{
     2a0:	2f 92       	push	r2
     2a2:	3f 92       	push	r3
     2a4:	4f 92       	push	r4
     2a6:	5f 92       	push	r5
     2a8:	6f 92       	push	r6
     2aa:	7f 92       	push	r7
     2ac:	8f 92       	push	r8
     2ae:	9f 92       	push	r9
     2b0:	af 92       	push	r10
     2b2:	bf 92       	push	r11
     2b4:	cf 92       	push	r12
     2b6:	df 92       	push	r13
     2b8:	ef 92       	push	r14
     2ba:	ff 92       	push	r15
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	96 2e       	mov	r9, r22
     2c2:	87 2e       	mov	r8, r23
     2c4:	78 2e       	mov	r7, r24
     2c6:	69 2e       	mov	r6, r25
     2c8:	d2 2e       	mov	r13, r18
     2ca:	c3 2e       	mov	r12, r19
     2cc:	b4 2e       	mov	r11, r20
     2ce:	a5 2e       	mov	r10, r21
     2d0:	5e 2c       	mov	r5, r14
     2d2:	4f 2c       	mov	r4, r15
     2d4:	30 2e       	mov	r3, r16
     2d6:	21 2e       	mov	r2, r17
	double ret = a;
	if(b < ret)
     2d8:	62 2f       	mov	r22, r18
     2da:	73 2f       	mov	r23, r19
     2dc:	84 2f       	mov	r24, r20
     2de:	95 2f       	mov	r25, r21
     2e0:	29 2d       	mov	r18, r9
     2e2:	38 2d       	mov	r19, r8
     2e4:	47 2d       	mov	r20, r7
     2e6:	56 2d       	mov	r21, r6
     2e8:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     2ec:	88 23       	and	r24, r24
     2ee:	2c f4       	brge	.+10     	; 0x2fa <min3+0x5a>
     2f0:	ed 2c       	mov	r14, r13
     2f2:	fc 2c       	mov	r15, r12
     2f4:	0b 2d       	mov	r16, r11
     2f6:	1a 2d       	mov	r17, r10
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <min3+0x62>
     2fa:	e9 2c       	mov	r14, r9
     2fc:	f8 2c       	mov	r15, r8
     2fe:	07 2d       	mov	r16, r7
     300:	16 2d       	mov	r17, r6
		ret = b;
	if (c < ret)
     302:	65 2d       	mov	r22, r5
     304:	74 2d       	mov	r23, r4
     306:	83 2d       	mov	r24, r3
     308:	92 2d       	mov	r25, r2
     30a:	97 01       	movw	r18, r14
     30c:	a8 01       	movw	r20, r16
     30e:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     312:	88 23       	and	r24, r24
     314:	24 f4       	brge	.+8      	; 0x31e <min3+0x7e>
     316:	e5 2c       	mov	r14, r5
     318:	f4 2c       	mov	r15, r4
     31a:	03 2d       	mov	r16, r3
     31c:	12 2d       	mov	r17, r2
		ret = c;
	return ret;
}
     31e:	b7 01       	movw	r22, r14
     320:	c8 01       	movw	r24, r16
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	af 90       	pop	r10
     332:	9f 90       	pop	r9
     334:	8f 90       	pop	r8
     336:	7f 90       	pop	r7
     338:	6f 90       	pop	r6
     33a:	5f 90       	pop	r5
     33c:	4f 90       	pop	r4
     33e:	3f 90       	pop	r3
     340:	2f 90       	pop	r2
     342:	08 95       	ret

00000344 <min4>:

double min4(double a, double b, double c, double d)
{
     344:	2f 92       	push	r2
     346:	3f 92       	push	r3
     348:	4f 92       	push	r4
     34a:	5f 92       	push	r5
     34c:	6f 92       	push	r6
     34e:	7f 92       	push	r7
     350:	8f 92       	push	r8
     352:	9f 92       	push	r9
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	df 93       	push	r29
     366:	cf 93       	push	r28
     368:	00 d0       	rcall	.+0      	; 0x36a <min4+0x26>
     36a:	00 d0       	rcall	.+0      	; 0x36c <min4+0x28>
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	56 2e       	mov	r5, r22
     372:	47 2e       	mov	r4, r23
     374:	38 2e       	mov	r3, r24
     376:	29 2e       	mov	r2, r25
     378:	92 2e       	mov	r9, r18
     37a:	83 2e       	mov	r8, r19
     37c:	74 2e       	mov	r7, r20
     37e:	65 2e       	mov	r6, r21
     380:	e9 82       	std	Y+1, r14	; 0x01
     382:	fa 82       	std	Y+2, r15	; 0x02
     384:	0b 83       	std	Y+3, r16	; 0x03
     386:	1c 83       	std	Y+4, r17	; 0x04
	double ret = a;
	if(b < ret)
     388:	62 2f       	mov	r22, r18
     38a:	73 2f       	mov	r23, r19
     38c:	84 2f       	mov	r24, r20
     38e:	95 2f       	mov	r25, r21
     390:	25 2d       	mov	r18, r5
     392:	34 2d       	mov	r19, r4
     394:	43 2d       	mov	r20, r3
     396:	52 2d       	mov	r21, r2
     398:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     39c:	88 23       	and	r24, r24
     39e:	2c f4       	brge	.+10     	; 0x3aa <min4+0x66>
     3a0:	e9 2c       	mov	r14, r9
     3a2:	f8 2c       	mov	r15, r8
     3a4:	07 2d       	mov	r16, r7
     3a6:	16 2d       	mov	r17, r6
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <min4+0x6e>
     3aa:	e5 2c       	mov	r14, r5
     3ac:	f4 2c       	mov	r15, r4
     3ae:	03 2d       	mov	r16, r3
     3b0:	12 2d       	mov	r17, r2
		ret = b;
	if(c < ret)
     3b2:	69 81       	ldd	r22, Y+1	; 0x01
     3b4:	7a 81       	ldd	r23, Y+2	; 0x02
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ba:	97 01       	movw	r18, r14
     3bc:	a8 01       	movw	r20, r16
     3be:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     3c2:	88 23       	and	r24, r24
     3c4:	24 f4       	brge	.+8      	; 0x3ce <min4+0x8a>
     3c6:	e9 80       	ldd	r14, Y+1	; 0x01
     3c8:	fa 80       	ldd	r15, Y+2	; 0x02
     3ca:	0b 81       	ldd	r16, Y+3	; 0x03
     3cc:	1c 81       	ldd	r17, Y+4	; 0x04
		ret = c;
	if(d < ret)
     3ce:	b5 01       	movw	r22, r10
     3d0:	c6 01       	movw	r24, r12
     3d2:	97 01       	movw	r18, r14
     3d4:	a8 01       	movw	r20, r16
     3d6:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     3da:	88 23       	and	r24, r24
     3dc:	14 f4       	brge	.+4      	; 0x3e2 <min4+0x9e>
     3de:	75 01       	movw	r14, r10
     3e0:	86 01       	movw	r16, r12
		ret = d;
	return ret;
}
     3e2:	b7 01       	movw	r22, r14
     3e4:	c8 01       	movw	r24, r16
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	cf 91       	pop	r28
     3f0:	df 91       	pop	r29
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	bf 90       	pop	r11
     400:	af 90       	pop	r10
     402:	9f 90       	pop	r9
     404:	8f 90       	pop	r8
     406:	7f 90       	pop	r7
     408:	6f 90       	pop	r6
     40a:	5f 90       	pop	r5
     40c:	4f 90       	pop	r4
     40e:	3f 90       	pop	r3
     410:	2f 90       	pop	r2
     412:	08 95       	ret

00000414 <get_position>:
double min3(double a, double b, double c);
double min4(double a, double b, double c, double d);


void get_position(unsigned int* inp, double* xo, double* yo, double* to)
{
     414:	2f 92       	push	r2
     416:	3f 92       	push	r3
     418:	4f 92       	push	r4
     41a:	5f 92       	push	r5
     41c:	6f 92       	push	r6
     41e:	7f 92       	push	r7
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	c0 5f       	subi	r28, 0xF0	; 240
     43e:	d0 40       	sbci	r29, 0x00	; 0
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	cd 52       	subi	r28, 0x2D	; 45
     44c:	df 4f       	sbci	r29, 0xFF	; 255
     44e:	99 83       	std	Y+1, r25	; 0x01
     450:	88 83       	st	Y, r24
     452:	c3 5d       	subi	r28, 0xD3	; 211
     454:	d0 40       	sbci	r29, 0x00	; 0
     456:	cb 52       	subi	r28, 0x2B	; 43
     458:	df 4f       	sbci	r29, 0xFF	; 255
     45a:	79 83       	std	Y+1, r23	; 0x01
     45c:	68 83       	st	Y, r22
     45e:	c5 5d       	subi	r28, 0xD5	; 213
     460:	d0 40       	sbci	r29, 0x00	; 0
     462:	c9 52       	subi	r28, 0x29	; 41
     464:	df 4f       	sbci	r29, 0xFF	; 255
     466:	59 83       	std	Y+1, r21	; 0x01
     468:	48 83       	st	Y, r20
     46a:	c7 5d       	subi	r28, 0xD7	; 215
     46c:	d0 40       	sbci	r29, 0x00	; 0
     46e:	c7 52       	subi	r28, 0x27	; 39
     470:	df 4f       	sbci	r29, 0xFF	; 255
     472:	39 83       	std	Y+1, r19	; 0x01
     474:	28 83       	st	Y, r18
     476:	c9 5d       	subi	r28, 0xD9	; 217
     478:	d0 40       	sbci	r29, 0x00	; 0
	int xi1 = inp[0];
     47a:	dc 01       	movw	r26, r24
     47c:	0d 91       	ld	r16, X+
     47e:	1c 91       	ld	r17, X
     480:	11 97       	sbiw	r26, 0x01	; 1
    int yi1 = inp[1];
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	ed 90       	ld	r14, X+
     486:	fc 90       	ld	r15, X
     488:	13 97       	sbiw	r26, 0x03	; 3
    int xi2 = inp[3];
     48a:	16 96       	adiw	r26, 0x06	; 6
     48c:	8d 90       	ld	r8, X+
     48e:	9c 90       	ld	r9, X
     490:	17 97       	sbiw	r26, 0x07	; 7
    int yi2 = inp[4];
     492:	18 96       	adiw	r26, 0x08	; 8
     494:	6d 90       	ld	r6, X+
     496:	7c 90       	ld	r7, X
     498:	19 97       	sbiw	r26, 0x09	; 9
    int xi3 = inp[6];
     49a:	1c 96       	adiw	r26, 0x0c	; 12
     49c:	ed 91       	ld	r30, X+
     49e:	fc 91       	ld	r31, X
     4a0:	1d 97       	sbiw	r26, 0x0d	; 13
     4a2:	cb 55       	subi	r28, 0x5B	; 91
     4a4:	df 4f       	sbci	r29, 0xFF	; 255
     4a6:	f9 83       	std	Y+1, r31	; 0x01
     4a8:	e8 83       	st	Y, r30
     4aa:	c5 5a       	subi	r28, 0xA5	; 165
     4ac:	d0 40       	sbci	r29, 0x00	; 0
    int yi3 = inp[7];
     4ae:	1e 96       	adiw	r26, 0x0e	; 14
     4b0:	2d 91       	ld	r18, X+
     4b2:	3c 91       	ld	r19, X
     4b4:	1f 97       	sbiw	r26, 0x0f	; 15
     4b6:	cd 55       	subi	r28, 0x5D	; 93
     4b8:	df 4f       	sbci	r29, 0xFF	; 255
     4ba:	39 83       	std	Y+1, r19	; 0x01
     4bc:	28 83       	st	Y, r18
     4be:	c3 5a       	subi	r28, 0xA3	; 163
     4c0:	d0 40       	sbci	r29, 0x00	; 0
    int xi4 = inp[9];
     4c2:	52 96       	adiw	r26, 0x12	; 18
     4c4:	8d 91       	ld	r24, X+
     4c6:	9c 91       	ld	r25, X
     4c8:	53 97       	sbiw	r26, 0x13	; 19
     4ca:	cf 55       	subi	r28, 0x5F	; 95
     4cc:	df 4f       	sbci	r29, 0xFF	; 255
     4ce:	99 83       	std	Y+1, r25	; 0x01
     4d0:	88 83       	st	Y, r24
     4d2:	c1 5a       	subi	r28, 0xA1	; 161
     4d4:	d0 40       	sbci	r29, 0x00	; 0
    int yi4 = inp[10];
     4d6:	54 96       	adiw	r26, 0x14	; 20
     4d8:	0d 90       	ld	r0, X+
     4da:	bc 91       	ld	r27, X
     4dc:	a0 2d       	mov	r26, r0
     4de:	c1 56       	subi	r28, 0x61	; 97
     4e0:	df 4f       	sbci	r29, 0xFF	; 255
     4e2:	b9 83       	std	Y+1, r27	; 0x01
     4e4:	a8 83       	st	Y, r26
     4e6:	cf 59       	subi	r28, 0x9F	; 159
     4e8:	d0 40       	sbci	r29, 0x00	; 0
	double y0 = 0;
	double theta_rot = 0;

	bool first = 1;
	double min_err = 0.0;
	int order[] = {0,0,0,0};
     4ea:	fe 01       	movw	r30, r28
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	88 e0       	ldi	r24, 0x08	; 8
     4f0:	df 01       	movw	r26, r30
     4f2:	1d 92       	st	X+, r1
     4f4:	8a 95       	dec	r24
     4f6:	e9 f7       	brne	.-6      	; 0x4f2 <get_position+0xde>

	// only three leds are visible
	if(xi4 == 0 && yi4 == 0)
     4f8:	cf 55       	subi	r28, 0x5F	; 95
     4fa:	df 4f       	sbci	r29, 0xFF	; 255
     4fc:	e8 81       	ld	r30, Y
     4fe:	f9 81       	ldd	r31, Y+1	; 0x01
     500:	c1 5a       	subi	r28, 0xA1	; 161
     502:	d0 40       	sbci	r29, 0x00	; 0
     504:	ef 2b       	or	r30, r31
     506:	09 f0       	breq	.+2      	; 0x50a <get_position+0xf6>
     508:	fc c6       	rjmp	.+3576   	; 0x1302 <__stack+0x803>
     50a:	c1 56       	subi	r28, 0x61	; 97
     50c:	df 4f       	sbci	r29, 0xFF	; 255
     50e:	28 81       	ld	r18, Y
     510:	39 81       	ldd	r19, Y+1	; 0x01
     512:	cf 59       	subi	r28, 0x9F	; 159
     514:	d0 40       	sbci	r29, 0x00	; 0
     516:	23 2b       	or	r18, r19
     518:	09 f0       	breq	.+2      	; 0x51c <get_position+0x108>
     51a:	f3 c6       	rjmp	.+3558   	; 0x1302 <__stack+0x803>
	{
		double xiavg = (xi1 + xi2 + xi3)/3.0;
     51c:	cb 55       	subi	r28, 0x5B	; 91
     51e:	df 4f       	sbci	r29, 0xFF	; 255
     520:	68 81       	ld	r22, Y
     522:	79 81       	ldd	r23, Y+1	; 0x01
     524:	c5 5a       	subi	r28, 0xA5	; 165
     526:	d0 40       	sbci	r29, 0x00	; 0
     528:	68 0d       	add	r22, r8
     52a:	79 1d       	adc	r23, r9
     52c:	60 0f       	add	r22, r16
     52e:	71 1f       	adc	r23, r17
     530:	88 27       	eor	r24, r24
     532:	77 fd       	sbrc	r23, 7
     534:	80 95       	com	r24
     536:	98 2f       	mov	r25, r24
     538:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e4       	ldi	r20, 0x40	; 64
     542:	50 e4       	ldi	r21, 0x40	; 64
     544:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     548:	c2 57       	subi	r28, 0x72	; 114
     54a:	df 4f       	sbci	r29, 0xFF	; 255
     54c:	68 83       	st	Y, r22
     54e:	79 83       	std	Y+1, r23	; 0x01
     550:	8a 83       	std	Y+2, r24	; 0x02
     552:	9b 83       	std	Y+3, r25	; 0x03
     554:	ce 58       	subi	r28, 0x8E	; 142
     556:	d0 40       	sbci	r29, 0x00	; 0
		double yiavg = (yi1 + yi2 + yi3)/3.0;
     558:	b3 01       	movw	r22, r6
     55a:	6e 0d       	add	r22, r14
     55c:	7f 1d       	adc	r23, r15
     55e:	cd 55       	subi	r28, 0x5D	; 93
     560:	df 4f       	sbci	r29, 0xFF	; 255
     562:	88 81       	ld	r24, Y
     564:	99 81       	ldd	r25, Y+1	; 0x01
     566:	c3 5a       	subi	r28, 0xA3	; 163
     568:	d0 40       	sbci	r29, 0x00	; 0
     56a:	68 0f       	add	r22, r24
     56c:	79 1f       	adc	r23, r25
     56e:	88 27       	eor	r24, r24
     570:	77 fd       	sbrc	r23, 7
     572:	80 95       	com	r24
     574:	98 2f       	mov	r25, r24
     576:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e4       	ldi	r20, 0x40	; 64
     580:	50 e4       	ldi	r21, 0x40	; 64
     582:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     586:	c6 57       	subi	r28, 0x76	; 118
     588:	df 4f       	sbci	r29, 0xFF	; 255
     58a:	68 83       	st	Y, r22
     58c:	79 83       	std	Y+1, r23	; 0x01
     58e:	8a 83       	std	Y+2, r24	; 0x02
     590:	9b 83       	std	Y+3, r25	; 0x03
     592:	ca 58       	subi	r28, 0x8A	; 138
     594:	d0 40       	sbci	r29, 0x00	; 0
		
		double di1 = d(xi1, yi1, xiavg, yiavg);
     596:	b8 01       	movw	r22, r16
     598:	88 27       	eor	r24, r24
     59a:	77 fd       	sbrc	r23, 7
     59c:	80 95       	com	r24
     59e:	98 2f       	mov	r25, r24
     5a0:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     5a4:	c2 57       	subi	r28, 0x72	; 114
     5a6:	df 4f       	sbci	r29, 0xFF	; 255
     5a8:	28 81       	ld	r18, Y
     5aa:	39 81       	ldd	r19, Y+1	; 0x01
     5ac:	4a 81       	ldd	r20, Y+2	; 0x02
     5ae:	5b 81       	ldd	r21, Y+3	; 0x03
     5b0:	ce 58       	subi	r28, 0x8E	; 142
     5b2:	d0 40       	sbci	r29, 0x00	; 0
     5b4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     5b8:	5b 01       	movw	r10, r22
     5ba:	6c 01       	movw	r12, r24
     5bc:	b7 01       	movw	r22, r14
     5be:	88 27       	eor	r24, r24
     5c0:	77 fd       	sbrc	r23, 7
     5c2:	80 95       	com	r24
     5c4:	98 2f       	mov	r25, r24
     5c6:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     5ca:	c6 57       	subi	r28, 0x76	; 118
     5cc:	df 4f       	sbci	r29, 0xFF	; 255
     5ce:	28 81       	ld	r18, Y
     5d0:	39 81       	ldd	r19, Y+1	; 0x01
     5d2:	4a 81       	ldd	r20, Y+2	; 0x02
     5d4:	5b 81       	ldd	r21, Y+3	; 0x03
     5d6:	ca 58       	subi	r28, 0x8A	; 138
     5d8:	d0 40       	sbci	r29, 0x00	; 0
     5da:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     5de:	7b 01       	movw	r14, r22
     5e0:	8c 01       	movw	r16, r24
     5e2:	c6 01       	movw	r24, r12
     5e4:	b5 01       	movw	r22, r10
     5e6:	a6 01       	movw	r20, r12
     5e8:	95 01       	movw	r18, r10
     5ea:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     5ee:	5b 01       	movw	r10, r22
     5f0:	6c 01       	movw	r12, r24
     5f2:	c8 01       	movw	r24, r16
     5f4:	b7 01       	movw	r22, r14
     5f6:	a8 01       	movw	r20, r16
     5f8:	97 01       	movw	r18, r14
     5fa:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     5fe:	9b 01       	movw	r18, r22
     600:	ac 01       	movw	r20, r24
     602:	c6 01       	movw	r24, r12
     604:	b5 01       	movw	r22, r10
     606:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     60a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     60e:	ca 57       	subi	r28, 0x7A	; 122
     610:	df 4f       	sbci	r29, 0xFF	; 255
     612:	68 83       	st	Y, r22
     614:	79 83       	std	Y+1, r23	; 0x01
     616:	8a 83       	std	Y+2, r24	; 0x02
     618:	9b 83       	std	Y+3, r25	; 0x03
     61a:	c6 58       	subi	r28, 0x86	; 134
     61c:	d0 40       	sbci	r29, 0x00	; 0
		double di2 = d(xi2, yi2, xiavg, yiavg);
     61e:	b4 01       	movw	r22, r8
     620:	88 27       	eor	r24, r24
     622:	77 fd       	sbrc	r23, 7
     624:	80 95       	com	r24
     626:	98 2f       	mov	r25, r24
     628:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     62c:	c2 57       	subi	r28, 0x72	; 114
     62e:	df 4f       	sbci	r29, 0xFF	; 255
     630:	28 81       	ld	r18, Y
     632:	39 81       	ldd	r19, Y+1	; 0x01
     634:	4a 81       	ldd	r20, Y+2	; 0x02
     636:	5b 81       	ldd	r21, Y+3	; 0x03
     638:	ce 58       	subi	r28, 0x8E	; 142
     63a:	d0 40       	sbci	r29, 0x00	; 0
     63c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     640:	5b 01       	movw	r10, r22
     642:	6c 01       	movw	r12, r24
     644:	b3 01       	movw	r22, r6
     646:	88 27       	eor	r24, r24
     648:	77 fd       	sbrc	r23, 7
     64a:	80 95       	com	r24
     64c:	98 2f       	mov	r25, r24
     64e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     652:	c6 57       	subi	r28, 0x76	; 118
     654:	df 4f       	sbci	r29, 0xFF	; 255
     656:	28 81       	ld	r18, Y
     658:	39 81       	ldd	r19, Y+1	; 0x01
     65a:	4a 81       	ldd	r20, Y+2	; 0x02
     65c:	5b 81       	ldd	r21, Y+3	; 0x03
     65e:	ca 58       	subi	r28, 0x8A	; 138
     660:	d0 40       	sbci	r29, 0x00	; 0
     662:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     666:	7b 01       	movw	r14, r22
     668:	8c 01       	movw	r16, r24
     66a:	c6 01       	movw	r24, r12
     66c:	b5 01       	movw	r22, r10
     66e:	a6 01       	movw	r20, r12
     670:	95 01       	movw	r18, r10
     672:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     676:	5b 01       	movw	r10, r22
     678:	6c 01       	movw	r12, r24
     67a:	c8 01       	movw	r24, r16
     67c:	b7 01       	movw	r22, r14
     67e:	a8 01       	movw	r20, r16
     680:	97 01       	movw	r18, r14
     682:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	c6 01       	movw	r24, r12
     68c:	b5 01       	movw	r22, r10
     68e:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     692:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     696:	ce 57       	subi	r28, 0x7E	; 126
     698:	df 4f       	sbci	r29, 0xFF	; 255
     69a:	68 83       	st	Y, r22
     69c:	79 83       	std	Y+1, r23	; 0x01
     69e:	8a 83       	std	Y+2, r24	; 0x02
     6a0:	9b 83       	std	Y+3, r25	; 0x03
     6a2:	c2 58       	subi	r28, 0x82	; 130
     6a4:	d0 40       	sbci	r29, 0x00	; 0
		double di3 = d(xi3, yi3, xiavg, yiavg);
     6a6:	cb 55       	subi	r28, 0x5B	; 91
     6a8:	df 4f       	sbci	r29, 0xFF	; 255
     6aa:	a8 81       	ld	r26, Y
     6ac:	b9 81       	ldd	r27, Y+1	; 0x01
     6ae:	c5 5a       	subi	r28, 0xA5	; 165
     6b0:	d0 40       	sbci	r29, 0x00	; 0
     6b2:	bd 01       	movw	r22, r26
     6b4:	88 27       	eor	r24, r24
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	80 95       	com	r24
     6ba:	98 2f       	mov	r25, r24
     6bc:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     6c0:	c2 57       	subi	r28, 0x72	; 114
     6c2:	df 4f       	sbci	r29, 0xFF	; 255
     6c4:	28 81       	ld	r18, Y
     6c6:	39 81       	ldd	r19, Y+1	; 0x01
     6c8:	4a 81       	ldd	r20, Y+2	; 0x02
     6ca:	5b 81       	ldd	r21, Y+3	; 0x03
     6cc:	ce 58       	subi	r28, 0x8E	; 142
     6ce:	d0 40       	sbci	r29, 0x00	; 0
     6d0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     6d4:	5b 01       	movw	r10, r22
     6d6:	6c 01       	movw	r12, r24
     6d8:	cd 55       	subi	r28, 0x5D	; 93
     6da:	df 4f       	sbci	r29, 0xFF	; 255
     6dc:	e8 81       	ld	r30, Y
     6de:	f9 81       	ldd	r31, Y+1	; 0x01
     6e0:	c3 5a       	subi	r28, 0xA3	; 163
     6e2:	d0 40       	sbci	r29, 0x00	; 0
     6e4:	bf 01       	movw	r22, r30
     6e6:	88 27       	eor	r24, r24
     6e8:	77 fd       	sbrc	r23, 7
     6ea:	80 95       	com	r24
     6ec:	98 2f       	mov	r25, r24
     6ee:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
     6f2:	c6 57       	subi	r28, 0x76	; 118
     6f4:	df 4f       	sbci	r29, 0xFF	; 255
     6f6:	28 81       	ld	r18, Y
     6f8:	39 81       	ldd	r19, Y+1	; 0x01
     6fa:	4a 81       	ldd	r20, Y+2	; 0x02
     6fc:	5b 81       	ldd	r21, Y+3	; 0x03
     6fe:	ca 58       	subi	r28, 0x8A	; 138
     700:	d0 40       	sbci	r29, 0x00	; 0
     702:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     706:	7b 01       	movw	r14, r22
     708:	8c 01       	movw	r16, r24
     70a:	c6 01       	movw	r24, r12
     70c:	b5 01       	movw	r22, r10
     70e:	a6 01       	movw	r20, r12
     710:	95 01       	movw	r18, r10
     712:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     716:	5b 01       	movw	r10, r22
     718:	6c 01       	movw	r12, r24
     71a:	c8 01       	movw	r24, r16
     71c:	b7 01       	movw	r22, r14
     71e:	a8 01       	movw	r20, r16
     720:	97 01       	movw	r18, r14
     722:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     732:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     736:	5b 01       	movw	r10, r22
     738:	6c 01       	movw	r12, r24
}

double min3(double a, double b, double c)
{
	double ret = a;
	if(b < ret)
     73a:	ce 57       	subi	r28, 0x7E	; 126
     73c:	df 4f       	sbci	r29, 0xFF	; 255
     73e:	68 81       	ld	r22, Y
     740:	79 81       	ldd	r23, Y+1	; 0x01
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	c2 58       	subi	r28, 0x82	; 130
     748:	d0 40       	sbci	r29, 0x00	; 0
     74a:	ca 57       	subi	r28, 0x7A	; 122
     74c:	df 4f       	sbci	r29, 0xFF	; 255
     74e:	28 81       	ld	r18, Y
     750:	39 81       	ldd	r19, Y+1	; 0x01
     752:	4a 81       	ldd	r20, Y+2	; 0x02
     754:	5b 81       	ldd	r21, Y+3	; 0x03
     756:	c6 58       	subi	r28, 0x86	; 134
     758:	d0 40       	sbci	r29, 0x00	; 0
     75a:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     75e:	88 23       	and	r24, r24
     760:	4c f4       	brge	.+18     	; 0x774 <get_position+0x360>
     762:	ce 57       	subi	r28, 0x7E	; 126
     764:	df 4f       	sbci	r29, 0xFF	; 255
     766:	88 81       	ld	r24, Y
     768:	99 81       	ldd	r25, Y+1	; 0x01
     76a:	aa 81       	ldd	r26, Y+2	; 0x02
     76c:	bb 81       	ldd	r27, Y+3	; 0x03
     76e:	c2 58       	subi	r28, 0x82	; 130
     770:	d0 40       	sbci	r29, 0x00	; 0
     772:	08 c0       	rjmp	.+16     	; 0x784 <get_position+0x370>
     774:	ca 57       	subi	r28, 0x7A	; 122
     776:	df 4f       	sbci	r29, 0xFF	; 255
     778:	88 81       	ld	r24, Y
     77a:	99 81       	ldd	r25, Y+1	; 0x01
     77c:	aa 81       	ldd	r26, Y+2	; 0x02
     77e:	bb 81       	ldd	r27, Y+3	; 0x03
     780:	c6 58       	subi	r28, 0x86	; 134
     782:	d0 40       	sbci	r29, 0x00	; 0
     784:	7c 01       	movw	r14, r24
     786:	8d 01       	movw	r16, r26
		ret = b;
	if (c < ret)
     788:	c6 01       	movw	r24, r12
     78a:	b5 01       	movw	r22, r10
     78c:	97 01       	movw	r18, r14
     78e:	ad 01       	movw	r20, r26
     790:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     794:	88 23       	and	r24, r24
     796:	1c f4       	brge	.+6      	; 0x79e <get_position+0x38a>
     798:	86 01       	movw	r16, r12
     79a:	75 01       	movw	r14, r10
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <get_position+0x392>
     79e:	c7 01       	movw	r24, r14
     7a0:	d8 01       	movw	r26, r16
     7a2:	7c 01       	movw	r14, r24
     7a4:	8d 01       	movw	r16, r26
		double di2 = d(xi2, yi2, xiavg, yiavg);
		double di3 = d(xi3, yi3, xiavg, yiavg);
		
		double diord[] = {0,0,0};
		double mini = min3(di1, di2, di3);
		diord[0] = di1/mini;
     7a6:	ca 57       	subi	r28, 0x7A	; 122
     7a8:	df 4f       	sbci	r29, 0xFF	; 255
     7aa:	68 81       	ld	r22, Y
     7ac:	79 81       	ldd	r23, Y+1	; 0x01
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	c6 58       	subi	r28, 0x86	; 134
     7b4:	d0 40       	sbci	r29, 0x00	; 0
     7b6:	a8 01       	movw	r20, r16
     7b8:	97 01       	movw	r18, r14
     7ba:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     7be:	c1 53       	subi	r28, 0x31	; 49
     7c0:	df 4f       	sbci	r29, 0xFF	; 255
     7c2:	68 83       	st	Y, r22
     7c4:	79 83       	std	Y+1, r23	; 0x01
     7c6:	8a 83       	std	Y+2, r24	; 0x02
     7c8:	9b 83       	std	Y+3, r25	; 0x03
     7ca:	cf 5c       	subi	r28, 0xCF	; 207
     7cc:	d0 40       	sbci	r29, 0x00	; 0
		diord[1] = di2/mini;
     7ce:	ce 57       	subi	r28, 0x7E	; 126
     7d0:	df 4f       	sbci	r29, 0xFF	; 255
     7d2:	68 81       	ld	r22, Y
     7d4:	79 81       	ldd	r23, Y+1	; 0x01
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	c2 58       	subi	r28, 0x82	; 130
     7dc:	d0 40       	sbci	r29, 0x00	; 0
     7de:	a8 01       	movw	r20, r16
     7e0:	97 01       	movw	r18, r14
     7e2:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     7e6:	c5 53       	subi	r28, 0x35	; 53
     7e8:	df 4f       	sbci	r29, 0xFF	; 255
     7ea:	68 83       	st	Y, r22
     7ec:	79 83       	std	Y+1, r23	; 0x01
     7ee:	8a 83       	std	Y+2, r24	; 0x02
     7f0:	9b 83       	std	Y+3, r25	; 0x03
     7f2:	cb 5c       	subi	r28, 0xCB	; 203
     7f4:	d0 40       	sbci	r29, 0x00	; 0
		diord[2] = di3/mini;
     7f6:	c6 01       	movw	r24, r12
     7f8:	b5 01       	movw	r22, r10
     7fa:	a8 01       	movw	r20, r16
     7fc:	97 01       	movw	r18, r14
     7fe:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     802:	c9 53       	subi	r28, 0x39	; 57
     804:	df 4f       	sbci	r29, 0xFF	; 255
     806:	68 83       	st	Y, r22
     808:	79 83       	std	Y+1, r23	; 0x01
     80a:	8a 83       	std	Y+2, r24	; 0x02
     80c:	9b 83       	std	Y+3, r25	; 0x03
     80e:	c7 5c       	subi	r28, 0xC7	; 199
     810:	d0 40       	sbci	r29, 0x00	; 0
				
		double xes[] = {x1, x2, x3, x4};
     812:	de 01       	movw	r26, r28
     814:	19 96       	adiw	r26, 0x09	; 9
     816:	e0 e1       	ldi	r30, 0x10	; 16
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	81 50       	subi	r24, 0x01	; 1
     822:	e1 f7       	brne	.-8      	; 0x81c <get_position+0x408>
		double yes[] = {y1, y2, y3, y4};
     824:	de 01       	movw	r26, r28
     826:	59 96       	adiw	r26, 0x19	; 25
     828:	e0 e0       	ldi	r30, 0x00	; 0
     82a:	f1 e0       	ldi	r31, 0x01	; 1
     82c:	80 e1       	ldi	r24, 0x10	; 16
     82e:	01 90       	ld	r0, Z+
     830:	0d 92       	st	X+, r0
     832:	81 50       	subi	r24, 0x01	; 1
     834:	e1 f7       	brne	.-8      	; 0x82e <get_position+0x41a>
     836:	9e 01       	movw	r18, r28
     838:	27 5d       	subi	r18, 0xD7	; 215
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	3c af       	std	Y+60, r19	; 0x3c
     83e:	2b af       	std	Y+59, r18	; 0x3b
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	c5 56       	subi	r28, 0x65	; 101
     84a:	df 4f       	sbci	r29, 0xFF	; 255
     84c:	88 83       	st	Y, r24
     84e:	99 83       	std	Y+1, r25	; 0x01
     850:	aa 83       	std	Y+2, r26	; 0x02
     852:	bb 83       	std	Y+3, r27	; 0x03
     854:	cb 59       	subi	r28, 0x9B	; 155
     856:	d0 40       	sbci	r29, 0x00	; 0
     858:	c9 56       	subi	r28, 0x69	; 105
     85a:	df 4f       	sbci	r29, 0xFF	; 255
     85c:	88 83       	st	Y, r24
     85e:	99 83       	std	Y+1, r25	; 0x01
     860:	aa 83       	std	Y+2, r26	; 0x02
     862:	bb 83       	std	Y+3, r27	; 0x03
     864:	c7 59       	subi	r28, 0x97	; 151
     866:	d0 40       	sbci	r29, 0x00	; 0
     868:	cd 56       	subi	r28, 0x6D	; 109
     86a:	df 4f       	sbci	r29, 0xFF	; 255
     86c:	88 83       	st	Y, r24
     86e:	99 83       	std	Y+1, r25	; 0x01
     870:	aa 83       	std	Y+2, r26	; 0x02
     872:	bb 83       	std	Y+3, r27	; 0x03
     874:	c3 59       	subi	r28, 0x93	; 147
     876:	d0 40       	sbci	r29, 0x00	; 0
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	ce 56       	subi	r28, 0x6E	; 110
     87c:	df 4f       	sbci	r29, 0xFF	; 255
     87e:	98 83       	st	Y, r25
     880:	c2 59       	subi	r28, 0x92	; 146
     882:	d0 40       	sbci	r29, 0x00	; 0
     884:	c5 51       	subi	r28, 0x15	; 21
     886:	df 4f       	sbci	r29, 0xFF	; 255
     888:	18 82       	st	Y, r1
     88a:	cb 5e       	subi	r28, 0xEB	; 235
     88c:	d0 40       	sbci	r29, 0x00	; 0
     88e:	c4 51       	subi	r28, 0x14	; 20
     890:	df 4f       	sbci	r29, 0xFF	; 255
     892:	18 82       	st	Y, r1
     894:	cc 5e       	subi	r28, 0xEC	; 236
     896:	d0 40       	sbci	r29, 0x00	; 0
     898:	c3 51       	subi	r28, 0x13	; 19
     89a:	df 4f       	sbci	r29, 0xFF	; 255
     89c:	18 82       	st	Y, r1
     89e:	cd 5e       	subi	r28, 0xED	; 237
     8a0:	d0 40       	sbci	r29, 0x00	; 0
     8a2:	c2 51       	subi	r28, 0x12	; 18
     8a4:	df 4f       	sbci	r29, 0xFF	; 255
     8a6:	18 82       	st	Y, r1
     8a8:	ce 5e       	subi	r28, 0xEE	; 238
     8aa:	d0 40       	sbci	r29, 0x00	; 0
     8ac:	c0 58       	subi	r28, 0x80	; 128
     8ae:	df 4f       	sbci	r29, 0xFF	; 255
     8b0:	19 82       	std	Y+1, r1	; 0x01
     8b2:	18 82       	st	Y, r1
     8b4:	c0 58       	subi	r28, 0x80	; 128
     8b6:	d0 40       	sbci	r29, 0x00	; 0
							double d4 = d(x4, y4, xavg, yavg);

							double dord[] = {d1, d2, d3, d4};
							dord[l] = dord[i];
							double mind = min4(d1, d2, d3, d4);
							for(int ii = 0; ii < 4; ii++)
     8b8:	de 01       	movw	r26, r28
     8ba:	d9 96       	adiw	r26, 0x39	; 57
     8bc:	c1 51       	subi	r28, 0x11	; 17
     8be:	df 4f       	sbci	r29, 0xFF	; 255
     8c0:	b9 83       	std	Y+1, r27	; 0x01
     8c2:	a8 83       	st	Y, r26
     8c4:	cf 5e       	subi	r28, 0xEF	; 239
     8c6:	d0 40       	sbci	r29, 0x00	; 0
     8c8:	fe c4       	rjmp	.+2556   	; 0x12c6 <__stack+0x7c7>
		double yes[] = {y1, y2, y3, y4};
		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
     8ca:	c2 58       	subi	r28, 0x82	; 130
     8cc:	df 4f       	sbci	r29, 0xFF	; 255
     8ce:	e8 81       	ld	r30, Y
     8d0:	f9 81       	ldd	r31, Y+1	; 0x01
     8d2:	ce 57       	subi	r28, 0x7E	; 126
     8d4:	d0 40       	sbci	r29, 0x00	; 0
     8d6:	c0 58       	subi	r28, 0x80	; 128
     8d8:	df 4f       	sbci	r29, 0xFF	; 255
     8da:	28 81       	ld	r18, Y
     8dc:	39 81       	ldd	r19, Y+1	; 0x01
     8de:	c0 58       	subi	r28, 0x80	; 128
     8e0:	d0 40       	sbci	r29, 0x00	; 0
     8e2:	e2 17       	cp	r30, r18
     8e4:	f3 07       	cpc	r31, r19
     8e6:	09 f4       	brne	.+2      	; 0x8ea <get_position+0x4d6>
     8e8:	be c4       	rjmp	.+2428   	; 0x1266 <__stack+0x767>
     8ea:	8d ad       	ldd	r24, Y+61	; 0x3d
     8ec:	9e ad       	ldd	r25, Y+62	; 0x3e
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	a9 e2       	ldi	r26, 0x29	; 41
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	ac 0f       	add	r26, r28
     8fc:	bd 1f       	adc	r27, r29
     8fe:	a8 0f       	add	r26, r24
     900:	b9 1f       	adc	r27, r25
     902:	60 96       	adiw	r28, 0x10	; 16
     904:	bf af       	std	Y+63, r27	; 0x3f
     906:	ae af       	std	Y+62, r26	; 0x3e
     908:	60 97       	sbiw	r28, 0x10	; 16
     90a:	ed ad       	ldd	r30, Y+61	; 0x3d
     90c:	fe ad       	ldd	r31, Y+62	; 0x3e
     90e:	2e 96       	adiw	r28, 0x0e	; 14
     910:	ff af       	std	Y+63, r31	; 0x3f
     912:	ee af       	std	Y+62, r30	; 0x3e
     914:	2e 97       	sbiw	r28, 0x0e	; 14
     916:	9e 01       	movw	r18, r28
     918:	27 5d       	subi	r18, 0xD7	; 215
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	2c 96       	adiw	r28, 0x0c	; 12
     91e:	3f af       	std	Y+63, r19	; 0x3f
     920:	2e af       	std	Y+62, r18	; 0x3e
     922:	2c 97       	sbiw	r28, 0x0c	; 12
     924:	ee 96       	adiw	r28, 0x3e	; 62
     926:	1f ae       	std	Y+63, r1	; 0x3f
     928:	1e ae       	std	Y+62, r1	; 0x3e
     92a:	ee 97       	sbiw	r28, 0x3e	; 62
							if(first || err < min_err)
							{
								min_err = err;
								first = false;
								order[0] = i + 1;
								order[1] = j + 1;
     92c:	c2 58       	subi	r28, 0x82	; 130
     92e:	df 4f       	sbci	r29, 0xFF	; 255
     930:	88 81       	ld	r24, Y
     932:	99 81       	ldd	r25, Y+1	; 0x01
     934:	ce 57       	subi	r28, 0x7E	; 126
     936:	d0 40       	sbci	r29, 0x00	; 0
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	c1 52       	subi	r28, 0x21	; 33
     93c:	df 4f       	sbci	r29, 0xFF	; 255
     93e:	99 83       	std	Y+1, r25	; 0x01
     940:	88 83       	st	Y, r24
     942:	cf 5d       	subi	r28, 0xDF	; 223
     944:	d0 40       	sbci	r29, 0x00	; 0
			{
				if(j!= i)
				{
					for(int k = 0; k < 4; k++)
					{
						if(k!= i && k!= j)
     946:	ee 96       	adiw	r28, 0x3e	; 62
     948:	ae ad       	ldd	r26, Y+62	; 0x3e
     94a:	bf ad       	ldd	r27, Y+63	; 0x3f
     94c:	ee 97       	sbiw	r28, 0x3e	; 62
     94e:	c0 58       	subi	r28, 0x80	; 128
     950:	df 4f       	sbci	r29, 0xFF	; 255
     952:	e8 81       	ld	r30, Y
     954:	f9 81       	ldd	r31, Y+1	; 0x01
     956:	c0 58       	subi	r28, 0x80	; 128
     958:	d0 40       	sbci	r29, 0x00	; 0
     95a:	ae 17       	cp	r26, r30
     95c:	bf 07       	cpc	r27, r31
     95e:	09 f4       	brne	.+2      	; 0x962 <get_position+0x54e>
     960:	5a c4       	rjmp	.+2228   	; 0x1216 <__stack+0x717>
     962:	c2 58       	subi	r28, 0x82	; 130
     964:	df 4f       	sbci	r29, 0xFF	; 255
     966:	28 81       	ld	r18, Y
     968:	39 81       	ldd	r19, Y+1	; 0x01
     96a:	ce 57       	subi	r28, 0x7E	; 126
     96c:	d0 40       	sbci	r29, 0x00	; 0
     96e:	a2 17       	cp	r26, r18
     970:	b3 07       	cpc	r27, r19
     972:	09 f4       	brne	.+2      	; 0x976 <get_position+0x562>
     974:	50 c4       	rjmp	.+2208   	; 0x1216 <__stack+0x717>
     976:	0f 2e       	mov	r0, r31
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	ef 2e       	mov	r14, r31
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ff 2e       	mov	r15, r31
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	0f 2f       	mov	r16, r31
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	1f 2f       	mov	r17, r31
     988:	f0 2d       	mov	r31, r0
     98a:	57 01       	movw	r10, r14
     98c:	68 01       	movw	r12, r16
     98e:	66 24       	eor	r6, r6
     990:	77 24       	eor	r7, r7
     992:	88 24       	eor	r8, r8
     994:	99 24       	eor	r9, r9
							double ya[] = {0,0,0,0};
							double xavg = 0;
							double yavg = 0;
							for(int ii = 0; ii < 4; ii++)
							{
								if(ii != l)
     996:	2e 96       	adiw	r28, 0x0e	; 14
     998:	8e ad       	ldd	r24, Y+62	; 0x3e
     99a:	9f ad       	ldd	r25, Y+63	; 0x3f
     99c:	2e 97       	sbiw	r28, 0x0e	; 14
     99e:	68 16       	cp	r6, r24
     9a0:	79 06       	cpc	r7, r25
     9a2:	01 f1       	breq	.+64     	; 0x9e4 <get_position+0x5d0>
								{
									xa[ii] = xes[ii];
									xavg += xes[ii];
     9a4:	e9 e0       	ldi	r30, 0x09	; 9
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	ec 0f       	add	r30, r28
     9aa:	fd 1f       	adc	r31, r29
     9ac:	e8 0d       	add	r30, r8
     9ae:	f9 1d       	adc	r31, r9
     9b0:	c8 01       	movw	r24, r16
     9b2:	b7 01       	movw	r22, r14
     9b4:	20 81       	ld	r18, Z
     9b6:	31 81       	ldd	r19, Z+1	; 0x01
     9b8:	42 81       	ldd	r20, Z+2	; 0x02
     9ba:	53 81       	ldd	r21, Z+3	; 0x03
     9bc:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     9c0:	7b 01       	movw	r14, r22
     9c2:	8c 01       	movw	r16, r24
									ya[ii] = yes[ii];
									yavg += yes[ii];
     9c4:	e9 e1       	ldi	r30, 0x19	; 25
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	ec 0f       	add	r30, r28
     9ca:	fd 1f       	adc	r31, r29
     9cc:	e8 0d       	add	r30, r8
     9ce:	f9 1d       	adc	r31, r9
     9d0:	c6 01       	movw	r24, r12
     9d2:	b5 01       	movw	r22, r10
     9d4:	20 81       	ld	r18, Z
     9d6:	31 81       	ldd	r19, Z+1	; 0x01
     9d8:	42 81       	ldd	r20, Z+2	; 0x02
     9da:	53 81       	ldd	r21, Z+3	; 0x03
     9dc:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     9e0:	5b 01       	movw	r10, r22
     9e2:	6c 01       	movw	r12, r24
							int l = 10  - (i + j + k);
							double xa[] = {0,0,0,0};
							double ya[] = {0,0,0,0};
							double xavg = 0;
							double yavg = 0;
							for(int ii = 0; ii < 4; ii++)
     9e4:	08 94       	sec
     9e6:	61 1c       	adc	r6, r1
     9e8:	71 1c       	adc	r7, r1
     9ea:	a4 e0       	ldi	r26, 0x04	; 4
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	8a 0e       	add	r8, r26
     9f0:	9b 1e       	adc	r9, r27
     9f2:	b4 e0       	ldi	r27, 0x04	; 4
     9f4:	6b 16       	cp	r6, r27
     9f6:	71 04       	cpc	r7, r1
     9f8:	71 f6       	brne	.-100    	; 0x996 <get_position+0x582>
									xavg += xes[ii];
									ya[ii] = yes[ii];
									yavg += yes[ii];
								}
							}
							xavg /= 3;
     9fa:	c8 01       	movw	r24, r16
     9fc:	b7 01       	movw	r22, r14
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e4       	ldi	r20, 0x40	; 64
     a04:	50 e4       	ldi	r21, 0x40	; 64
     a06:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     a0a:	27 96       	adiw	r28, 0x07	; 7
     a0c:	6c af       	std	Y+60, r22	; 0x3c
     a0e:	7d af       	std	Y+61, r23	; 0x3d
     a10:	8e af       	std	Y+62, r24	; 0x3e
     a12:	9f af       	std	Y+63, r25	; 0x3f
     a14:	27 97       	sbiw	r28, 0x07	; 7
							yavg /= 3;	
     a16:	c6 01       	movw	r24, r12
     a18:	b5 01       	movw	r22, r10
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e4       	ldi	r20, 0x40	; 64
     a20:	50 e4       	ldi	r21, 0x40	; 64
     a22:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     a26:	1b 01       	movw	r2, r22
     a28:	2c 01       	movw	r4, r24
							
							double d1 = d(x1, y1, xavg, yavg);						
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	27 96       	adiw	r28, 0x07	; 7
     a34:	2c ad       	ldd	r18, Y+60	; 0x3c
     a36:	3d ad       	ldd	r19, Y+61	; 0x3d
     a38:	4e ad       	ldd	r20, Y+62	; 0x3e
     a3a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a3c:	27 97       	sbiw	r28, 0x07	; 7
     a3e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     a42:	cd 53       	subi	r28, 0x3D	; 61
     a44:	df 4f       	sbci	r29, 0xFF	; 255
     a46:	68 83       	st	Y, r22
     a48:	79 83       	std	Y+1, r23	; 0x01
     a4a:	8a 83       	std	Y+2, r24	; 0x02
     a4c:	9b 83       	std	Y+3, r25	; 0x03
     a4e:	c3 5c       	subi	r28, 0xC3	; 195
     a50:	d0 40       	sbci	r29, 0x00	; 0
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     a5a:	5b 01       	movw	r10, r22
     a5c:	6c 01       	movw	r12, r24
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 e6       	ldi	r24, 0x68	; 104
     a64:	91 e4       	ldi	r25, 0x41	; 65
     a66:	a2 01       	movw	r20, r4
     a68:	91 01       	movw	r18, r2
     a6a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     a6e:	c1 54       	subi	r28, 0x41	; 65
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	68 83       	st	Y, r22
     a74:	79 83       	std	Y+1, r23	; 0x01
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	9b 83       	std	Y+3, r25	; 0x03
     a7a:	cf 5b       	subi	r28, 0xBF	; 191
     a7c:	d0 40       	sbci	r29, 0x00	; 0
     a7e:	9b 01       	movw	r18, r22
     a80:	ac 01       	movw	r20, r24
     a82:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	c6 01       	movw	r24, r12
     a8c:	b5 01       	movw	r22, r10
     a8e:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     a92:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     a96:	ec 96       	adiw	r28, 0x3c	; 60
     a98:	6c af       	std	Y+60, r22	; 0x3c
     a9a:	7d af       	std	Y+61, r23	; 0x3d
     a9c:	8e af       	std	Y+62, r24	; 0x3e
     a9e:	9f af       	std	Y+63, r25	; 0x3f
     aa0:	ec 97       	sbiw	r28, 0x3c	; 60
							double d2 = d(x2, y2, xavg, yavg);
     aa2:	6c e0       	ldi	r22, 0x0C	; 12
     aa4:	72 e0       	ldi	r23, 0x02	; 2
     aa6:	89 e2       	ldi	r24, 0x29	; 41
     aa8:	91 ec       	ldi	r25, 0xC1	; 193
     aaa:	27 96       	adiw	r28, 0x07	; 7
     aac:	2c ad       	ldd	r18, Y+60	; 0x3c
     aae:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab0:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab2:	5f ad       	ldd	r21, Y+63	; 0x3f
     ab4:	27 97       	sbiw	r28, 0x07	; 7
     ab6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     aba:	c5 54       	subi	r28, 0x45	; 69
     abc:	df 4f       	sbci	r29, 0xFF	; 255
     abe:	68 83       	st	Y, r22
     ac0:	79 83       	std	Y+1, r23	; 0x01
     ac2:	8a 83       	std	Y+2, r24	; 0x02
     ac4:	9b 83       	std	Y+3, r25	; 0x03
     ac6:	cb 5b       	subi	r28, 0xBB	; 187
     ac8:	d0 40       	sbci	r29, 0x00	; 0
     aca:	69 e7       	ldi	r22, 0x79	; 121
     acc:	79 ee       	ldi	r23, 0xE9	; 233
     ace:	8e e1       	ldi	r24, 0x1E	; 30
     ad0:	90 e4       	ldi	r25, 0x40	; 64
     ad2:	a2 01       	movw	r20, r4
     ad4:	91 01       	movw	r18, r2
     ad6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     ada:	c9 54       	subi	r28, 0x49	; 73
     adc:	df 4f       	sbci	r29, 0xFF	; 255
     ade:	68 83       	st	Y, r22
     ae0:	79 83       	std	Y+1, r23	; 0x01
     ae2:	8a 83       	std	Y+2, r24	; 0x02
     ae4:	9b 83       	std	Y+3, r25	; 0x03
     ae6:	c7 5b       	subi	r28, 0xB7	; 183
     ae8:	d0 40       	sbci	r29, 0x00	; 0
     aea:	c5 54       	subi	r28, 0x45	; 69
     aec:	df 4f       	sbci	r29, 0xFF	; 255
     aee:	68 81       	ld	r22, Y
     af0:	79 81       	ldd	r23, Y+1	; 0x01
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	9b 81       	ldd	r25, Y+3	; 0x03
     af6:	cb 5b       	subi	r28, 0xBB	; 187
     af8:	d0 40       	sbci	r29, 0x00	; 0
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     b02:	7b 01       	movw	r14, r22
     b04:	8c 01       	movw	r16, r24
     b06:	c9 54       	subi	r28, 0x49	; 73
     b08:	df 4f       	sbci	r29, 0xFF	; 255
     b0a:	68 81       	ld	r22, Y
     b0c:	79 81       	ldd	r23, Y+1	; 0x01
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	9b 81       	ldd	r25, Y+3	; 0x03
     b12:	c7 5b       	subi	r28, 0xB7	; 183
     b14:	d0 40       	sbci	r29, 0x00	; 0
     b16:	9b 01       	movw	r18, r22
     b18:	ac 01       	movw	r20, r24
     b1a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	c8 01       	movw	r24, r16
     b24:	b7 01       	movw	r22, r14
     b26:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     b2a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     b2e:	e8 96       	adiw	r28, 0x38	; 56
     b30:	6c af       	std	Y+60, r22	; 0x3c
     b32:	7d af       	std	Y+61, r23	; 0x3d
     b34:	8e af       	std	Y+62, r24	; 0x3e
     b36:	9f af       	std	Y+63, r25	; 0x3f
     b38:	e8 97       	sbiw	r28, 0x38	; 56
							double d3 = d(x3, y3, xavg, yavg);
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	88 e6       	ldi	r24, 0x68	; 104
     b40:	91 ec       	ldi	r25, 0xC1	; 193
     b42:	a2 01       	movw	r20, r4
     b44:	91 01       	movw	r18, r2
     b46:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     b52:	9b 01       	movw	r18, r22
     b54:	ac 01       	movw	r20, r24
     b56:	c6 01       	movw	r24, r12
     b58:	b5 01       	movw	r22, r10
     b5a:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     b5e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     b62:	c9 51       	subi	r28, 0x19	; 25
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	68 83       	st	Y, r22
     b68:	c7 5e       	subi	r28, 0xE7	; 231
     b6a:	d0 40       	sbci	r29, 0x00	; 0
     b6c:	c8 51       	subi	r28, 0x18	; 24
     b6e:	df 4f       	sbci	r29, 0xFF	; 255
     b70:	78 83       	st	Y, r23
     b72:	c8 5e       	subi	r28, 0xE8	; 232
     b74:	d0 40       	sbci	r29, 0x00	; 0
     b76:	c7 51       	subi	r28, 0x17	; 23
     b78:	df 4f       	sbci	r29, 0xFF	; 255
     b7a:	88 83       	st	Y, r24
     b7c:	c9 5e       	subi	r28, 0xE9	; 233
     b7e:	d0 40       	sbci	r29, 0x00	; 0
     b80:	c6 51       	subi	r28, 0x16	; 22
     b82:	df 4f       	sbci	r29, 0xFF	; 255
     b84:	98 83       	st	Y, r25
     b86:	ca 5e       	subi	r28, 0xEA	; 234
     b88:	d0 40       	sbci	r29, 0x00	; 0
							double d4 = d(x4, y4, xavg, yavg);
     b8a:	61 ee       	ldi	r22, 0xE1	; 225
     b8c:	7a e7       	ldi	r23, 0x7A	; 122
     b8e:	8a e3       	ldi	r24, 0x3A	; 58
     b90:	91 e4       	ldi	r25, 0x41	; 65
     b92:	27 96       	adiw	r28, 0x07	; 7
     b94:	2c ad       	ldd	r18, Y+60	; 0x3c
     b96:	3d ad       	ldd	r19, Y+61	; 0x3d
     b98:	4e ad       	ldd	r20, Y+62	; 0x3e
     b9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     b9c:	27 97       	sbiw	r28, 0x07	; 7
     b9e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     ba2:	7b 01       	movw	r14, r22
     ba4:	8c 01       	movw	r16, r24
     ba6:	63 e2       	ldi	r22, 0x23	; 35
     ba8:	7b ed       	ldi	r23, 0xDB	; 219
     baa:	8b e0       	ldi	r24, 0x0B	; 11
     bac:	91 e4       	ldi	r25, 0x41	; 65
     bae:	a2 01       	movw	r20, r4
     bb0:	91 01       	movw	r18, r2
     bb2:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     bb6:	5b 01       	movw	r10, r22
     bb8:	6c 01       	movw	r12, r24
     bba:	c8 01       	movw	r24, r16
     bbc:	b7 01       	movw	r22, r14
     bbe:	a8 01       	movw	r20, r16
     bc0:	97 01       	movw	r18, r14
     bc2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     bc6:	7b 01       	movw	r14, r22
     bc8:	8c 01       	movw	r16, r24
     bca:	c6 01       	movw	r24, r12
     bcc:	b5 01       	movw	r22, r10
     bce:	a6 01       	movw	r20, r12
     bd0:	95 01       	movw	r18, r10
     bd2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	c8 01       	movw	r24, r16
     bdc:	b7 01       	movw	r22, r14
     bde:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     be2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     be6:	d6 2e       	mov	r13, r22
     be8:	c7 2e       	mov	r12, r23
     bea:	78 2e       	mov	r7, r24
     bec:	69 2e       	mov	r6, r25

							double dord[] = {d1, d2, d3, d4};
     bee:	ec 96       	adiw	r28, 0x3c	; 60
     bf0:	8c ad       	ldd	r24, Y+60	; 0x3c
     bf2:	9d ad       	ldd	r25, Y+61	; 0x3d
     bf4:	ae ad       	ldd	r26, Y+62	; 0x3e
     bf6:	bf ad       	ldd	r27, Y+63	; 0x3f
     bf8:	ec 97       	sbiw	r28, 0x3c	; 60
     bfa:	89 a7       	std	Y+41, r24	; 0x29
     bfc:	9a a7       	std	Y+42, r25	; 0x2a
     bfe:	ab a7       	std	Y+43, r26	; 0x2b
     c00:	bc a7       	std	Y+44, r27	; 0x2c
     c02:	e8 96       	adiw	r28, 0x38	; 56
     c04:	8c ad       	ldd	r24, Y+60	; 0x3c
     c06:	9d ad       	ldd	r25, Y+61	; 0x3d
     c08:	ae ad       	ldd	r26, Y+62	; 0x3e
     c0a:	bf ad       	ldd	r27, Y+63	; 0x3f
     c0c:	e8 97       	sbiw	r28, 0x38	; 56
     c0e:	8d a7       	std	Y+45, r24	; 0x2d
     c10:	9e a7       	std	Y+46, r25	; 0x2e
     c12:	af a7       	std	Y+47, r26	; 0x2f
     c14:	b8 ab       	std	Y+48, r27	; 0x30
     c16:	c9 51       	subi	r28, 0x19	; 25
     c18:	df 4f       	sbci	r29, 0xFF	; 255
     c1a:	88 81       	ld	r24, Y
     c1c:	c7 5e       	subi	r28, 0xE7	; 231
     c1e:	d0 40       	sbci	r29, 0x00	; 0
     c20:	c8 51       	subi	r28, 0x18	; 24
     c22:	df 4f       	sbci	r29, 0xFF	; 255
     c24:	98 81       	ld	r25, Y
     c26:	c8 5e       	subi	r28, 0xE8	; 232
     c28:	d0 40       	sbci	r29, 0x00	; 0
     c2a:	c7 51       	subi	r28, 0x17	; 23
     c2c:	df 4f       	sbci	r29, 0xFF	; 255
     c2e:	a8 81       	ld	r26, Y
     c30:	c9 5e       	subi	r28, 0xE9	; 233
     c32:	d0 40       	sbci	r29, 0x00	; 0
     c34:	c6 51       	subi	r28, 0x16	; 22
     c36:	df 4f       	sbci	r29, 0xFF	; 255
     c38:	b8 81       	ld	r27, Y
     c3a:	ca 5e       	subi	r28, 0xEA	; 234
     c3c:	d0 40       	sbci	r29, 0x00	; 0
     c3e:	89 ab       	std	Y+49, r24	; 0x31
     c40:	9a ab       	std	Y+50, r25	; 0x32
     c42:	ab ab       	std	Y+51, r26	; 0x33
     c44:	bc ab       	std	Y+52, r27	; 0x34
     c46:	8d 2d       	mov	r24, r13
     c48:	9c 2d       	mov	r25, r12
     c4a:	a7 2d       	mov	r26, r7
     c4c:	b6 2d       	mov	r27, r6
     c4e:	8d ab       	std	Y+53, r24	; 0x35
     c50:	9e ab       	std	Y+54, r25	; 0x36
     c52:	af ab       	std	Y+55, r26	; 0x37
     c54:	b8 af       	std	Y+56, r27	; 0x38
							dord[l] = dord[i];
     c56:	ab ad       	ldd	r26, Y+59	; 0x3b
     c58:	bc ad       	ldd	r27, Y+60	; 0x3c
     c5a:	8d 90       	ld	r8, X+
     c5c:	9d 90       	ld	r9, X+
     c5e:	ad 90       	ld	r10, X+
     c60:	bc 90       	ld	r11, X
}

double min4(double a, double b, double c, double d)
{
	double ret = a;
	if(b < ret)
     c62:	e8 96       	adiw	r28, 0x38	; 56
     c64:	6c ad       	ldd	r22, Y+60	; 0x3c
     c66:	7d ad       	ldd	r23, Y+61	; 0x3d
     c68:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c6c:	e8 97       	sbiw	r28, 0x38	; 56
     c6e:	ec 96       	adiw	r28, 0x3c	; 60
     c70:	2c ad       	ldd	r18, Y+60	; 0x3c
     c72:	3d ad       	ldd	r19, Y+61	; 0x3d
     c74:	4e ad       	ldd	r20, Y+62	; 0x3e
     c76:	5f ad       	ldd	r21, Y+63	; 0x3f
     c78:	ec 97       	sbiw	r28, 0x3c	; 60
     c7a:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     c7e:	88 23       	and	r24, r24
     c80:	3c f4       	brge	.+14     	; 0xc90 <__stack+0x191>
     c82:	e8 96       	adiw	r28, 0x38	; 56
     c84:	8c ad       	ldd	r24, Y+60	; 0x3c
     c86:	9d ad       	ldd	r25, Y+61	; 0x3d
     c88:	ae ad       	ldd	r26, Y+62	; 0x3e
     c8a:	bf ad       	ldd	r27, Y+63	; 0x3f
     c8c:	e8 97       	sbiw	r28, 0x38	; 56
     c8e:	06 c0       	rjmp	.+12     	; 0xc9c <__stack+0x19d>
     c90:	ec 96       	adiw	r28, 0x3c	; 60
     c92:	8c ad       	ldd	r24, Y+60	; 0x3c
     c94:	9d ad       	ldd	r25, Y+61	; 0x3d
     c96:	ae ad       	ldd	r26, Y+62	; 0x3e
     c98:	bf ad       	ldd	r27, Y+63	; 0x3f
     c9a:	ec 97       	sbiw	r28, 0x3c	; 60
     c9c:	7c 01       	movw	r14, r24
     c9e:	8d 01       	movw	r16, r26
		ret = b;
	if(c < ret)
     ca0:	c9 51       	subi	r28, 0x19	; 25
     ca2:	df 4f       	sbci	r29, 0xFF	; 255
     ca4:	68 81       	ld	r22, Y
     ca6:	c7 5e       	subi	r28, 0xE7	; 231
     ca8:	d0 40       	sbci	r29, 0x00	; 0
     caa:	c8 51       	subi	r28, 0x18	; 24
     cac:	df 4f       	sbci	r29, 0xFF	; 255
     cae:	78 81       	ld	r23, Y
     cb0:	c8 5e       	subi	r28, 0xE8	; 232
     cb2:	d0 40       	sbci	r29, 0x00	; 0
     cb4:	c7 51       	subi	r28, 0x17	; 23
     cb6:	df 4f       	sbci	r29, 0xFF	; 255
     cb8:	88 81       	ld	r24, Y
     cba:	c9 5e       	subi	r28, 0xE9	; 233
     cbc:	d0 40       	sbci	r29, 0x00	; 0
     cbe:	c6 51       	subi	r28, 0x16	; 22
     cc0:	df 4f       	sbci	r29, 0xFF	; 255
     cc2:	98 81       	ld	r25, Y
     cc4:	ca 5e       	subi	r28, 0xEA	; 234
     cc6:	d0 40       	sbci	r29, 0x00	; 0
     cc8:	97 01       	movw	r18, r14
     cca:	ad 01       	movw	r20, r26
     ccc:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	a4 f4       	brge	.+40     	; 0xcfc <__stack+0x1fd>
     cd4:	c9 51       	subi	r28, 0x19	; 25
     cd6:	df 4f       	sbci	r29, 0xFF	; 255
     cd8:	e8 80       	ld	r14, Y
     cda:	c7 5e       	subi	r28, 0xE7	; 231
     cdc:	d0 40       	sbci	r29, 0x00	; 0
     cde:	c8 51       	subi	r28, 0x18	; 24
     ce0:	df 4f       	sbci	r29, 0xFF	; 255
     ce2:	f8 80       	ld	r15, Y
     ce4:	c8 5e       	subi	r28, 0xE8	; 232
     ce6:	d0 40       	sbci	r29, 0x00	; 0
     ce8:	c7 51       	subi	r28, 0x17	; 23
     cea:	df 4f       	sbci	r29, 0xFF	; 255
     cec:	08 81       	ld	r16, Y
     cee:	c9 5e       	subi	r28, 0xE9	; 233
     cf0:	d0 40       	sbci	r29, 0x00	; 0
     cf2:	c6 51       	subi	r28, 0x16	; 22
     cf4:	df 4f       	sbci	r29, 0xFF	; 255
     cf6:	18 81       	ld	r17, Y
     cf8:	ca 5e       	subi	r28, 0xEA	; 234
     cfa:	d0 40       	sbci	r29, 0x00	; 0
		ret = c;
	if(d < ret)
     cfc:	6d 2d       	mov	r22, r13
     cfe:	7c 2d       	mov	r23, r12
     d00:	87 2d       	mov	r24, r7
     d02:	96 2d       	mov	r25, r6
     d04:	97 01       	movw	r18, r14
     d06:	a8 01       	movw	r20, r16
     d08:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     d0c:	88 23       	and	r24, r24
     d0e:	2c f4       	brge	.+10     	; 0xd1a <__stack+0x21b>
     d10:	8d 2d       	mov	r24, r13
     d12:	9c 2d       	mov	r25, r12
     d14:	a7 2d       	mov	r26, r7
     d16:	b6 2d       	mov	r27, r6
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <__stack+0x21f>
     d1a:	c7 01       	movw	r24, r14
     d1c:	d8 01       	movw	r26, r16
     d1e:	6c 01       	movw	r12, r24
     d20:	7d 01       	movw	r14, r26
							double d2 = d(x2, y2, xavg, yavg);
							double d3 = d(x3, y3, xavg, yavg);
							double d4 = d(x4, y4, xavg, yavg);

							double dord[] = {d1, d2, d3, d4};
							dord[l] = dord[i];
     d22:	60 96       	adiw	r28, 0x10	; 16
     d24:	ee ad       	ldd	r30, Y+62	; 0x3e
     d26:	ff ad       	ldd	r31, Y+63	; 0x3f
     d28:	60 97       	sbiw	r28, 0x10	; 16
     d2a:	80 82       	st	Z, r8
     d2c:	91 82       	std	Z+1, r9	; 0x01
     d2e:	a2 82       	std	Z+2, r10	; 0x02
     d30:	b3 82       	std	Z+3, r11	; 0x03
     d32:	8e 01       	movw	r16, r28
     d34:	07 5d       	subi	r16, 0xD7	; 215
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
							double mind = min4(d1, d2, d3, d4);
							for(int ii = 0; ii < 4; ii++)
								dord[ii] /= mind;
     d38:	d8 01       	movw	r26, r16
     d3a:	6d 91       	ld	r22, X+
     d3c:	7d 91       	ld	r23, X+
     d3e:	8d 91       	ld	r24, X+
     d40:	9c 91       	ld	r25, X
     d42:	a7 01       	movw	r20, r14
     d44:	96 01       	movw	r18, r12
     d46:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
     d4a:	f8 01       	movw	r30, r16
     d4c:	61 93       	st	Z+, r22
     d4e:	71 93       	st	Z+, r23
     d50:	81 93       	st	Z+, r24
     d52:	91 93       	st	Z+, r25
     d54:	8f 01       	movw	r16, r30
							double d4 = d(x4, y4, xavg, yavg);

							double dord[] = {d1, d2, d3, d4};
							dord[l] = dord[i];
							double mind = min4(d1, d2, d3, d4);
							for(int ii = 0; ii < 4; ii++)
     d56:	c1 51       	subi	r28, 0x11	; 17
     d58:	df 4f       	sbci	r29, 0xFF	; 255
     d5a:	28 81       	ld	r18, Y
     d5c:	39 81       	ldd	r19, Y+1	; 0x01
     d5e:	cf 5e       	subi	r28, 0xEF	; 239
     d60:	d0 40       	sbci	r29, 0x00	; 0
     d62:	e2 17       	cp	r30, r18
     d64:	f3 07       	cpc	r31, r19
     d66:	41 f7       	brne	.-48     	; 0xd38 <__stack+0x239>
								dord[ii] /= mind;

							double err = sq(diord[0] - dord[i]) + sq(diord[1] - dord[j]) + sq(diord[2] - dord[k]);
     d68:	c1 53       	subi	r28, 0x31	; 49
     d6a:	df 4f       	sbci	r29, 0xFF	; 255
     d6c:	68 81       	ld	r22, Y
     d6e:	79 81       	ldd	r23, Y+1	; 0x01
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	9b 81       	ldd	r25, Y+3	; 0x03
     d74:	cf 5c       	subi	r28, 0xCF	; 207
     d76:	d0 40       	sbci	r29, 0x00	; 0
     d78:	ab ad       	ldd	r26, Y+59	; 0x3b
     d7a:	bc ad       	ldd	r27, Y+60	; 0x3c
     d7c:	2d 91       	ld	r18, X+
     d7e:	3d 91       	ld	r19, X+
     d80:	4d 91       	ld	r20, X+
     d82:	5c 91       	ld	r21, X
     d84:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     d88:	7b 01       	movw	r14, r22
     d8a:	8c 01       	movw	r16, r24
     d8c:	c5 53       	subi	r28, 0x35	; 53
     d8e:	df 4f       	sbci	r29, 0xFF	; 255
     d90:	68 81       	ld	r22, Y
     d92:	79 81       	ldd	r23, Y+1	; 0x01
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	cb 5c       	subi	r28, 0xCB	; 203
     d9a:	d0 40       	sbci	r29, 0x00	; 0
     d9c:	e9 ad       	ldd	r30, Y+57	; 0x39
     d9e:	fa ad       	ldd	r31, Y+58	; 0x3a
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	42 81       	ldd	r20, Z+2	; 0x02
     da6:	53 81       	ldd	r21, Z+3	; 0x03
     da8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     dac:	5b 01       	movw	r10, r22
     dae:	6c 01       	movw	r12, r24
     db0:	c9 53       	subi	r28, 0x39	; 57
     db2:	df 4f       	sbci	r29, 0xFF	; 255
     db4:	68 81       	ld	r22, Y
     db6:	79 81       	ldd	r23, Y+1	; 0x01
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	c7 5c       	subi	r28, 0xC7	; 199
     dbe:	d0 40       	sbci	r29, 0x00	; 0
     dc0:	2c 96       	adiw	r28, 0x0c	; 12
     dc2:	ae ad       	ldd	r26, Y+62	; 0x3e
     dc4:	bf ad       	ldd	r27, Y+63	; 0x3f
     dc6:	2c 97       	sbiw	r28, 0x0c	; 12
     dc8:	2d 91       	ld	r18, X+
     dca:	3d 91       	ld	r19, X+
     dcc:	4d 91       	ld	r20, X+
     dce:	5c 91       	ld	r21, X
     dd0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     dd4:	3b 01       	movw	r6, r22
     dd6:	4c 01       	movw	r8, r24
     dd8:	c8 01       	movw	r24, r16
     dda:	b7 01       	movw	r22, r14
     ddc:	a8 01       	movw	r20, r16
     dde:	97 01       	movw	r18, r14
     de0:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     de4:	7b 01       	movw	r14, r22
     de6:	8c 01       	movw	r16, r24
     de8:	c6 01       	movw	r24, r12
     dea:	b5 01       	movw	r22, r10
     dec:	a6 01       	movw	r20, r12
     dee:	95 01       	movw	r18, r10
     df0:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
     df8:	c8 01       	movw	r24, r16
     dfa:	b7 01       	movw	r22, r14
     dfc:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     e00:	7b 01       	movw	r14, r22
     e02:	8c 01       	movw	r16, r24
     e04:	c4 01       	movw	r24, r8
     e06:	b3 01       	movw	r22, r6
     e08:	a4 01       	movw	r20, r8
     e0a:	93 01       	movw	r18, r6
     e0c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     e1c:	e4 96       	adiw	r28, 0x34	; 52
     e1e:	6c af       	std	Y+60, r22	; 0x3c
     e20:	7d af       	std	Y+61, r23	; 0x3d
     e22:	8e af       	std	Y+62, r24	; 0x3e
     e24:	9f af       	std	Y+63, r25	; 0x3f
     e26:	e4 97       	sbiw	r28, 0x34	; 52
							if(first || err < min_err)
     e28:	ce 56       	subi	r28, 0x6E	; 110
     e2a:	df 4f       	sbci	r29, 0xFF	; 255
     e2c:	b8 81       	ld	r27, Y
     e2e:	c2 59       	subi	r28, 0x92	; 146
     e30:	d0 40       	sbci	r29, 0x00	; 0
     e32:	bb 23       	and	r27, r27
     e34:	c9 f4       	brne	.+50     	; 0xe68 <__stack+0x369>
     e36:	c5 51       	subi	r28, 0x15	; 21
     e38:	df 4f       	sbci	r29, 0xFF	; 255
     e3a:	28 81       	ld	r18, Y
     e3c:	cb 5e       	subi	r28, 0xEB	; 235
     e3e:	d0 40       	sbci	r29, 0x00	; 0
     e40:	c4 51       	subi	r28, 0x14	; 20
     e42:	df 4f       	sbci	r29, 0xFF	; 255
     e44:	38 81       	ld	r19, Y
     e46:	cc 5e       	subi	r28, 0xEC	; 236
     e48:	d0 40       	sbci	r29, 0x00	; 0
     e4a:	c3 51       	subi	r28, 0x13	; 19
     e4c:	df 4f       	sbci	r29, 0xFF	; 255
     e4e:	48 81       	ld	r20, Y
     e50:	cd 5e       	subi	r28, 0xED	; 237
     e52:	d0 40       	sbci	r29, 0x00	; 0
     e54:	c2 51       	subi	r28, 0x12	; 18
     e56:	df 4f       	sbci	r29, 0xFF	; 255
     e58:	58 81       	ld	r21, Y
     e5a:	ce 5e       	subi	r28, 0xEE	; 238
     e5c:	d0 40       	sbci	r29, 0x00	; 0
     e5e:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
     e62:	88 23       	and	r24, r24
     e64:	0c f0       	brlt	.+2      	; 0xe68 <__stack+0x369>
     e66:	d7 c1       	rjmp	.+942    	; 0x1216 <__stack+0x717>
							{
								min_err = err;
								first = false;
								order[0] = i + 1;
     e68:	cf 51       	subi	r28, 0x1F	; 31
     e6a:	df 4f       	sbci	r29, 0xFF	; 255
     e6c:	e8 81       	ld	r30, Y
     e6e:	f9 81       	ldd	r31, Y+1	; 0x01
     e70:	c1 5e       	subi	r28, 0xE1	; 225
     e72:	d0 40       	sbci	r29, 0x00	; 0
     e74:	fa 83       	std	Y+2, r31	; 0x02
     e76:	e9 83       	std	Y+1, r30	; 0x01
								order[1] = j + 1;
     e78:	c1 52       	subi	r28, 0x21	; 33
     e7a:	df 4f       	sbci	r29, 0xFF	; 255
     e7c:	28 81       	ld	r18, Y
     e7e:	39 81       	ldd	r19, Y+1	; 0x01
     e80:	cf 5d       	subi	r28, 0xDF	; 223
     e82:	d0 40       	sbci	r29, 0x00	; 0
     e84:	3c 83       	std	Y+4, r19	; 0x04
     e86:	2b 83       	std	Y+3, r18	; 0x03
								order[2] = k + 1;
     e88:	ee 96       	adiw	r28, 0x3e	; 62
     e8a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e8c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e8e:	ee 97       	sbiw	r28, 0x3e	; 62
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	ee 96       	adiw	r28, 0x3e	; 62
     e9a:	9f af       	std	Y+63, r25	; 0x3f
     e9c:	8e af       	std	Y+62, r24	; 0x3e
     e9e:	ee 97       	sbiw	r28, 0x3e	; 62
								order[3] = 0;
     ea0:	18 86       	std	Y+8, r1	; 0x08
     ea2:	1f 82       	std	Y+7, r1	; 0x07

								double thetaf = 0;
								double dCenter = 0;

								int pos = 0;
								if(l == 1)
     ea4:	2e 96       	adiw	r28, 0x0e	; 14
     ea6:	ae ad       	ldd	r26, Y+62	; 0x3e
     ea8:	bf ad       	ldd	r27, Y+63	; 0x3f
     eaa:	2e 97       	sbiw	r28, 0x0e	; 14
     eac:	11 97       	sbiw	r26, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <__stack+0x3b3>
     eb0:	66 c0       	rjmp	.+204    	; 0xf7e <__stack+0x47f>
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	11 f4       	brne	.+4      	; 0xec0 <__stack+0x3c1>
     ebc:	01 e0       	ldi	r16, 0x01	; 1
     ebe:	10 e0       	ldi	r17, 0x00	; 0
     ec0:	68 01       	movw	r12, r16
								{
									for(int ii = 0; ii < 3; ii++)
									{
										if(order[ii] == 2)
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	02 97       	sbiw	r24, 0x02	; 2
     ec8:	19 f4       	brne	.+6      	; 0xed0 <__stack+0x3d1>
     eca:	02 e0       	ldi	r16, 0x02	; 2
     ecc:	c0 2e       	mov	r12, r16
     ece:	d1 2c       	mov	r13, r1
											pos = ii;
									}
									thetaf = atan2(-yavg, -xavg) - atan2(y2 - yavg, x2 - xavg);
     ed0:	c2 01       	movw	r24, r4
     ed2:	b1 01       	movw	r22, r2
     ed4:	90 58       	subi	r25, 0x80	; 128
     ed6:	27 96       	adiw	r28, 0x07	; 7
     ed8:	2c ad       	ldd	r18, Y+60	; 0x3c
     eda:	3d ad       	ldd	r19, Y+61	; 0x3d
     edc:	4e ad       	ldd	r20, Y+62	; 0x3e
     ede:	5f ad       	ldd	r21, Y+63	; 0x3f
     ee0:	27 97       	sbiw	r28, 0x07	; 7
     ee2:	50 58       	subi	r21, 0x80	; 128
     ee4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
     ee8:	7b 01       	movw	r14, r22
     eea:	8c 01       	movw	r16, r24
     eec:	c9 54       	subi	r28, 0x49	; 73
     eee:	df 4f       	sbci	r29, 0xFF	; 255
     ef0:	68 81       	ld	r22, Y
     ef2:	79 81       	ldd	r23, Y+1	; 0x01
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	c7 5b       	subi	r28, 0xB7	; 183
     efa:	d0 40       	sbci	r29, 0x00	; 0
     efc:	c5 54       	subi	r28, 0x45	; 69
     efe:	df 4f       	sbci	r29, 0xFF	; 255
     f00:	28 81       	ld	r18, Y
     f02:	39 81       	ldd	r19, Y+1	; 0x01
     f04:	4a 81       	ldd	r20, Y+2	; 0x02
     f06:	5b 81       	ldd	r21, Y+3	; 0x03
     f08:	cb 5b       	subi	r28, 0xBB	; 187
     f0a:	d0 40       	sbci	r29, 0x00	; 0
     f0c:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
     f14:	c8 01       	movw	r24, r16
     f16:	b7 01       	movw	r22, r14
     f18:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     f1c:	e0 96       	adiw	r28, 0x30	; 48
     f1e:	6c af       	std	Y+60, r22	; 0x3c
     f20:	7d af       	std	Y+61, r23	; 0x3d
     f22:	8e af       	std	Y+62, r24	; 0x3e
     f24:	9f af       	std	Y+63, r25	; 0x3f
     f26:	e0 97       	sbiw	r28, 0x30	; 48
									dCenter = di2 / d2 * d(xavg, yavg, 0, 0);
     f28:	27 96       	adiw	r28, 0x07	; 7
     f2a:	6c ad       	ldd	r22, Y+60	; 0x3c
     f2c:	7d ad       	ldd	r23, Y+61	; 0x3d
     f2e:	8e ad       	ldd	r24, Y+62	; 0x3e
     f30:	9f ad       	ldd	r25, Y+63	; 0x3f
     f32:	27 97       	sbiw	r28, 0x07	; 7
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
     f38:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     f3c:	7b 01       	movw	r14, r22
     f3e:	8c 01       	movw	r16, r24
     f40:	c2 01       	movw	r24, r4
     f42:	b1 01       	movw	r22, r2
     f44:	a2 01       	movw	r20, r4
     f46:	91 01       	movw	r18, r2
     f48:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
     f4c:	9b 01       	movw	r18, r22
     f4e:	ac 01       	movw	r20, r24
     f50:	c8 01       	movw	r24, r16
     f52:	b7 01       	movw	r22, r14
     f54:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
     f58:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
     f5c:	7b 01       	movw	r14, r22
     f5e:	8c 01       	movw	r16, r24
     f60:	ce 57       	subi	r28, 0x7E	; 126
     f62:	df 4f       	sbci	r29, 0xFF	; 255
     f64:	68 81       	ld	r22, Y
     f66:	79 81       	ldd	r23, Y+1	; 0x01
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	c2 58       	subi	r28, 0x82	; 130
     f6e:	d0 40       	sbci	r29, 0x00	; 0
     f70:	e8 96       	adiw	r28, 0x38	; 56
     f72:	2c ad       	ldd	r18, Y+60	; 0x3c
     f74:	3d ad       	ldd	r19, Y+61	; 0x3d
     f76:	4e ad       	ldd	r20, Y+62	; 0x3e
     f78:	5f ad       	ldd	r21, Y+63	; 0x3f
     f7a:	e8 97       	sbiw	r28, 0x38	; 56
     f7c:	6a c0       	rjmp	.+212    	; 0x1052 <__stack+0x553>
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	c1 52       	subi	r28, 0x21	; 33
     f84:	df 4f       	sbci	r29, 0xFF	; 255
     f86:	e8 81       	ld	r30, Y
     f88:	f9 81       	ldd	r31, Y+1	; 0x01
     f8a:	cf 5d       	subi	r28, 0xDF	; 223
     f8c:	d0 40       	sbci	r29, 0x00	; 0
     f8e:	31 97       	sbiw	r30, 0x01	; 1
     f90:	11 f4       	brne	.+4      	; 0xf96 <__stack+0x497>
     f92:	01 e0       	ldi	r16, 0x01	; 1
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	68 01       	movw	r12, r16
								}
								else
								{
									for(int ii = 0; ii < 3; ii++)
									{
										if(order[ii] == 1)
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	19 f4       	brne	.+6      	; 0xfa6 <__stack+0x4a7>
     fa0:	12 e0       	ldi	r17, 0x02	; 2
     fa2:	c1 2e       	mov	r12, r17
     fa4:	d1 2c       	mov	r13, r1
										{
											pos = ii;
										}
									}
									thetaf = atan2(-yavg, -xavg) - atan2(y1 - yavg, x1 - xavg);
     fa6:	c2 01       	movw	r24, r4
     fa8:	b1 01       	movw	r22, r2
     faa:	90 58       	subi	r25, 0x80	; 128
     fac:	27 96       	adiw	r28, 0x07	; 7
     fae:	2c ad       	ldd	r18, Y+60	; 0x3c
     fb0:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb2:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb4:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb6:	27 97       	sbiw	r28, 0x07	; 7
     fb8:	50 58       	subi	r21, 0x80	; 128
     fba:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
     fbe:	7b 01       	movw	r14, r22
     fc0:	8c 01       	movw	r16, r24
     fc2:	c1 54       	subi	r28, 0x41	; 65
     fc4:	df 4f       	sbci	r29, 0xFF	; 255
     fc6:	68 81       	ld	r22, Y
     fc8:	79 81       	ldd	r23, Y+1	; 0x01
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	cf 5b       	subi	r28, 0xBF	; 191
     fd0:	d0 40       	sbci	r29, 0x00	; 0
     fd2:	cd 53       	subi	r28, 0x3D	; 61
     fd4:	df 4f       	sbci	r29, 0xFF	; 255
     fd6:	28 81       	ld	r18, Y
     fd8:	39 81       	ldd	r19, Y+1	; 0x01
     fda:	4a 81       	ldd	r20, Y+2	; 0x02
     fdc:	5b 81       	ldd	r21, Y+3	; 0x03
     fde:	c3 5c       	subi	r28, 0xC3	; 195
     fe0:	d0 40       	sbci	r29, 0x00	; 0
     fe2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	c8 01       	movw	r24, r16
     fec:	b7 01       	movw	r22, r14
     fee:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
     ff2:	e0 96       	adiw	r28, 0x30	; 48
     ff4:	6c af       	std	Y+60, r22	; 0x3c
     ff6:	7d af       	std	Y+61, r23	; 0x3d
     ff8:	8e af       	std	Y+62, r24	; 0x3e
     ffa:	9f af       	std	Y+63, r25	; 0x3f
     ffc:	e0 97       	sbiw	r28, 0x30	; 48
									dCenter = di1 / d1 * d(xavg, yavg, 0, 0);
     ffe:	27 96       	adiw	r28, 0x07	; 7
    1000:	6c ad       	ldd	r22, Y+60	; 0x3c
    1002:	7d ad       	ldd	r23, Y+61	; 0x3d
    1004:	8e ad       	ldd	r24, Y+62	; 0x3e
    1006:	9f ad       	ldd	r25, Y+63	; 0x3f
    1008:	27 97       	sbiw	r28, 0x07	; 7
    100a:	9b 01       	movw	r18, r22
    100c:	ac 01       	movw	r20, r24
    100e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1012:	7b 01       	movw	r14, r22
    1014:	8c 01       	movw	r16, r24
    1016:	c2 01       	movw	r24, r4
    1018:	b1 01       	movw	r22, r2
    101a:	a2 01       	movw	r20, r4
    101c:	91 01       	movw	r18, r2
    101e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	c8 01       	movw	r24, r16
    1028:	b7 01       	movw	r22, r14
    102a:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    102e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    1032:	7b 01       	movw	r14, r22
    1034:	8c 01       	movw	r16, r24
    1036:	ca 57       	subi	r28, 0x7A	; 122
    1038:	df 4f       	sbci	r29, 0xFF	; 255
    103a:	68 81       	ld	r22, Y
    103c:	79 81       	ldd	r23, Y+1	; 0x01
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	c6 58       	subi	r28, 0x86	; 134
    1044:	d0 40       	sbci	r29, 0x00	; 0
    1046:	ec 96       	adiw	r28, 0x3c	; 60
    1048:	2c ad       	ldd	r18, Y+60	; 0x3c
    104a:	3d ad       	ldd	r19, Y+61	; 0x3d
    104c:	4e ad       	ldd	r20, Y+62	; 0x3e
    104e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1050:	ec 97       	sbiw	r28, 0x3c	; 60
    1052:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    1056:	a8 01       	movw	r20, r16
    1058:	97 01       	movw	r18, r14
    105a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    105e:	ac 96       	adiw	r28, 0x2c	; 44
    1060:	6c af       	std	Y+60, r22	; 0x3c
    1062:	7d af       	std	Y+61, r23	; 0x3d
    1064:	8e af       	std	Y+62, r24	; 0x3e
    1066:	9f af       	std	Y+63, r25	; 0x3f
    1068:	ac 97       	sbiw	r28, 0x2c	; 44
								}

								double theta_rot_off = atan2(-yavg, -xavg);
    106a:	c2 01       	movw	r24, r4
    106c:	b1 01       	movw	r22, r2
    106e:	90 58       	subi	r25, 0x80	; 128
    1070:	27 96       	adiw	r28, 0x07	; 7
    1072:	2c ad       	ldd	r18, Y+60	; 0x3c
    1074:	3d ad       	ldd	r19, Y+61	; 0x3d
    1076:	4e ad       	ldd	r20, Y+62	; 0x3e
    1078:	5f ad       	ldd	r21, Y+63	; 0x3f
    107a:	27 97       	sbiw	r28, 0x07	; 7
    107c:	50 58       	subi	r21, 0x80	; 128
    107e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
    1082:	4b 01       	movw	r8, r22
    1084:	5c 01       	movw	r10, r24
								int xp = inp[pos * 3];
								int yp = inp[pos * 3 + 1];
								double theta2 = atan2((double)(yp) - yiavg, (double)(xp) - xiavg);
    1086:	86 01       	movw	r16, r12
    1088:	00 0f       	add	r16, r16
    108a:	11 1f       	adc	r17, r17
    108c:	0c 0d       	add	r16, r12
    108e:	1d 1d       	adc	r17, r13
    1090:	f8 01       	movw	r30, r16
    1092:	31 96       	adiw	r30, 0x01	; 1
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	cd 52       	subi	r28, 0x2D	; 45
    109a:	df 4f       	sbci	r29, 0xFF	; 255
    109c:	28 81       	ld	r18, Y
    109e:	39 81       	ldd	r19, Y+1	; 0x01
    10a0:	c3 5d       	subi	r28, 0xD3	; 211
    10a2:	d0 40       	sbci	r29, 0x00	; 0
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	60 81       	ld	r22, Z
    10aa:	71 81       	ldd	r23, Z+1	; 0x01
    10ac:	88 27       	eor	r24, r24
    10ae:	77 fd       	sbrc	r23, 7
    10b0:	80 95       	com	r24
    10b2:	98 2f       	mov	r25, r24
    10b4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    10b8:	c6 57       	subi	r28, 0x76	; 118
    10ba:	df 4f       	sbci	r29, 0xFF	; 255
    10bc:	28 81       	ld	r18, Y
    10be:	39 81       	ldd	r19, Y+1	; 0x01
    10c0:	4a 81       	ldd	r20, Y+2	; 0x02
    10c2:	5b 81       	ldd	r21, Y+3	; 0x03
    10c4:	ca 58       	subi	r28, 0x8A	; 138
    10c6:	d0 40       	sbci	r29, 0x00	; 0
    10c8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    10cc:	6b 01       	movw	r12, r22
    10ce:	7c 01       	movw	r14, r24
    10d0:	00 0f       	add	r16, r16
    10d2:	11 1f       	adc	r17, r17
    10d4:	cd 52       	subi	r28, 0x2D	; 45
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	88 81       	ld	r24, Y
    10da:	99 81       	ldd	r25, Y+1	; 0x01
    10dc:	c3 5d       	subi	r28, 0xD3	; 211
    10de:	d0 40       	sbci	r29, 0x00	; 0
    10e0:	08 0f       	add	r16, r24
    10e2:	19 1f       	adc	r17, r25
    10e4:	d8 01       	movw	r26, r16
    10e6:	6d 91       	ld	r22, X+
    10e8:	7c 91       	ld	r23, X
    10ea:	88 27       	eor	r24, r24
    10ec:	77 fd       	sbrc	r23, 7
    10ee:	80 95       	com	r24
    10f0:	98 2f       	mov	r25, r24
    10f2:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    10f6:	c2 57       	subi	r28, 0x72	; 114
    10f8:	df 4f       	sbci	r29, 0xFF	; 255
    10fa:	28 81       	ld	r18, Y
    10fc:	39 81       	ldd	r19, Y+1	; 0x01
    10fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1100:	5b 81       	ldd	r21, Y+3	; 0x03
    1102:	ce 58       	subi	r28, 0x8E	; 142
    1104:	d0 40       	sbci	r29, 0x00	; 0
    1106:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	c7 01       	movw	r24, r14
    1110:	b6 01       	movw	r22, r12
    1112:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
								theta_rot = theta2 + thetaf - theta_rot_off;
    1116:	e0 96       	adiw	r28, 0x30	; 48
    1118:	2c ad       	ldd	r18, Y+60	; 0x3c
    111a:	3d ad       	ldd	r19, Y+61	; 0x3d
    111c:	4e ad       	ldd	r20, Y+62	; 0x3e
    111e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1120:	e0 97       	sbiw	r28, 0x30	; 48
    1122:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1126:	a5 01       	movw	r20, r10
    1128:	94 01       	movw	r18, r8
    112a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    112e:	cd 56       	subi	r28, 0x6D	; 109
    1130:	df 4f       	sbci	r29, 0xFF	; 255
    1132:	68 83       	st	Y, r22
    1134:	79 83       	std	Y+1, r23	; 0x01
    1136:	8a 83       	std	Y+2, r24	; 0x02
    1138:	9b 83       	std	Y+3, r25	; 0x03
    113a:	c3 59       	subi	r28, 0x93	; 147
    113c:	d0 40       	sbci	r29, 0x00	; 0
								x0 = xiavg + cos(theta_rot_off + theta_rot) * dCenter;
    113e:	c5 01       	movw	r24, r10
    1140:	b4 01       	movw	r22, r8
    1142:	cd 56       	subi	r28, 0x6D	; 109
    1144:	df 4f       	sbci	r29, 0xFF	; 255
    1146:	28 81       	ld	r18, Y
    1148:	39 81       	ldd	r19, Y+1	; 0x01
    114a:	4a 81       	ldd	r20, Y+2	; 0x02
    114c:	5b 81       	ldd	r21, Y+3	; 0x03
    114e:	c3 59       	subi	r28, 0x93	; 147
    1150:	d0 40       	sbci	r29, 0x00	; 0
    1152:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1156:	7b 01       	movw	r14, r22
    1158:	8c 01       	movw	r16, r24
    115a:	c8 01       	movw	r24, r16
    115c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <cos>
    1160:	ac 96       	adiw	r28, 0x2c	; 44
    1162:	2c ad       	ldd	r18, Y+60	; 0x3c
    1164:	3d ad       	ldd	r19, Y+61	; 0x3d
    1166:	4e ad       	ldd	r20, Y+62	; 0x3e
    1168:	5f ad       	ldd	r21, Y+63	; 0x3f
    116a:	ac 97       	sbiw	r28, 0x2c	; 44
    116c:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	c2 57       	subi	r28, 0x72	; 114
    1176:	df 4f       	sbci	r29, 0xFF	; 255
    1178:	68 81       	ld	r22, Y
    117a:	79 81       	ldd	r23, Y+1	; 0x01
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	ce 58       	subi	r28, 0x8E	; 142
    1182:	d0 40       	sbci	r29, 0x00	; 0
    1184:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1188:	c5 56       	subi	r28, 0x65	; 101
    118a:	df 4f       	sbci	r29, 0xFF	; 255
    118c:	68 83       	st	Y, r22
    118e:	79 83       	std	Y+1, r23	; 0x01
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	9b 83       	std	Y+3, r25	; 0x03
    1194:	cb 59       	subi	r28, 0x9B	; 155
    1196:	d0 40       	sbci	r29, 0x00	; 0
								y0 = yiavg + sin(theta_rot_off + theta_rot) * dCenter;
    1198:	b7 01       	movw	r22, r14
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <sin>
    11a0:	ac 96       	adiw	r28, 0x2c	; 44
    11a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    11a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    11a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    11a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    11aa:	ac 97       	sbiw	r28, 0x2c	; 44
    11ac:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    11b0:	9b 01       	movw	r18, r22
    11b2:	ac 01       	movw	r20, r24
    11b4:	c6 57       	subi	r28, 0x76	; 118
    11b6:	df 4f       	sbci	r29, 0xFF	; 255
    11b8:	68 81       	ld	r22, Y
    11ba:	79 81       	ldd	r23, Y+1	; 0x01
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	ca 58       	subi	r28, 0x8A	; 138
    11c2:	d0 40       	sbci	r29, 0x00	; 0
    11c4:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    11c8:	c9 56       	subi	r28, 0x69	; 105
    11ca:	df 4f       	sbci	r29, 0xFF	; 255
    11cc:	68 83       	st	Y, r22
    11ce:	79 83       	std	Y+1, r23	; 0x01
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	9b 83       	std	Y+3, r25	; 0x03
    11d4:	c7 59       	subi	r28, 0x97	; 151
    11d6:	d0 40       	sbci	r29, 0x00	; 0
    11d8:	e4 96       	adiw	r28, 0x34	; 52
    11da:	8c ad       	ldd	r24, Y+60	; 0x3c
    11dc:	9d ad       	ldd	r25, Y+61	; 0x3d
    11de:	ae ad       	ldd	r26, Y+62	; 0x3e
    11e0:	bf ad       	ldd	r27, Y+63	; 0x3f
    11e2:	e4 97       	sbiw	r28, 0x34	; 52
    11e4:	c5 51       	subi	r28, 0x15	; 21
    11e6:	df 4f       	sbci	r29, 0xFF	; 255
    11e8:	88 83       	st	Y, r24
    11ea:	cb 5e       	subi	r28, 0xEB	; 235
    11ec:	d0 40       	sbci	r29, 0x00	; 0
    11ee:	c4 51       	subi	r28, 0x14	; 20
    11f0:	df 4f       	sbci	r29, 0xFF	; 255
    11f2:	98 83       	st	Y, r25
    11f4:	cc 5e       	subi	r28, 0xEC	; 236
    11f6:	d0 40       	sbci	r29, 0x00	; 0
    11f8:	c3 51       	subi	r28, 0x13	; 19
    11fa:	df 4f       	sbci	r29, 0xFF	; 255
    11fc:	a8 83       	st	Y, r26
    11fe:	cd 5e       	subi	r28, 0xED	; 237
    1200:	d0 40       	sbci	r29, 0x00	; 0
    1202:	c2 51       	subi	r28, 0x12	; 18
    1204:	df 4f       	sbci	r29, 0xFF	; 255
    1206:	b8 83       	st	Y, r27
    1208:	ce 5e       	subi	r28, 0xEE	; 238
    120a:	d0 40       	sbci	r29, 0x00	; 0
    120c:	ce 56       	subi	r28, 0x6E	; 110
    120e:	df 4f       	sbci	r29, 0xFF	; 255
    1210:	18 82       	st	Y, r1
    1212:	c2 59       	subi	r28, 0x92	; 146
    1214:	d0 40       	sbci	r29, 0x00	; 0
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
				{
					for(int k = 0; k < 4; k++)
    1216:	ee 96       	adiw	r28, 0x3e	; 62
    1218:	ee ad       	ldd	r30, Y+62	; 0x3e
    121a:	ff ad       	ldd	r31, Y+63	; 0x3f
    121c:	ee 97       	sbiw	r28, 0x3e	; 62
    121e:	31 96       	adiw	r30, 0x01	; 1
    1220:	ee 96       	adiw	r28, 0x3e	; 62
    1222:	ff af       	std	Y+63, r31	; 0x3f
    1224:	ee af       	std	Y+62, r30	; 0x3e
    1226:	ee 97       	sbiw	r28, 0x3e	; 62
    1228:	2e 96       	adiw	r28, 0x0e	; 14
    122a:	2e ad       	ldd	r18, Y+62	; 0x3e
    122c:	3f ad       	ldd	r19, Y+63	; 0x3f
    122e:	2e 97       	sbiw	r28, 0x0e	; 14
    1230:	21 50       	subi	r18, 0x01	; 1
    1232:	30 40       	sbci	r19, 0x00	; 0
    1234:	2e 96       	adiw	r28, 0x0e	; 14
    1236:	3f af       	std	Y+63, r19	; 0x3f
    1238:	2e af       	std	Y+62, r18	; 0x3e
    123a:	2e 97       	sbiw	r28, 0x0e	; 14
    123c:	2c 96       	adiw	r28, 0x0c	; 12
    123e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1240:	9f ad       	ldd	r25, Y+63	; 0x3f
    1242:	2c 97       	sbiw	r28, 0x0c	; 12
    1244:	04 96       	adiw	r24, 0x04	; 4
    1246:	2c 96       	adiw	r28, 0x0c	; 12
    1248:	9f af       	std	Y+63, r25	; 0x3f
    124a:	8e af       	std	Y+62, r24	; 0x3e
    124c:	2c 97       	sbiw	r28, 0x0c	; 12
    124e:	60 96       	adiw	r28, 0x10	; 16
    1250:	ae ad       	ldd	r26, Y+62	; 0x3e
    1252:	bf ad       	ldd	r27, Y+63	; 0x3f
    1254:	60 97       	sbiw	r28, 0x10	; 16
    1256:	14 97       	sbiw	r26, 0x04	; 4
    1258:	60 96       	adiw	r28, 0x10	; 16
    125a:	bf af       	std	Y+63, r27	; 0x3f
    125c:	ae af       	std	Y+62, r26	; 0x3e
    125e:	60 97       	sbiw	r28, 0x10	; 16
    1260:	34 97       	sbiw	r30, 0x04	; 4
    1262:	09 f0       	breq	.+2      	; 0x1266 <__stack+0x767>
    1264:	70 cb       	rjmp	.-2336   	; 0x946 <get_position+0x532>
				
		double xes[] = {x1, x2, x3, x4};
		double yes[] = {y1, y2, y3, y4};
		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
    1266:	c2 58       	subi	r28, 0x82	; 130
    1268:	df 4f       	sbci	r29, 0xFF	; 255
    126a:	e8 81       	ld	r30, Y
    126c:	f9 81       	ldd	r31, Y+1	; 0x01
    126e:	ce 57       	subi	r28, 0x7E	; 126
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	31 96       	adiw	r30, 0x01	; 1
    1274:	c2 58       	subi	r28, 0x82	; 130
    1276:	df 4f       	sbci	r29, 0xFF	; 255
    1278:	f9 83       	std	Y+1, r31	; 0x01
    127a:	e8 83       	st	Y, r30
    127c:	ce 57       	subi	r28, 0x7E	; 126
    127e:	d0 40       	sbci	r29, 0x00	; 0
    1280:	2d ad       	ldd	r18, Y+61	; 0x3d
    1282:	3e ad       	ldd	r19, Y+62	; 0x3e
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	30 40       	sbci	r19, 0x00	; 0
    1288:	3e af       	std	Y+62, r19	; 0x3e
    128a:	2d af       	std	Y+61, r18	; 0x3d
    128c:	89 ad       	ldd	r24, Y+57	; 0x39
    128e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1290:	04 96       	adiw	r24, 0x04	; 4
    1292:	9a af       	std	Y+58, r25	; 0x3a
    1294:	89 af       	std	Y+57, r24	; 0x39
    1296:	34 97       	sbiw	r30, 0x04	; 4
    1298:	09 f0       	breq	.+2      	; 0x129c <__stack+0x79d>
    129a:	17 cb       	rjmp	.-2514   	; 0x8ca <get_position+0x4b6>
		diord[1] = di2/mini;
		diord[2] = di3/mini;
				
		double xes[] = {x1, x2, x3, x4};
		double yes[] = {y1, y2, y3, y4};
		for(int i = 0; i < 4; i++)
    129c:	c0 58       	subi	r28, 0x80	; 128
    129e:	df 4f       	sbci	r29, 0xFF	; 255
    12a0:	a8 81       	ld	r26, Y
    12a2:	b9 81       	ldd	r27, Y+1	; 0x01
    12a4:	c0 58       	subi	r28, 0x80	; 128
    12a6:	d0 40       	sbci	r29, 0x00	; 0
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	c0 58       	subi	r28, 0x80	; 128
    12ac:	df 4f       	sbci	r29, 0xFF	; 255
    12ae:	b9 83       	std	Y+1, r27	; 0x01
    12b0:	a8 83       	st	Y, r26
    12b2:	c0 58       	subi	r28, 0x80	; 128
    12b4:	d0 40       	sbci	r29, 0x00	; 0
    12b6:	eb ad       	ldd	r30, Y+59	; 0x3b
    12b8:	fc ad       	ldd	r31, Y+60	; 0x3c
    12ba:	34 96       	adiw	r30, 0x04	; 4
    12bc:	fc af       	std	Y+60, r31	; 0x3c
    12be:	eb af       	std	Y+59, r30	; 0x3b
    12c0:	14 97       	sbiw	r26, 0x04	; 4
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__stack+0x7c7>
    12c4:	9d c4       	rjmp	.+2362   	; 0x1c00 <__stack+0x1101>
double min3(double a, double b, double c);
double min4(double a, double b, double c, double d);


void get_position(unsigned int* inp, double* xo, double* yo, double* to)
{
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	c0 58       	subi	r28, 0x80	; 128
    12cc:	df 4f       	sbci	r29, 0xFF	; 255
    12ce:	88 81       	ld	r24, Y
    12d0:	99 81       	ldd	r25, Y+1	; 0x01
    12d2:	c0 58       	subi	r28, 0x80	; 128
    12d4:	d0 40       	sbci	r29, 0x00	; 0
    12d6:	28 1b       	sub	r18, r24
    12d8:	39 0b       	sbc	r19, r25
    12da:	3e af       	std	Y+62, r19	; 0x3e
    12dc:	2d af       	std	Y+61, r18	; 0x3d
    12de:	de 01       	movw	r26, r28
    12e0:	99 96       	adiw	r26, 0x29	; 41
    12e2:	ba af       	std	Y+58, r27	; 0x3a
    12e4:	a9 af       	std	Y+57, r26	; 0x39
    12e6:	c2 58       	subi	r28, 0x82	; 130
    12e8:	df 4f       	sbci	r29, 0xFF	; 255
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	18 82       	st	Y, r1
    12ee:	ce 57       	subi	r28, 0x7E	; 126
    12f0:	d0 40       	sbci	r29, 0x00	; 0
							double err = sq(diord[0] - dord[i]) + sq(diord[1] - dord[j]) + sq(diord[2] - dord[k]);
							if(first || err < min_err)
							{
								min_err = err;
								first = false;
								order[0] = i + 1;
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	cf 51       	subi	r28, 0x1F	; 31
    12f6:	df 4f       	sbci	r29, 0xFF	; 255
    12f8:	99 83       	std	Y+1, r25	; 0x01
    12fa:	88 83       	st	Y, r24
    12fc:	c1 5e       	subi	r28, 0xE1	; 225
    12fe:	d0 40       	sbci	r29, 0x00	; 0
    1300:	e4 ca       	rjmp	.-2616   	; 0x8ca <get_position+0x4b6>
		double d3 = d(x3, y3, xavg, yavg);
		double d4 = d(x4, y4, xavg, yavg);

		
		
		double dord[] = {0, 0, 0, 0};
    1302:	fe 01       	movw	r30, r28
    1304:	b9 96       	adiw	r30, 0x29	; 41
    1306:	80 e1       	ldi	r24, 0x10	; 16
    1308:	df 01       	movw	r26, r30
    130a:	1d 92       	st	X+, r1
    130c:	8a 95       	dec	r24
    130e:	e9 f7       	brne	.-6      	; 0x130a <__stack+0x80b>

		double mind = min4(d1, d2, d3, d4);

		dord[0] = d1 / mind;
    1310:	85 e8       	ldi	r24, 0x85	; 133
    1312:	9c e1       	ldi	r25, 0x1C	; 28
    1314:	aa e8       	ldi	r26, 0x8A	; 138
    1316:	bf e3       	ldi	r27, 0x3F	; 63
    1318:	89 a7       	std	Y+41, r24	; 0x29
    131a:	9a a7       	std	Y+42, r25	; 0x2a
    131c:	ab a7       	std	Y+43, r26	; 0x2b
    131e:	bc a7       	std	Y+44, r27	; 0x2c
		dord[1] = d2 / mind;
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e8       	ldi	r26, 0x80	; 128
    1326:	bf e3       	ldi	r27, 0x3F	; 63
    1328:	8d a7       	std	Y+45, r24	; 0x2d
    132a:	9e a7       	std	Y+46, r25	; 0x2e
    132c:	af a7       	std	Y+47, r26	; 0x2f
    132e:	b8 ab       	std	Y+48, r27	; 0x30
		dord[2]	= d3 / mind;
    1330:	84 e8       	ldi	r24, 0x84	; 132
    1332:	9c e5       	ldi	r25, 0x5C	; 92
    1334:	ac ec       	ldi	r26, 0xCC	; 204
    1336:	bf e3       	ldi	r27, 0x3F	; 63
    1338:	89 ab       	std	Y+49, r24	; 0x31
    133a:	9a ab       	std	Y+50, r25	; 0x32
    133c:	ab ab       	std	Y+51, r26	; 0x33
    133e:	bc ab       	std	Y+52, r27	; 0x34
		dord[3] = d4 / mind;
    1340:	85 e1       	ldi	r24, 0x15	; 21
    1342:	90 e9       	ldi	r25, 0x90	; 144
    1344:	a7 e9       	ldi	r26, 0x97	; 151
    1346:	bf e3       	ldi	r27, 0x3F	; 63
    1348:	8d ab       	std	Y+53, r24	; 0x35
    134a:	9e ab       	std	Y+54, r25	; 0x36
    134c:	af ab       	std	Y+55, r26	; 0x37
    134e:	b8 af       	std	Y+56, r27	; 0x38

		

		double xiavg = (xi1 + xi2 + xi3 + xi4)/4.0;
    1350:	cb 55       	subi	r28, 0x5B	; 91
    1352:	df 4f       	sbci	r29, 0xFF	; 255
    1354:	68 81       	ld	r22, Y
    1356:	79 81       	ldd	r23, Y+1	; 0x01
    1358:	c5 5a       	subi	r28, 0xA5	; 165
    135a:	d0 40       	sbci	r29, 0x00	; 0
    135c:	68 0d       	add	r22, r8
    135e:	79 1d       	adc	r23, r9
    1360:	60 0f       	add	r22, r16
    1362:	71 1f       	adc	r23, r17
    1364:	cf 55       	subi	r28, 0x5F	; 95
    1366:	df 4f       	sbci	r29, 0xFF	; 255
    1368:	e8 81       	ld	r30, Y
    136a:	f9 81       	ldd	r31, Y+1	; 0x01
    136c:	c1 5a       	subi	r28, 0xA1	; 161
    136e:	d0 40       	sbci	r29, 0x00	; 0
    1370:	6e 0f       	add	r22, r30
    1372:	7f 1f       	adc	r23, r31
    1374:	88 27       	eor	r24, r24
    1376:	77 fd       	sbrc	r23, 7
    1378:	80 95       	com	r24
    137a:	98 2f       	mov	r25, r24
    137c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5e e3       	ldi	r21, 0x3E	; 62
    1388:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    138c:	a8 96       	adiw	r28, 0x28	; 40
    138e:	6c af       	std	Y+60, r22	; 0x3c
    1390:	7d af       	std	Y+61, r23	; 0x3d
    1392:	8e af       	std	Y+62, r24	; 0x3e
    1394:	9f af       	std	Y+63, r25	; 0x3f
    1396:	a8 97       	sbiw	r28, 0x28	; 40
		
		double yiavg = (yi1 + yi2 + yi3 + yi4)/4.0;
    1398:	b3 01       	movw	r22, r6
    139a:	6e 0d       	add	r22, r14
    139c:	7f 1d       	adc	r23, r15
    139e:	cd 55       	subi	r28, 0x5D	; 93
    13a0:	df 4f       	sbci	r29, 0xFF	; 255
    13a2:	28 81       	ld	r18, Y
    13a4:	39 81       	ldd	r19, Y+1	; 0x01
    13a6:	c3 5a       	subi	r28, 0xA3	; 163
    13a8:	d0 40       	sbci	r29, 0x00	; 0
    13aa:	62 0f       	add	r22, r18
    13ac:	73 1f       	adc	r23, r19
    13ae:	c1 56       	subi	r28, 0x61	; 97
    13b0:	df 4f       	sbci	r29, 0xFF	; 255
    13b2:	88 81       	ld	r24, Y
    13b4:	99 81       	ldd	r25, Y+1	; 0x01
    13b6:	cf 59       	subi	r28, 0x9F	; 159
    13b8:	d0 40       	sbci	r29, 0x00	; 0
    13ba:	68 0f       	add	r22, r24
    13bc:	79 1f       	adc	r23, r25
    13be:	88 27       	eor	r24, r24
    13c0:	77 fd       	sbrc	r23, 7
    13c2:	80 95       	com	r24
    13c4:	98 2f       	mov	r25, r24
    13c6:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5e e3       	ldi	r21, 0x3E	; 62
    13d2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    13d6:	a4 96       	adiw	r28, 0x24	; 36
    13d8:	6c af       	std	Y+60, r22	; 0x3c
    13da:	7d af       	std	Y+61, r23	; 0x3d
    13dc:	8e af       	std	Y+62, r24	; 0x3e
    13de:	9f af       	std	Y+63, r25	; 0x3f
    13e0:	a4 97       	sbiw	r28, 0x24	; 36
		
		double di1 = d(xi1, yi1, xiavg, yiavg);
    13e2:	b8 01       	movw	r22, r16
    13e4:	88 27       	eor	r24, r24
    13e6:	77 fd       	sbrc	r23, 7
    13e8:	80 95       	com	r24
    13ea:	98 2f       	mov	r25, r24
    13ec:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    13f0:	a8 96       	adiw	r28, 0x28	; 40
    13f2:	2c ad       	ldd	r18, Y+60	; 0x3c
    13f4:	3d ad       	ldd	r19, Y+61	; 0x3d
    13f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    13f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    13fa:	a8 97       	sbiw	r28, 0x28	; 40
    13fc:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1400:	5b 01       	movw	r10, r22
    1402:	6c 01       	movw	r12, r24
    1404:	b7 01       	movw	r22, r14
    1406:	88 27       	eor	r24, r24
    1408:	77 fd       	sbrc	r23, 7
    140a:	80 95       	com	r24
    140c:	98 2f       	mov	r25, r24
    140e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    1412:	a4 96       	adiw	r28, 0x24	; 36
    1414:	2c ad       	ldd	r18, Y+60	; 0x3c
    1416:	3d ad       	ldd	r19, Y+61	; 0x3d
    1418:	4e ad       	ldd	r20, Y+62	; 0x3e
    141a:	5f ad       	ldd	r21, Y+63	; 0x3f
    141c:	a4 97       	sbiw	r28, 0x24	; 36
    141e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1422:	7b 01       	movw	r14, r22
    1424:	8c 01       	movw	r16, r24
    1426:	c6 01       	movw	r24, r12
    1428:	b5 01       	movw	r22, r10
    142a:	a6 01       	movw	r20, r12
    142c:	95 01       	movw	r18, r10
    142e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1432:	5b 01       	movw	r10, r22
    1434:	6c 01       	movw	r12, r24
    1436:	c8 01       	movw	r24, r16
    1438:	b7 01       	movw	r22, r14
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	c6 01       	movw	r24, r12
    1448:	b5 01       	movw	r22, r10
    144a:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    144e:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    1452:	a0 96       	adiw	r28, 0x20	; 32
    1454:	6c af       	std	Y+60, r22	; 0x3c
    1456:	7d af       	std	Y+61, r23	; 0x3d
    1458:	8e af       	std	Y+62, r24	; 0x3e
    145a:	9f af       	std	Y+63, r25	; 0x3f
    145c:	a0 97       	sbiw	r28, 0x20	; 32
		double di2 = d(xi2, yi2, xiavg, yiavg);
    145e:	b4 01       	movw	r22, r8
    1460:	88 27       	eor	r24, r24
    1462:	77 fd       	sbrc	r23, 7
    1464:	80 95       	com	r24
    1466:	98 2f       	mov	r25, r24
    1468:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    146c:	a8 96       	adiw	r28, 0x28	; 40
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	a8 97       	sbiw	r28, 0x28	; 40
    1478:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    147c:	5b 01       	movw	r10, r22
    147e:	6c 01       	movw	r12, r24
    1480:	b3 01       	movw	r22, r6
    1482:	88 27       	eor	r24, r24
    1484:	77 fd       	sbrc	r23, 7
    1486:	80 95       	com	r24
    1488:	98 2f       	mov	r25, r24
    148a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    148e:	a4 96       	adiw	r28, 0x24	; 36
    1490:	2c ad       	ldd	r18, Y+60	; 0x3c
    1492:	3d ad       	ldd	r19, Y+61	; 0x3d
    1494:	4e ad       	ldd	r20, Y+62	; 0x3e
    1496:	5f ad       	ldd	r21, Y+63	; 0x3f
    1498:	a4 97       	sbiw	r28, 0x24	; 36
    149a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    149e:	7b 01       	movw	r14, r22
    14a0:	8c 01       	movw	r16, r24
    14a2:	c6 01       	movw	r24, r12
    14a4:	b5 01       	movw	r22, r10
    14a6:	a6 01       	movw	r20, r12
    14a8:	95 01       	movw	r18, r10
    14aa:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    14ae:	5b 01       	movw	r10, r22
    14b0:	6c 01       	movw	r12, r24
    14b2:	c8 01       	movw	r24, r16
    14b4:	b7 01       	movw	r22, r14
    14b6:	a8 01       	movw	r20, r16
    14b8:	97 01       	movw	r18, r14
    14ba:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    14be:	9b 01       	movw	r18, r22
    14c0:	ac 01       	movw	r20, r24
    14c2:	c6 01       	movw	r24, r12
    14c4:	b5 01       	movw	r22, r10
    14c6:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    14ca:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    14ce:	1b 01       	movw	r2, r22
    14d0:	2c 01       	movw	r4, r24
		double di3 = d(xi3, yi3, xiavg, yiavg);
    14d2:	cb 55       	subi	r28, 0x5B	; 91
    14d4:	df 4f       	sbci	r29, 0xFF	; 255
    14d6:	a8 81       	ld	r26, Y
    14d8:	b9 81       	ldd	r27, Y+1	; 0x01
    14da:	c5 5a       	subi	r28, 0xA5	; 165
    14dc:	d0 40       	sbci	r29, 0x00	; 0
    14de:	bd 01       	movw	r22, r26
    14e0:	88 27       	eor	r24, r24
    14e2:	77 fd       	sbrc	r23, 7
    14e4:	80 95       	com	r24
    14e6:	98 2f       	mov	r25, r24
    14e8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    14ec:	a8 96       	adiw	r28, 0x28	; 40
    14ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    14f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    14f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    14f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    14f6:	a8 97       	sbiw	r28, 0x28	; 40
    14f8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    14fc:	5b 01       	movw	r10, r22
    14fe:	6c 01       	movw	r12, r24
    1500:	cd 55       	subi	r28, 0x5D	; 93
    1502:	df 4f       	sbci	r29, 0xFF	; 255
    1504:	e8 81       	ld	r30, Y
    1506:	f9 81       	ldd	r31, Y+1	; 0x01
    1508:	c3 5a       	subi	r28, 0xA3	; 163
    150a:	d0 40       	sbci	r29, 0x00	; 0
    150c:	bf 01       	movw	r22, r30
    150e:	88 27       	eor	r24, r24
    1510:	77 fd       	sbrc	r23, 7
    1512:	80 95       	com	r24
    1514:	98 2f       	mov	r25, r24
    1516:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    151a:	a4 96       	adiw	r28, 0x24	; 36
    151c:	2c ad       	ldd	r18, Y+60	; 0x3c
    151e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1520:	4e ad       	ldd	r20, Y+62	; 0x3e
    1522:	5f ad       	ldd	r21, Y+63	; 0x3f
    1524:	a4 97       	sbiw	r28, 0x24	; 36
    1526:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    152a:	7b 01       	movw	r14, r22
    152c:	8c 01       	movw	r16, r24
    152e:	c6 01       	movw	r24, r12
    1530:	b5 01       	movw	r22, r10
    1532:	a6 01       	movw	r20, r12
    1534:	95 01       	movw	r18, r10
    1536:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    153a:	5b 01       	movw	r10, r22
    153c:	6c 01       	movw	r12, r24
    153e:	c8 01       	movw	r24, r16
    1540:	b7 01       	movw	r22, r14
    1542:	a8 01       	movw	r20, r16
    1544:	97 01       	movw	r18, r14
    1546:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    154a:	9b 01       	movw	r18, r22
    154c:	ac 01       	movw	r20, r24
    154e:	c6 01       	movw	r24, r12
    1550:	b5 01       	movw	r22, r10
    1552:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1556:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    155a:	3b 01       	movw	r6, r22
    155c:	4c 01       	movw	r8, r24
		double di4 = d(xi4, yi4, xiavg, yiavg);
    155e:	cf 55       	subi	r28, 0x5F	; 95
    1560:	df 4f       	sbci	r29, 0xFF	; 255
    1562:	28 81       	ld	r18, Y
    1564:	39 81       	ldd	r19, Y+1	; 0x01
    1566:	c1 5a       	subi	r28, 0xA1	; 161
    1568:	d0 40       	sbci	r29, 0x00	; 0
    156a:	b9 01       	movw	r22, r18
    156c:	88 27       	eor	r24, r24
    156e:	77 fd       	sbrc	r23, 7
    1570:	80 95       	com	r24
    1572:	98 2f       	mov	r25, r24
    1574:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    1578:	a8 96       	adiw	r28, 0x28	; 40
    157a:	2c ad       	ldd	r18, Y+60	; 0x3c
    157c:	3d ad       	ldd	r19, Y+61	; 0x3d
    157e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1580:	5f ad       	ldd	r21, Y+63	; 0x3f
    1582:	a8 97       	sbiw	r28, 0x28	; 40
    1584:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1588:	5b 01       	movw	r10, r22
    158a:	6c 01       	movw	r12, r24
    158c:	c1 56       	subi	r28, 0x61	; 97
    158e:	df 4f       	sbci	r29, 0xFF	; 255
    1590:	a8 81       	ld	r26, Y
    1592:	b9 81       	ldd	r27, Y+1	; 0x01
    1594:	cf 59       	subi	r28, 0x9F	; 159
    1596:	d0 40       	sbci	r29, 0x00	; 0
    1598:	bd 01       	movw	r22, r26
    159a:	88 27       	eor	r24, r24
    159c:	77 fd       	sbrc	r23, 7
    159e:	80 95       	com	r24
    15a0:	98 2f       	mov	r25, r24
    15a2:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    15a6:	a4 96       	adiw	r28, 0x24	; 36
    15a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    15aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    15ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    15ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    15b0:	a4 97       	sbiw	r28, 0x24	; 36
    15b2:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    15b6:	7b 01       	movw	r14, r22
    15b8:	8c 01       	movw	r16, r24
    15ba:	c6 01       	movw	r24, r12
    15bc:	b5 01       	movw	r22, r10
    15be:	a6 01       	movw	r20, r12
    15c0:	95 01       	movw	r18, r10
    15c2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    15c6:	5b 01       	movw	r10, r22
    15c8:	6c 01       	movw	r12, r24
    15ca:	c8 01       	movw	r24, r16
    15cc:	b7 01       	movw	r22, r14
    15ce:	a8 01       	movw	r20, r16
    15d0:	97 01       	movw	r18, r14
    15d2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    15d6:	9b 01       	movw	r18, r22
    15d8:	ac 01       	movw	r20, r24
    15da:	c6 01       	movw	r24, r12
    15dc:	b5 01       	movw	r22, r10
    15de:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    15e2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    15e6:	5b 01       	movw	r10, r22
    15e8:	6c 01       	movw	r12, r24
}

double min4(double a, double b, double c, double d)
{
	double ret = a;
	if(b < ret)
    15ea:	c2 01       	movw	r24, r4
    15ec:	b1 01       	movw	r22, r2
    15ee:	a0 96       	adiw	r28, 0x20	; 32
    15f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    15f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    15f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    15f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    15f8:	a0 97       	sbiw	r28, 0x20	; 32
    15fa:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
    15fe:	88 23       	and	r24, r24
    1600:	1c f4       	brge	.+6      	; 0x1608 <__stack+0xb09>
    1602:	d2 01       	movw	r26, r4
    1604:	c1 01       	movw	r24, r2
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <__stack+0xb15>
    1608:	a0 96       	adiw	r28, 0x20	; 32
    160a:	8c ad       	ldd	r24, Y+60	; 0x3c
    160c:	9d ad       	ldd	r25, Y+61	; 0x3d
    160e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1610:	bf ad       	ldd	r27, Y+63	; 0x3f
    1612:	a0 97       	sbiw	r28, 0x20	; 32
    1614:	7c 01       	movw	r14, r24
    1616:	8d 01       	movw	r16, r26
		ret = b;
	if(c < ret)
    1618:	c4 01       	movw	r24, r8
    161a:	b3 01       	movw	r22, r6
    161c:	97 01       	movw	r18, r14
    161e:	ad 01       	movw	r20, r26
    1620:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
    1624:	88 23       	and	r24, r24
    1626:	24 f4       	brge	.+8      	; 0x1630 <__stack+0xb31>
    1628:	d4 01       	movw	r26, r8
    162a:	c3 01       	movw	r24, r6
    162c:	73 01       	movw	r14, r6
    162e:	8d 01       	movw	r16, r26
		ret = c;
	if(d < ret)
    1630:	c6 01       	movw	r24, r12
    1632:	b5 01       	movw	r22, r10
    1634:	97 01       	movw	r18, r14
    1636:	a8 01       	movw	r20, r16
    1638:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
    163c:	88 23       	and	r24, r24
    163e:	1c f4       	brge	.+6      	; 0x1646 <__stack+0xb47>
    1640:	86 01       	movw	r16, r12
    1642:	75 01       	movw	r14, r10
    1644:	04 c0       	rjmp	.+8      	; 0x164e <__stack+0xb4f>
    1646:	c7 01       	movw	r24, r14
    1648:	d8 01       	movw	r26, r16
    164a:	7c 01       	movw	r14, r24
    164c:	8d 01       	movw	r16, r26
		double di4 = d(xi4, yi4, xiavg, yiavg);
		double diord[] = {0,0,0,0};
		double mini = min4(di1, di2, di3, di4);


		diord[0] = di1/mini;
    164e:	a0 96       	adiw	r28, 0x20	; 32
    1650:	6c ad       	ldd	r22, Y+60	; 0x3c
    1652:	7d ad       	ldd	r23, Y+61	; 0x3d
    1654:	8e ad       	ldd	r24, Y+62	; 0x3e
    1656:	9f ad       	ldd	r25, Y+63	; 0x3f
    1658:	a0 97       	sbiw	r28, 0x20	; 32
    165a:	a8 01       	movw	r20, r16
    165c:	97 01       	movw	r18, r14
    165e:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    1662:	cd 54       	subi	r28, 0x4D	; 77
    1664:	df 4f       	sbci	r29, 0xFF	; 255
    1666:	68 83       	st	Y, r22
    1668:	79 83       	std	Y+1, r23	; 0x01
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	9b 83       	std	Y+3, r25	; 0x03
    166e:	c3 5b       	subi	r28, 0xB3	; 179
    1670:	d0 40       	sbci	r29, 0x00	; 0
		diord[1] = di2/mini;
    1672:	c2 01       	movw	r24, r4
    1674:	b1 01       	movw	r22, r2
    1676:	a8 01       	movw	r20, r16
    1678:	97 01       	movw	r18, r14
    167a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    167e:	c1 55       	subi	r28, 0x51	; 81
    1680:	df 4f       	sbci	r29, 0xFF	; 255
    1682:	68 83       	st	Y, r22
    1684:	79 83       	std	Y+1, r23	; 0x01
    1686:	8a 83       	std	Y+2, r24	; 0x02
    1688:	9b 83       	std	Y+3, r25	; 0x03
    168a:	cf 5a       	subi	r28, 0xAF	; 175
    168c:	d0 40       	sbci	r29, 0x00	; 0
		diord[2] = di3/mini;
    168e:	c4 01       	movw	r24, r8
    1690:	b3 01       	movw	r22, r6
    1692:	a8 01       	movw	r20, r16
    1694:	97 01       	movw	r18, r14
    1696:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    169a:	c5 55       	subi	r28, 0x55	; 85
    169c:	df 4f       	sbci	r29, 0xFF	; 255
    169e:	68 83       	st	Y, r22
    16a0:	79 83       	std	Y+1, r23	; 0x01
    16a2:	8a 83       	std	Y+2, r24	; 0x02
    16a4:	9b 83       	std	Y+3, r25	; 0x03
    16a6:	cb 5a       	subi	r28, 0xAB	; 171
    16a8:	d0 40       	sbci	r29, 0x00	; 0
		diord[3] = di4/mini;
    16aa:	c6 01       	movw	r24, r12
    16ac:	b5 01       	movw	r22, r10
    16ae:	a8 01       	movw	r20, r16
    16b0:	97 01       	movw	r18, r14
    16b2:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    16b6:	c9 55       	subi	r28, 0x59	; 89
    16b8:	df 4f       	sbci	r29, 0xFF	; 255
    16ba:	68 83       	st	Y, r22
    16bc:	79 83       	std	Y+1, r23	; 0x01
    16be:	8a 83       	std	Y+2, r24	; 0x02
    16c0:	9b 83       	std	Y+3, r25	; 0x03
    16c2:	c7 5a       	subi	r28, 0xA7	; 167
    16c4:	d0 40       	sbci	r29, 0x00	; 0
    16c6:	fe 01       	movw	r30, r28
    16c8:	b9 96       	adiw	r30, 0x29	; 41
    16ca:	23 96       	adiw	r28, 0x03	; 3
    16cc:	ff af       	std	Y+63, r31	; 0x3f
    16ce:	ee af       	std	Y+62, r30	; 0x3e
    16d0:	23 97       	sbiw	r28, 0x03	; 3
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	c5 56       	subi	r28, 0x65	; 101
    16dc:	df 4f       	sbci	r29, 0xFF	; 255
    16de:	88 83       	st	Y, r24
    16e0:	99 83       	std	Y+1, r25	; 0x01
    16e2:	aa 83       	std	Y+2, r26	; 0x02
    16e4:	bb 83       	std	Y+3, r27	; 0x03
    16e6:	cb 59       	subi	r28, 0x9B	; 155
    16e8:	d0 40       	sbci	r29, 0x00	; 0
    16ea:	c9 56       	subi	r28, 0x69	; 105
    16ec:	df 4f       	sbci	r29, 0xFF	; 255
    16ee:	88 83       	st	Y, r24
    16f0:	99 83       	std	Y+1, r25	; 0x01
    16f2:	aa 83       	std	Y+2, r26	; 0x02
    16f4:	bb 83       	std	Y+3, r27	; 0x03
    16f6:	c7 59       	subi	r28, 0x97	; 151
    16f8:	d0 40       	sbci	r29, 0x00	; 0
    16fa:	cd 56       	subi	r28, 0x6D	; 109
    16fc:	df 4f       	sbci	r29, 0xFF	; 255
    16fe:	88 83       	st	Y, r24
    1700:	99 83       	std	Y+1, r25	; 0x01
    1702:	aa 83       	std	Y+2, r26	; 0x02
    1704:	bb 83       	std	Y+3, r27	; 0x03
    1706:	c3 59       	subi	r28, 0x93	; 147
    1708:	d0 40       	sbci	r29, 0x00	; 0
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	2a 96       	adiw	r28, 0x0a	; 10
    170e:	9f af       	std	Y+63, r25	; 0x3f
    1710:	2a 97       	sbiw	r28, 0x0a	; 10
    1712:	cd 51       	subi	r28, 0x1D	; 29
    1714:	df 4f       	sbci	r29, 0xFF	; 255
    1716:	18 82       	st	Y, r1
    1718:	c3 5e       	subi	r28, 0xE3	; 227
    171a:	d0 40       	sbci	r29, 0x00	; 0
    171c:	cc 51       	subi	r28, 0x1C	; 28
    171e:	df 4f       	sbci	r29, 0xFF	; 255
    1720:	18 82       	st	Y, r1
    1722:	c4 5e       	subi	r28, 0xE4	; 228
    1724:	d0 40       	sbci	r29, 0x00	; 0
    1726:	cb 51       	subi	r28, 0x1B	; 27
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	18 82       	st	Y, r1
    172c:	c5 5e       	subi	r28, 0xE5	; 229
    172e:	d0 40       	sbci	r29, 0x00	; 0
    1730:	ca 51       	subi	r28, 0x1A	; 26
    1732:	df 4f       	sbci	r29, 0xFF	; 255
    1734:	18 82       	st	Y, r1
    1736:	c6 5e       	subi	r28, 0xE6	; 230
    1738:	d0 40       	sbci	r29, 0x00	; 0
    173a:	6c 96       	adiw	r28, 0x1c	; 28
    173c:	1f ae       	std	Y+63, r1	; 0x3f
    173e:	1e ae       	std	Y+62, r1	; 0x3e
    1740:	6c 97       	sbiw	r28, 0x1c	; 28
    1742:	40 c2       	rjmp	.+1152   	; 0x1bc4 <__stack+0x10c5>

		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
    1744:	6a 96       	adiw	r28, 0x1a	; 26
    1746:	ae ad       	ldd	r26, Y+62	; 0x3e
    1748:	bf ad       	ldd	r27, Y+63	; 0x3f
    174a:	6a 97       	sbiw	r28, 0x1a	; 26
    174c:	6c 96       	adiw	r28, 0x1c	; 28
    174e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1750:	ff ad       	ldd	r31, Y+63	; 0x3f
    1752:	6c 97       	sbiw	r28, 0x1c	; 28
    1754:	ae 17       	cp	r26, r30
    1756:	bf 07       	cpc	r27, r31
    1758:	09 f4       	brne	.+2      	; 0x175c <__stack+0xc5d>
    175a:	01 c2       	rjmp	.+1026   	; 0x1b5e <__stack+0x105f>
    175c:	29 96       	adiw	r28, 0x09	; 9
    175e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1760:	3f ad       	ldd	r19, Y+63	; 0x3f
    1762:	29 97       	sbiw	r28, 0x09	; 9
    1764:	21 50       	subi	r18, 0x01	; 1
    1766:	30 4c       	sbci	r19, 0xC0	; 192
    1768:	22 0f       	add	r18, r18
    176a:	33 1f       	adc	r19, r19
    176c:	22 0f       	add	r18, r18
    176e:	33 1f       	adc	r19, r19
    1770:	89 e2       	ldi	r24, 0x29	; 41
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	8c 0f       	add	r24, r28
    1776:	9d 1f       	adc	r25, r29
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	66 96       	adiw	r28, 0x16	; 22
    177e:	9f af       	std	Y+63, r25	; 0x3f
    1780:	8e af       	std	Y+62, r24	; 0x3e
    1782:	66 97       	sbiw	r28, 0x16	; 22
    1784:	29 96       	adiw	r28, 0x09	; 9
    1786:	ae ad       	ldd	r26, Y+62	; 0x3e
    1788:	bf ad       	ldd	r27, Y+63	; 0x3f
    178a:	29 97       	sbiw	r28, 0x09	; 9
    178c:	64 96       	adiw	r28, 0x14	; 20
    178e:	bf af       	std	Y+63, r27	; 0x3f
    1790:	ae af       	std	Y+62, r26	; 0x3e
    1792:	64 97       	sbiw	r28, 0x14	; 20
    1794:	fe 01       	movw	r30, r28
    1796:	b9 96       	adiw	r30, 0x29	; 41
    1798:	62 96       	adiw	r28, 0x12	; 18
    179a:	ff af       	std	Y+63, r31	; 0x3f
    179c:	ee af       	std	Y+62, r30	; 0x3e
    179e:	62 97       	sbiw	r28, 0x12	; 18
    17a0:	68 96       	adiw	r28, 0x18	; 24
    17a2:	1f ae       	std	Y+63, r1	; 0x3f
    17a4:	1e ae       	std	Y+62, r1	; 0x3e
    17a6:	68 97       	sbiw	r28, 0x18	; 24
							if(first || err < min_err)
							{
								min_err = err;
								first = false;
								order[0] = i + 1;
								order[1] = j + 1;
    17a8:	6a 96       	adiw	r28, 0x1a	; 26
    17aa:	2e ad       	ldd	r18, Y+62	; 0x3e
    17ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    17ae:	6a 97       	sbiw	r28, 0x1a	; 26
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	c5 52       	subi	r28, 0x25	; 37
    17b6:	df 4f       	sbci	r29, 0xFF	; 255
    17b8:	39 83       	std	Y+1, r19	; 0x01
    17ba:	28 83       	st	Y, r18
    17bc:	cb 5d       	subi	r28, 0xDB	; 219
    17be:	d0 40       	sbci	r29, 0x00	; 0
			{
				if(j!= i)
				{
					for(int k = 0; k < 4; k++)
					{
						if(k!= i && k!= j)
    17c0:	68 96       	adiw	r28, 0x18	; 24
    17c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    17c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    17c6:	68 97       	sbiw	r28, 0x18	; 24
    17c8:	6c 96       	adiw	r28, 0x1c	; 28
    17ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    17cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    17ce:	6c 97       	sbiw	r28, 0x1c	; 28
    17d0:	8a 17       	cp	r24, r26
    17d2:	9b 07       	cpc	r25, r27
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <__stack+0xcd9>
    17d6:	9b c1       	rjmp	.+822    	; 0x1b0e <__stack+0x100f>
    17d8:	6a 96       	adiw	r28, 0x1a	; 26
    17da:	ee ad       	ldd	r30, Y+62	; 0x3e
    17dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    17de:	6a 97       	sbiw	r28, 0x1a	; 26
    17e0:	8e 17       	cp	r24, r30
    17e2:	9f 07       	cpc	r25, r31
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <__stack+0xce9>
    17e6:	93 c1       	rjmp	.+806    	; 0x1b0e <__stack+0x100f>
						{
							int l = 10 - (i + j + k);
							double err = sq(diord[0] - dord[i]) + sq(diord[1] - dord[j]) + sq(diord[2] - dord[k]) + sq(diord[3] - dord[l]);
    17e8:	cd 54       	subi	r28, 0x4D	; 77
    17ea:	df 4f       	sbci	r29, 0xFF	; 255
    17ec:	68 81       	ld	r22, Y
    17ee:	79 81       	ldd	r23, Y+1	; 0x01
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	c3 5b       	subi	r28, 0xB3	; 179
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	23 96       	adiw	r28, 0x03	; 3
    17fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    17fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    17fe:	23 97       	sbiw	r28, 0x03	; 3
    1800:	2d 91       	ld	r18, X+
    1802:	3d 91       	ld	r19, X+
    1804:	4d 91       	ld	r20, X+
    1806:	5c 91       	ld	r21, X
    1808:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    180c:	7b 01       	movw	r14, r22
    180e:	8c 01       	movw	r16, r24
    1810:	c1 55       	subi	r28, 0x51	; 81
    1812:	df 4f       	sbci	r29, 0xFF	; 255
    1814:	68 81       	ld	r22, Y
    1816:	79 81       	ldd	r23, Y+1	; 0x01
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	9b 81       	ldd	r25, Y+3	; 0x03
    181c:	cf 5a       	subi	r28, 0xAF	; 175
    181e:	d0 40       	sbci	r29, 0x00	; 0
    1820:	21 96       	adiw	r28, 0x01	; 1
    1822:	ee ad       	ldd	r30, Y+62	; 0x3e
    1824:	ff ad       	ldd	r31, Y+63	; 0x3f
    1826:	21 97       	sbiw	r28, 0x01	; 1
    1828:	20 81       	ld	r18, Z
    182a:	31 81       	ldd	r19, Z+1	; 0x01
    182c:	42 81       	ldd	r20, Z+2	; 0x02
    182e:	53 81       	ldd	r21, Z+3	; 0x03
    1830:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1834:	5b 01       	movw	r10, r22
    1836:	6c 01       	movw	r12, r24
    1838:	c5 55       	subi	r28, 0x55	; 85
    183a:	df 4f       	sbci	r29, 0xFF	; 255
    183c:	68 81       	ld	r22, Y
    183e:	79 81       	ldd	r23, Y+1	; 0x01
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	cb 5a       	subi	r28, 0xAB	; 171
    1846:	d0 40       	sbci	r29, 0x00	; 0
    1848:	62 96       	adiw	r28, 0x12	; 18
    184a:	ae ad       	ldd	r26, Y+62	; 0x3e
    184c:	bf ad       	ldd	r27, Y+63	; 0x3f
    184e:	62 97       	sbiw	r28, 0x12	; 18
    1850:	2d 91       	ld	r18, X+
    1852:	3d 91       	ld	r19, X+
    1854:	4d 91       	ld	r20, X+
    1856:	5c 91       	ld	r21, X
    1858:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    185c:	3b 01       	movw	r6, r22
    185e:	4c 01       	movw	r8, r24
    1860:	c9 55       	subi	r28, 0x59	; 89
    1862:	df 4f       	sbci	r29, 0xFF	; 255
    1864:	68 81       	ld	r22, Y
    1866:	79 81       	ldd	r23, Y+1	; 0x01
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	9b 81       	ldd	r25, Y+3	; 0x03
    186c:	c7 5a       	subi	r28, 0xA7	; 167
    186e:	d0 40       	sbci	r29, 0x00	; 0
    1870:	66 96       	adiw	r28, 0x16	; 22
    1872:	ee ad       	ldd	r30, Y+62	; 0x3e
    1874:	ff ad       	ldd	r31, Y+63	; 0x3f
    1876:	66 97       	sbiw	r28, 0x16	; 22
    1878:	20 81       	ld	r18, Z
    187a:	31 81       	ldd	r19, Z+1	; 0x01
    187c:	42 81       	ldd	r20, Z+2	; 0x02
    187e:	53 81       	ldd	r21, Z+3	; 0x03
    1880:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1884:	1b 01       	movw	r2, r22
    1886:	2c 01       	movw	r4, r24
    1888:	c8 01       	movw	r24, r16
    188a:	b7 01       	movw	r22, r14
    188c:	a8 01       	movw	r20, r16
    188e:	97 01       	movw	r18, r14
    1890:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1894:	7b 01       	movw	r14, r22
    1896:	8c 01       	movw	r16, r24
    1898:	c6 01       	movw	r24, r12
    189a:	b5 01       	movw	r22, r10
    189c:	a6 01       	movw	r20, r12
    189e:	95 01       	movw	r18, r10
    18a0:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    18a4:	9b 01       	movw	r18, r22
    18a6:	ac 01       	movw	r20, r24
    18a8:	c8 01       	movw	r24, r16
    18aa:	b7 01       	movw	r22, r14
    18ac:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    18b0:	7b 01       	movw	r14, r22
    18b2:	8c 01       	movw	r16, r24
    18b4:	c4 01       	movw	r24, r8
    18b6:	b3 01       	movw	r22, r6
    18b8:	a4 01       	movw	r20, r8
    18ba:	93 01       	movw	r18, r6
    18bc:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    18c0:	9b 01       	movw	r18, r22
    18c2:	ac 01       	movw	r20, r24
    18c4:	c8 01       	movw	r24, r16
    18c6:	b7 01       	movw	r22, r14
    18c8:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    18cc:	7b 01       	movw	r14, r22
    18ce:	8c 01       	movw	r16, r24
    18d0:	c2 01       	movw	r24, r4
    18d2:	b1 01       	movw	r22, r2
    18d4:	a2 01       	movw	r20, r4
    18d6:	91 01       	movw	r18, r2
    18d8:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    18dc:	9b 01       	movw	r18, r22
    18de:	ac 01       	movw	r20, r24
    18e0:	c8 01       	movw	r24, r16
    18e2:	b7 01       	movw	r22, r14
    18e4:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    18e8:	2b 01       	movw	r4, r22
    18ea:	3c 01       	movw	r6, r24
							if(first || err < min_err)
    18ec:	2a 96       	adiw	r28, 0x0a	; 10
    18ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    18f0:	2a 97       	sbiw	r28, 0x0a	; 10
    18f2:	ff 23       	and	r31, r31
    18f4:	c9 f4       	brne	.+50     	; 0x1928 <__stack+0xe29>
    18f6:	cd 51       	subi	r28, 0x1D	; 29
    18f8:	df 4f       	sbci	r29, 0xFF	; 255
    18fa:	28 81       	ld	r18, Y
    18fc:	c3 5e       	subi	r28, 0xE3	; 227
    18fe:	d0 40       	sbci	r29, 0x00	; 0
    1900:	cc 51       	subi	r28, 0x1C	; 28
    1902:	df 4f       	sbci	r29, 0xFF	; 255
    1904:	38 81       	ld	r19, Y
    1906:	c4 5e       	subi	r28, 0xE4	; 228
    1908:	d0 40       	sbci	r29, 0x00	; 0
    190a:	cb 51       	subi	r28, 0x1B	; 27
    190c:	df 4f       	sbci	r29, 0xFF	; 255
    190e:	48 81       	ld	r20, Y
    1910:	c5 5e       	subi	r28, 0xE5	; 229
    1912:	d0 40       	sbci	r29, 0x00	; 0
    1914:	ca 51       	subi	r28, 0x1A	; 26
    1916:	df 4f       	sbci	r29, 0xFF	; 255
    1918:	58 81       	ld	r21, Y
    191a:	c6 5e       	subi	r28, 0xE6	; 230
    191c:	d0 40       	sbci	r29, 0x00	; 0
    191e:	0e 94 46 1c 	call	0x388c	; 0x388c <__cmpsf2>
    1922:	88 23       	and	r24, r24
    1924:	0c f0       	brlt	.+2      	; 0x1928 <__stack+0xe29>
    1926:	f3 c0       	rjmp	.+486    	; 0x1b0e <__stack+0x100f>
							{
								min_err = err;
								first = false;
								order[0] = i + 1;
    1928:	c3 52       	subi	r28, 0x23	; 35
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	28 81       	ld	r18, Y
    192e:	39 81       	ldd	r19, Y+1	; 0x01
    1930:	cd 5d       	subi	r28, 0xDD	; 221
    1932:	d0 40       	sbci	r29, 0x00	; 0
    1934:	3a 83       	std	Y+2, r19	; 0x02
    1936:	29 83       	std	Y+1, r18	; 0x01
								order[1] = j + 1;
    1938:	c5 52       	subi	r28, 0x25	; 37
    193a:	df 4f       	sbci	r29, 0xFF	; 255
    193c:	88 81       	ld	r24, Y
    193e:	99 81       	ldd	r25, Y+1	; 0x01
    1940:	cb 5d       	subi	r28, 0xDB	; 219
    1942:	d0 40       	sbci	r29, 0x00	; 0
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
								order[2] = k + 1;
    1948:	68 96       	adiw	r28, 0x18	; 24
    194a:	ae ad       	ldd	r26, Y+62	; 0x3e
    194c:	bf ad       	ldd	r27, Y+63	; 0x3f
    194e:	68 97       	sbiw	r28, 0x18	; 24
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	be 83       	std	Y+6, r27	; 0x06
    1954:	ad 83       	std	Y+5, r26	; 0x05
    1956:	11 97       	sbiw	r26, 0x01	; 1
    1958:	68 96       	adiw	r28, 0x18	; 24
    195a:	bf af       	std	Y+63, r27	; 0x3f
    195c:	ae af       	std	Y+62, r26	; 0x3e
    195e:	68 97       	sbiw	r28, 0x18	; 24
								order[3] = l + 1;
    1960:	64 96       	adiw	r28, 0x14	; 20
    1962:	ee ad       	ldd	r30, Y+62	; 0x3e
    1964:	ff ad       	ldd	r31, Y+63	; 0x3f
    1966:	64 97       	sbiw	r28, 0x14	; 20
    1968:	f8 87       	std	Y+8, r31	; 0x08
    196a:	ef 83       	std	Y+7, r30	; 0x07
    196c:	fe 01       	movw	r30, r28
    196e:	31 96       	adiw	r30, 0x01	; 1
    1970:	ee 24       	eor	r14, r14
    1972:	ff 24       	eor	r15, r15
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0

								int pos = 0;

								for(int ii = 0; ii < 4; ii++)
								{
									if(order[ii] == 1)
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	09 f4       	brne	.+2      	; 0x1982 <__stack+0xe83>
    1980:	79 01       	movw	r14, r18
								order[3] = l + 1;


								int pos = 0;

								for(int ii = 0; ii < 4; ii++)
    1982:	2f 5f       	subi	r18, 0xFF	; 255
    1984:	3f 4f       	sbci	r19, 0xFF	; 255
    1986:	32 96       	adiw	r30, 0x02	; 2
    1988:	24 30       	cpi	r18, 0x04	; 4
    198a:	31 05       	cpc	r19, r1
    198c:	a9 f7       	brne	.-22     	; 0x1978 <__stack+0xe79>
									}
								}
	
								double theta_rot_off = -1.667782601220809;
								double thetaf = theta_rot_off - atan2(y1 - yavg, x1 - xavg);
								double dCenter = di1 / d1 * d(xavg, yavg, 0, 0);
    198e:	a0 96       	adiw	r28, 0x20	; 32
    1990:	6c ad       	ldd	r22, Y+60	; 0x3c
    1992:	7d ad       	ldd	r23, Y+61	; 0x3d
    1994:	8e ad       	ldd	r24, Y+62	; 0x3e
    1996:	9f ad       	ldd	r25, Y+63	; 0x3f
    1998:	a0 97       	sbiw	r28, 0x20	; 32
    199a:	2d ea       	ldi	r18, 0xAD	; 173
    199c:	37 e2       	ldi	r19, 0x27	; 39
    199e:	4b e3       	ldi	r20, 0x3B	; 59
    19a0:	51 e4       	ldi	r21, 0x41	; 65
    19a2:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    19a6:	23 e9       	ldi	r18, 0x93	; 147
    19a8:	3e e6       	ldi	r19, 0x6E	; 110
    19aa:	44 e3       	ldi	r20, 0x34	; 52
    19ac:	50 e4       	ldi	r21, 0x40	; 64
    19ae:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    19b2:	4b 01       	movw	r8, r22
    19b4:	5c 01       	movw	r10, r24
																
								
								int xp = inp[pos * 3];
								int yp = inp[pos * 3 + 1];
								double theta2 = atan2((double)(yp) - yiavg, (double)(xp) - xiavg);
    19b6:	87 01       	movw	r16, r14
    19b8:	00 0f       	add	r16, r16
    19ba:	11 1f       	adc	r17, r17
    19bc:	0e 0d       	add	r16, r14
    19be:	1f 1d       	adc	r17, r15
    19c0:	f8 01       	movw	r30, r16
    19c2:	31 96       	adiw	r30, 0x01	; 1
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	cd 52       	subi	r28, 0x2D	; 45
    19ca:	df 4f       	sbci	r29, 0xFF	; 255
    19cc:	28 81       	ld	r18, Y
    19ce:	39 81       	ldd	r19, Y+1	; 0x01
    19d0:	c3 5d       	subi	r28, 0xD3	; 211
    19d2:	d0 40       	sbci	r29, 0x00	; 0
    19d4:	e2 0f       	add	r30, r18
    19d6:	f3 1f       	adc	r31, r19
    19d8:	60 81       	ld	r22, Z
    19da:	71 81       	ldd	r23, Z+1	; 0x01
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    19e8:	a4 96       	adiw	r28, 0x24	; 36
    19ea:	2c ad       	ldd	r18, Y+60	; 0x3c
    19ec:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ee:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f0:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f2:	a4 97       	sbiw	r28, 0x24	; 36
    19f4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    19f8:	6b 01       	movw	r12, r22
    19fa:	7c 01       	movw	r14, r24
    19fc:	00 0f       	add	r16, r16
    19fe:	11 1f       	adc	r17, r17
    1a00:	cd 52       	subi	r28, 0x2D	; 45
    1a02:	df 4f       	sbci	r29, 0xFF	; 255
    1a04:	88 81       	ld	r24, Y
    1a06:	99 81       	ldd	r25, Y+1	; 0x01
    1a08:	c3 5d       	subi	r28, 0xD3	; 211
    1a0a:	d0 40       	sbci	r29, 0x00	; 0
    1a0c:	08 0f       	add	r16, r24
    1a0e:	19 1f       	adc	r17, r25
    1a10:	d8 01       	movw	r26, r16
    1a12:	6d 91       	ld	r22, X+
    1a14:	7c 91       	ld	r23, X
    1a16:	88 27       	eor	r24, r24
    1a18:	77 fd       	sbrc	r23, 7
    1a1a:	80 95       	com	r24
    1a1c:	98 2f       	mov	r25, r24
    1a1e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    1a22:	a8 96       	adiw	r28, 0x28	; 40
    1a24:	2c ad       	ldd	r18, Y+60	; 0x3c
    1a26:	3d ad       	ldd	r19, Y+61	; 0x3d
    1a28:	4e ad       	ldd	r20, Y+62	; 0x3e
    1a2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a2c:	a8 97       	sbiw	r28, 0x28	; 40
    1a2e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1a32:	9b 01       	movw	r18, r22
    1a34:	ac 01       	movw	r20, r24
    1a36:	c7 01       	movw	r24, r14
    1a38:	b6 01       	movw	r22, r12
    1a3a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>

								theta_rot = theta2 + thetaf - theta_rot_off;
    1a3e:	2c e4       	ldi	r18, 0x4C	; 76
    1a40:	33 ec       	ldi	r19, 0xC3	; 195
    1a42:	40 e5       	ldi	r20, 0x50	; 80
    1a44:	50 e4       	ldi	r21, 0x40	; 64
    1a46:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1a4a:	26 ee       	ldi	r18, 0xE6	; 230
    1a4c:	39 e7       	ldi	r19, 0x79	; 121
    1a4e:	45 ed       	ldi	r20, 0xD5	; 213
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1a56:	cd 56       	subi	r28, 0x6D	; 109
    1a58:	df 4f       	sbci	r29, 0xFF	; 255
    1a5a:	68 83       	st	Y, r22
    1a5c:	79 83       	std	Y+1, r23	; 0x01
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
    1a60:	9b 83       	std	Y+3, r25	; 0x03
    1a62:	c3 59       	subi	r28, 0x93	; 147
    1a64:	d0 40       	sbci	r29, 0x00	; 0
								x0 = xiavg + cos(theta_rot_off + theta_rot) * dCenter;
    1a66:	26 ee       	ldi	r18, 0xE6	; 230
    1a68:	39 e7       	ldi	r19, 0x79	; 121
    1a6a:	45 ed       	ldi	r20, 0xD5	; 213
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1a72:	7b 01       	movw	r14, r22
    1a74:	8c 01       	movw	r16, r24
    1a76:	c8 01       	movw	r24, r16
    1a78:	0e 94 4a 1c 	call	0x3894	; 0x3894 <cos>
    1a7c:	a5 01       	movw	r20, r10
    1a7e:	94 01       	movw	r18, r8
    1a80:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	a8 96       	adiw	r28, 0x28	; 40
    1a8a:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a8c:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a90:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a92:	a8 97       	sbiw	r28, 0x28	; 40
    1a94:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1a98:	c5 56       	subi	r28, 0x65	; 101
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	68 83       	st	Y, r22
    1a9e:	79 83       	std	Y+1, r23	; 0x01
    1aa0:	8a 83       	std	Y+2, r24	; 0x02
    1aa2:	9b 83       	std	Y+3, r25	; 0x03
    1aa4:	cb 59       	subi	r28, 0x9B	; 155
    1aa6:	d0 40       	sbci	r29, 0x00	; 0
								y0 = yiavg + sin(theta_rot_off + theta_rot) * dCenter;
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	c8 01       	movw	r24, r16
    1aac:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <sin>
    1ab0:	a5 01       	movw	r20, r10
    1ab2:	94 01       	movw	r18, r8
    1ab4:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	a4 96       	adiw	r28, 0x24	; 36
    1abe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ac0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ac2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ac4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ac6:	a4 97       	sbiw	r28, 0x24	; 36
    1ac8:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1acc:	c9 56       	subi	r28, 0x69	; 105
    1ace:	df 4f       	sbci	r29, 0xFF	; 255
    1ad0:	68 83       	st	Y, r22
    1ad2:	79 83       	std	Y+1, r23	; 0x01
    1ad4:	8a 83       	std	Y+2, r24	; 0x02
    1ad6:	9b 83       	std	Y+3, r25	; 0x03
    1ad8:	c7 59       	subi	r28, 0x97	; 151
    1ada:	d0 40       	sbci	r29, 0x00	; 0
    1adc:	d3 01       	movw	r26, r6
    1ade:	c2 01       	movw	r24, r4
    1ae0:	cd 51       	subi	r28, 0x1D	; 29
    1ae2:	df 4f       	sbci	r29, 0xFF	; 255
    1ae4:	48 82       	st	Y, r4
    1ae6:	c3 5e       	subi	r28, 0xE3	; 227
    1ae8:	d0 40       	sbci	r29, 0x00	; 0
    1aea:	cc 51       	subi	r28, 0x1C	; 28
    1aec:	df 4f       	sbci	r29, 0xFF	; 255
    1aee:	98 83       	st	Y, r25
    1af0:	c4 5e       	subi	r28, 0xE4	; 228
    1af2:	d0 40       	sbci	r29, 0x00	; 0
    1af4:	cb 51       	subi	r28, 0x1B	; 27
    1af6:	df 4f       	sbci	r29, 0xFF	; 255
    1af8:	a8 83       	st	Y, r26
    1afa:	c5 5e       	subi	r28, 0xE5	; 229
    1afc:	d0 40       	sbci	r29, 0x00	; 0
    1afe:	ca 51       	subi	r28, 0x1A	; 26
    1b00:	df 4f       	sbci	r29, 0xFF	; 255
    1b02:	b8 83       	st	Y, r27
    1b04:	c6 5e       	subi	r28, 0xE6	; 230
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	2a 96       	adiw	r28, 0x0a	; 10
    1b0a:	1f ae       	std	Y+63, r1	; 0x3f
    1b0c:	2a 97       	sbiw	r28, 0x0a	; 10
		{
			for(int j = 0; j < 4; j++)
			{
				if(j!= i)
				{
					for(int k = 0; k < 4; k++)
    1b0e:	68 96       	adiw	r28, 0x18	; 24
    1b10:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b12:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b14:	68 97       	sbiw	r28, 0x18	; 24
    1b16:	31 96       	adiw	r30, 0x01	; 1
    1b18:	68 96       	adiw	r28, 0x18	; 24
    1b1a:	ff af       	std	Y+63, r31	; 0x3f
    1b1c:	ee af       	std	Y+62, r30	; 0x3e
    1b1e:	68 97       	sbiw	r28, 0x18	; 24
    1b20:	64 96       	adiw	r28, 0x14	; 20
    1b22:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b24:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b26:	64 97       	sbiw	r28, 0x14	; 20
    1b28:	21 50       	subi	r18, 0x01	; 1
    1b2a:	30 40       	sbci	r19, 0x00	; 0
    1b2c:	64 96       	adiw	r28, 0x14	; 20
    1b2e:	3f af       	std	Y+63, r19	; 0x3f
    1b30:	2e af       	std	Y+62, r18	; 0x3e
    1b32:	64 97       	sbiw	r28, 0x14	; 20
    1b34:	62 96       	adiw	r28, 0x12	; 18
    1b36:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b38:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b3a:	62 97       	sbiw	r28, 0x12	; 18
    1b3c:	04 96       	adiw	r24, 0x04	; 4
    1b3e:	62 96       	adiw	r28, 0x12	; 18
    1b40:	9f af       	std	Y+63, r25	; 0x3f
    1b42:	8e af       	std	Y+62, r24	; 0x3e
    1b44:	62 97       	sbiw	r28, 0x12	; 18
    1b46:	66 96       	adiw	r28, 0x16	; 22
    1b48:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b4a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b4c:	66 97       	sbiw	r28, 0x16	; 22
    1b4e:	14 97       	sbiw	r26, 0x04	; 4
    1b50:	66 96       	adiw	r28, 0x16	; 22
    1b52:	bf af       	std	Y+63, r27	; 0x3f
    1b54:	ae af       	std	Y+62, r26	; 0x3e
    1b56:	66 97       	sbiw	r28, 0x16	; 22
    1b58:	34 97       	sbiw	r30, 0x04	; 4
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <__stack+0x105f>
    1b5c:	31 ce       	rjmp	.-926    	; 0x17c0 <__stack+0xcc1>
		diord[2] = di3/mini;
		diord[3] = di4/mini;

		for(int i = 0; i < 4; i++)
		{
			for(int j = 0; j < 4; j++)
    1b5e:	6a 96       	adiw	r28, 0x1a	; 26
    1b60:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b62:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b64:	6a 97       	sbiw	r28, 0x1a	; 26
    1b66:	31 96       	adiw	r30, 0x01	; 1
    1b68:	6a 96       	adiw	r28, 0x1a	; 26
    1b6a:	ff af       	std	Y+63, r31	; 0x3f
    1b6c:	ee af       	std	Y+62, r30	; 0x3e
    1b6e:	6a 97       	sbiw	r28, 0x1a	; 26
    1b70:	29 96       	adiw	r28, 0x09	; 9
    1b72:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b74:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b76:	29 97       	sbiw	r28, 0x09	; 9
    1b78:	21 50       	subi	r18, 0x01	; 1
    1b7a:	30 40       	sbci	r19, 0x00	; 0
    1b7c:	29 96       	adiw	r28, 0x09	; 9
    1b7e:	3f af       	std	Y+63, r19	; 0x3f
    1b80:	2e af       	std	Y+62, r18	; 0x3e
    1b82:	29 97       	sbiw	r28, 0x09	; 9
    1b84:	21 96       	adiw	r28, 0x01	; 1
    1b86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b8a:	21 97       	sbiw	r28, 0x01	; 1
    1b8c:	04 96       	adiw	r24, 0x04	; 4
    1b8e:	21 96       	adiw	r28, 0x01	; 1
    1b90:	9f af       	std	Y+63, r25	; 0x3f
    1b92:	8e af       	std	Y+62, r24	; 0x3e
    1b94:	21 97       	sbiw	r28, 0x01	; 1
    1b96:	34 97       	sbiw	r30, 0x04	; 4
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <__stack+0x109d>
    1b9a:	d4 cd       	rjmp	.-1112   	; 0x1744 <__stack+0xc45>
		diord[0] = di1/mini;
		diord[1] = di2/mini;
		diord[2] = di3/mini;
		diord[3] = di4/mini;

		for(int i = 0; i < 4; i++)
    1b9c:	6c 96       	adiw	r28, 0x1c	; 28
    1b9e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ba0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ba2:	6c 97       	sbiw	r28, 0x1c	; 28
    1ba4:	11 96       	adiw	r26, 0x01	; 1
    1ba6:	6c 96       	adiw	r28, 0x1c	; 28
    1ba8:	bf af       	std	Y+63, r27	; 0x3f
    1baa:	ae af       	std	Y+62, r26	; 0x3e
    1bac:	6c 97       	sbiw	r28, 0x1c	; 28
    1bae:	23 96       	adiw	r28, 0x03	; 3
    1bb0:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bb2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bb4:	23 97       	sbiw	r28, 0x03	; 3
    1bb6:	34 96       	adiw	r30, 0x04	; 4
    1bb8:	23 96       	adiw	r28, 0x03	; 3
    1bba:	ff af       	std	Y+63, r31	; 0x3f
    1bbc:	ee af       	std	Y+62, r30	; 0x3e
    1bbe:	23 97       	sbiw	r28, 0x03	; 3
    1bc0:	14 97       	sbiw	r26, 0x04	; 4
    1bc2:	f1 f0       	breq	.+60     	; 0x1c00 <__stack+0x1101>
double min3(double a, double b, double c);
double min4(double a, double b, double c, double d);


void get_position(unsigned int* inp, double* xo, double* yo, double* to)
{
    1bc4:	2b e0       	ldi	r18, 0x0B	; 11
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	6c 96       	adiw	r28, 0x1c	; 28
    1bca:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bce:	6c 97       	sbiw	r28, 0x1c	; 28
    1bd0:	28 1b       	sub	r18, r24
    1bd2:	39 0b       	sbc	r19, r25
    1bd4:	29 96       	adiw	r28, 0x09	; 9
    1bd6:	3f af       	std	Y+63, r19	; 0x3f
    1bd8:	2e af       	std	Y+62, r18	; 0x3e
    1bda:	29 97       	sbiw	r28, 0x09	; 9
    1bdc:	de 01       	movw	r26, r28
    1bde:	99 96       	adiw	r26, 0x29	; 41
    1be0:	21 96       	adiw	r28, 0x01	; 1
    1be2:	bf af       	std	Y+63, r27	; 0x3f
    1be4:	ae af       	std	Y+62, r26	; 0x3e
    1be6:	21 97       	sbiw	r28, 0x01	; 1
    1be8:	6a 96       	adiw	r28, 0x1a	; 26
    1bea:	1f ae       	std	Y+63, r1	; 0x3f
    1bec:	1e ae       	std	Y+62, r1	; 0x3e
    1bee:	6a 97       	sbiw	r28, 0x1a	; 26
							double err = sq(diord[0] - dord[i]) + sq(diord[1] - dord[j]) + sq(diord[2] - dord[k]) + sq(diord[3] - dord[l]);
							if(first || err < min_err)
							{
								min_err = err;
								first = false;
								order[0] = i + 1;
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	c3 52       	subi	r28, 0x23	; 35
    1bf4:	df 4f       	sbci	r29, 0xFF	; 255
    1bf6:	99 83       	std	Y+1, r25	; 0x01
    1bf8:	88 83       	st	Y, r24
    1bfa:	cd 5d       	subi	r28, 0xDD	; 221
    1bfc:	d0 40       	sbci	r29, 0x00	; 0
    1bfe:	a2 cd       	rjmp	.-1212   	; 0x1744 <__stack+0xc45>

	int pos = 0;
	int sum = 0;
	double scale = 0;
	for(int i = 0; i < 4; i++)
		sum += order[i];
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	82 0f       	add	r24, r18
    1c0a:	93 1f       	adc	r25, r19
    1c0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c10:	82 0f       	add	r24, r18
    1c12:	93 1f       	adc	r25, r19
	if(sum == 9)
    1c14:	2f 81       	ldd	r18, Y+7	; 0x07
    1c16:	38 85       	ldd	r19, Y+8	; 0x08
    1c18:	82 0f       	add	r24, r18
    1c1a:	93 1f       	adc	r25, r19
    1c1c:	9e 01       	movw	r18, r28
    1c1e:	2f 5f       	subi	r18, 0xFF	; 255
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	09 97       	sbiw	r24, 0x09	; 9
    1c24:	89 f4       	brne	.+34     	; 0x1c48 <__stack+0x1149>
    1c26:	f9 01       	movw	r30, r18
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
	{
		for(int ii = 0; ii < 4; ii++)
		{
			if(order[ii] == 3)
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	03 97       	sbiw	r24, 0x03	; 3
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <__stack+0x113b>
    1c38:	a9 01       	movw	r20, r18
	double scale = 0;
	for(int i = 0; i < 4; i++)
		sum += order[i];
	if(sum == 9)
	{
		for(int ii = 0; ii < 4; ii++)
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	32 96       	adiw	r30, 0x02	; 2
    1c40:	24 30       	cpi	r18, 0x04	; 4
    1c42:	31 05       	cpc	r19, r1
    1c44:	a9 f7       	brne	.-22     	; 0x1c30 <__stack+0x1131>
    1c46:	10 c0       	rjmp	.+32     	; 0x1c68 <__stack+0x1169>
		{
			if(order[ii] == 3)
				pos = ii;
		}
		scale = d(x3,y3,0,0) / d(x0,y0, inp[pos * 3 ], inp[pos * 3 + 1]);
    1c48:	f9 01       	movw	r30, r18
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		for(int ii =0; ii < 4; ii++)
		{
			if(order[ii] == 1)
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <__stack+0x115d>
    1c5a:	a9 01       	movw	r20, r18
		}
		scale = d(x3,y3,0,0) / d(x0,y0, inp[pos * 3 ], inp[pos * 3 + 1]);
	}
	else
	{
		for(int ii =0; ii < 4; ii++)
    1c5c:	2f 5f       	subi	r18, 0xFF	; 255
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	32 96       	adiw	r30, 0x02	; 2
    1c62:	24 30       	cpi	r18, 0x04	; 4
    1c64:	31 05       	cpc	r19, r1
    1c66:	a9 f7       	brne	.-22     	; 0x1c52 <__stack+0x1153>
		{
			if(order[ii] == 1)
				pos = ii;
		}
		scale = d(x1,y1,0,0) / d(x0,y0, inp[pos * 3 ], inp[pos * 3 + 1]);
    1c68:	8a 01       	movw	r16, r20
    1c6a:	00 0f       	add	r16, r16
    1c6c:	11 1f       	adc	r17, r17
    1c6e:	04 0f       	add	r16, r20
    1c70:	15 1f       	adc	r17, r21
    1c72:	f8 01       	movw	r30, r16
    1c74:	ee 0f       	add	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	cd 52       	subi	r28, 0x2D	; 45
    1c7a:	df 4f       	sbci	r29, 0xFF	; 255
    1c7c:	28 81       	ld	r18, Y
    1c7e:	39 81       	ldd	r19, Y+1	; 0x01
    1c80:	c3 5d       	subi	r28, 0xD3	; 211
    1c82:	d0 40       	sbci	r29, 0x00	; 0
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatunsisf>
    1c94:	9b 01       	movw	r18, r22
    1c96:	ac 01       	movw	r20, r24
    1c98:	c5 56       	subi	r28, 0x65	; 101
    1c9a:	df 4f       	sbci	r29, 0xFF	; 255
    1c9c:	68 81       	ld	r22, Y
    1c9e:	79 81       	ldd	r23, Y+1	; 0x01
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca4:	cb 59       	subi	r28, 0x9B	; 155
    1ca6:	d0 40       	sbci	r29, 0x00	; 0
    1ca8:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1cac:	5b 01       	movw	r10, r22
    1cae:	6c 01       	movw	r12, r24
    1cb0:	0f 5f       	subi	r16, 0xFF	; 255
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb4:	00 0f       	add	r16, r16
    1cb6:	11 1f       	adc	r17, r17
    1cb8:	cd 52       	subi	r28, 0x2D	; 45
    1cba:	df 4f       	sbci	r29, 0xFF	; 255
    1cbc:	88 81       	ld	r24, Y
    1cbe:	99 81       	ldd	r25, Y+1	; 0x01
    1cc0:	c3 5d       	subi	r28, 0xD3	; 211
    1cc2:	d0 40       	sbci	r29, 0x00	; 0
    1cc4:	08 0f       	add	r16, r24
    1cc6:	19 1f       	adc	r17, r25
    1cc8:	d8 01       	movw	r26, r16
    1cca:	6d 91       	ld	r22, X+
    1ccc:	7c 91       	ld	r23, X
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__floatunsisf>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c9 56       	subi	r28, 0x69	; 105
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	68 81       	ld	r22, Y
    1ce0:	79 81       	ldd	r23, Y+1	; 0x01
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	c7 59       	subi	r28, 0x97	; 151
    1ce8:	d0 40       	sbci	r29, 0x00	; 0
    1cea:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1cee:	7b 01       	movw	r14, r22
    1cf0:	8c 01       	movw	r16, r24
    1cf2:	c6 01       	movw	r24, r12
    1cf4:	b5 01       	movw	r22, r10
    1cf6:	a6 01       	movw	r20, r12
    1cf8:	95 01       	movw	r18, r10
    1cfa:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1cfe:	5b 01       	movw	r10, r22
    1d00:	6c 01       	movw	r12, r24
    1d02:	c8 01       	movw	r24, r16
    1d04:	b7 01       	movw	r22, r14
    1d06:	a8 01       	movw	r20, r16
    1d08:	97 01       	movw	r18, r14
    1d0a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1d0e:	9b 01       	movw	r18, r22
    1d10:	ac 01       	movw	r20, r24
    1d12:	c6 01       	movw	r24, r12
    1d14:	b5 01       	movw	r22, r10
    1d16:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1d1a:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	88 e6       	ldi	r24, 0x68	; 104
    1d28:	91 e4       	ldi	r25, 0x41	; 65
    1d2a:	0e 94 4d 1c 	call	0x389a	; 0x389a <__divsf3>
    1d2e:	1b 01       	movw	r2, r22
    1d30:	2c 01       	movw	r4, r24
	}
	
	double theta = theta_rot;
	double dist = d(x_init, y_init, x0,y0);
    1d32:	60 91 5f 01 	lds	r22, 0x015F
    1d36:	70 91 60 01 	lds	r23, 0x0160
    1d3a:	88 27       	eor	r24, r24
    1d3c:	77 fd       	sbrc	r23, 7
    1d3e:	80 95       	com	r24
    1d40:	98 2f       	mov	r25, r24
    1d42:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    1d46:	c5 56       	subi	r28, 0x65	; 101
    1d48:	df 4f       	sbci	r29, 0xFF	; 255
    1d4a:	28 81       	ld	r18, Y
    1d4c:	39 81       	ldd	r19, Y+1	; 0x01
    1d4e:	4a 81       	ldd	r20, Y+2	; 0x02
    1d50:	5b 81       	ldd	r21, Y+3	; 0x03
    1d52:	cb 59       	subi	r28, 0x9B	; 155
    1d54:	d0 40       	sbci	r29, 0x00	; 0
    1d56:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1d5a:	3b 01       	movw	r6, r22
    1d5c:	4c 01       	movw	r8, r24
    1d5e:	60 91 70 01 	lds	r22, 0x0170
    1d62:	70 91 71 01 	lds	r23, 0x0171
    1d66:	88 27       	eor	r24, r24
    1d68:	77 fd       	sbrc	r23, 7
    1d6a:	80 95       	com	r24
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    1d72:	c9 56       	subi	r28, 0x69	; 105
    1d74:	df 4f       	sbci	r29, 0xFF	; 255
    1d76:	28 81       	ld	r18, Y
    1d78:	39 81       	ldd	r19, Y+1	; 0x01
    1d7a:	4a 81       	ldd	r20, Y+2	; 0x02
    1d7c:	5b 81       	ldd	r21, Y+3	; 0x03
    1d7e:	c7 59       	subi	r28, 0x97	; 151
    1d80:	d0 40       	sbci	r29, 0x00	; 0
    1d82:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1d86:	7b 01       	movw	r14, r22
    1d88:	8c 01       	movw	r16, r24
    1d8a:	c4 01       	movw	r24, r8
    1d8c:	b3 01       	movw	r22, r6
    1d8e:	a4 01       	movw	r20, r8
    1d90:	93 01       	movw	r18, r6
    1d92:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1d96:	5b 01       	movw	r10, r22
    1d98:	6c 01       	movw	r12, r24
    1d9a:	c8 01       	movw	r24, r16
    1d9c:	b7 01       	movw	r22, r14
    1d9e:	a8 01       	movw	r20, r16
    1da0:	97 01       	movw	r18, r14
    1da2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	c6 01       	movw	r24, r12
    1dac:	b5 01       	movw	r22, r10
    1dae:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1db2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <sqrt>
    1db6:	5b 01       	movw	r10, r22
    1db8:	6c 01       	movw	r12, r24
    double theta1 = pi - atan2(- y0 + y_init, - x0  + x_init);
    1dba:	c8 01       	movw	r24, r16
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	a4 01       	movw	r20, r8
    1dc0:	93 01       	movw	r18, r6
    1dc2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <atan2>
    1dc6:	7b 01       	movw	r14, r22
    1dc8:	8c 01       	movw	r16, r24

    double x = dist * scale * cos(theta1 + theta_rot);
    1dca:	c6 01       	movw	r24, r12
    1dcc:	b5 01       	movw	r22, r10
    1dce:	a2 01       	movw	r20, r4
    1dd0:	91 01       	movw	r18, r2
    1dd2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1dd6:	3b 01       	movw	r6, r22
    1dd8:	4c 01       	movw	r8, r24
    1dda:	6b ed       	ldi	r22, 0xDB	; 219
    1ddc:	7f e0       	ldi	r23, 0x0F	; 15
    1dde:	89 e4       	ldi	r24, 0x49	; 73
    1de0:	90 e4       	ldi	r25, 0x40	; 64
    1de2:	a8 01       	movw	r20, r16
    1de4:	97 01       	movw	r18, r14
    1de6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    1dea:	cd 56       	subi	r28, 0x6D	; 109
    1dec:	df 4f       	sbci	r29, 0xFF	; 255
    1dee:	28 81       	ld	r18, Y
    1df0:	39 81       	ldd	r19, Y+1	; 0x01
    1df2:	4a 81       	ldd	r20, Y+2	; 0x02
    1df4:	5b 81       	ldd	r21, Y+3	; 0x03
    1df6:	c3 59       	subi	r28, 0x93	; 147
    1df8:	d0 40       	sbci	r29, 0x00	; 0
    1dfa:	0e 94 80 1b 	call	0x3700	; 0x3700 <__addsf3>
    1dfe:	7b 01       	movw	r14, r22
    1e00:	8c 01       	movw	r16, r24
    1e02:	c8 01       	movw	r24, r16
    1e04:	0e 94 4a 1c 	call	0x3894	; 0x3894 <cos>
    1e08:	5b 01       	movw	r10, r22
    1e0a:	6c 01       	movw	r12, r24
    double y = dist * scale * sin(theta1 + theta_rot);
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <sin>
    1e14:	7b 01       	movw	r14, r22
    1e16:	8c 01       	movw	r16, r24
	
	*xo = x;
    1e18:	c4 01       	movw	r24, r8
    1e1a:	b3 01       	movw	r22, r6
    1e1c:	a6 01       	movw	r20, r12
    1e1e:	95 01       	movw	r18, r10
    1e20:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1e24:	cb 52       	subi	r28, 0x2B	; 43
    1e26:	df 4f       	sbci	r29, 0xFF	; 255
    1e28:	e8 81       	ld	r30, Y
    1e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2c:	c5 5d       	subi	r28, 0xD5	; 213
    1e2e:	d0 40       	sbci	r29, 0x00	; 0
    1e30:	60 83       	st	Z, r22
    1e32:	71 83       	std	Z+1, r23	; 0x01
    1e34:	82 83       	std	Z+2, r24	; 0x02
    1e36:	93 83       	std	Z+3, r25	; 0x03
	*yo = y;
    1e38:	c4 01       	movw	r24, r8
    1e3a:	b3 01       	movw	r22, r6
    1e3c:	a8 01       	movw	r20, r16
    1e3e:	97 01       	movw	r18, r14
    1e40:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    1e44:	c9 52       	subi	r28, 0x29	; 41
    1e46:	df 4f       	sbci	r29, 0xFF	; 255
    1e48:	a8 81       	ld	r26, Y
    1e4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e4c:	c7 5d       	subi	r28, 0xD7	; 215
    1e4e:	d0 40       	sbci	r29, 0x00	; 0
    1e50:	6d 93       	st	X+, r22
    1e52:	7d 93       	st	X+, r23
    1e54:	8d 93       	st	X+, r24
    1e56:	9c 93       	st	X, r25
    1e58:	13 97       	sbiw	r26, 0x03	; 3
	*to = theta;
    1e5a:	cd 56       	subi	r28, 0x6D	; 109
    1e5c:	df 4f       	sbci	r29, 0xFF	; 255
    1e5e:	88 81       	ld	r24, Y
    1e60:	99 81       	ldd	r25, Y+1	; 0x01
    1e62:	aa 81       	ldd	r26, Y+2	; 0x02
    1e64:	bb 81       	ldd	r27, Y+3	; 0x03
    1e66:	c3 59       	subi	r28, 0x93	; 147
    1e68:	d0 40       	sbci	r29, 0x00	; 0
    1e6a:	c7 52       	subi	r28, 0x27	; 39
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	e8 81       	ld	r30, Y
    1e70:	f9 81       	ldd	r31, Y+1	; 0x01
    1e72:	c9 5d       	subi	r28, 0xD9	; 217
    1e74:	d0 40       	sbci	r29, 0x00	; 0
    1e76:	80 83       	st	Z, r24
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	a2 83       	std	Z+2, r26	; 0x02
    1e7c:	b3 83       	std	Z+3, r27	; 0x03
	

}
    1e7e:	c0 51       	subi	r28, 0x10	; 16
    1e80:	df 4f       	sbci	r29, 0xFF	; 255
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	3f 90       	pop	r3
    1eae:	2f 90       	pop	r2
    1eb0:	08 95       	ret

00001eb2 <wait>:
}



void wait(int n)
{
    1eb2:	40 e0       	ldi	r20, 0x00	; 0
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb6:	60 e9       	ldi	r22, 0x90	; 144
    1eb8:	71 e0       	ldi	r23, 0x01	; 1
    1eba:	0a c0       	rjmp	.+20     	; 0x1ed0 <wait+0x1e>
	for(int i = 0; i < n; i++)
    1ebc:	20 e1       	ldi	r18, 0x10	; 16
    1ebe:	37 e2       	ldi	r19, 0x27	; 39
    1ec0:	fb 01       	movw	r30, r22
    1ec2:	31 97       	sbiw	r30, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <wait+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	21 50       	subi	r18, 0x01	; 1
    1ec8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	d1 f7       	brne	.-12     	; 0x1ec0 <wait+0xe>
    1ecc:	4f 5f       	subi	r20, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	48 17       	cp	r20, r24
    1ed2:	59 07       	cpc	r21, r25
    1ed4:	9c f3       	brlt	.-26     	; 0x1ebc <wait+0xa>
	{
		m_wait(1000);
	}
}
    1ed6:	08 95       	ret

00001ed8 <set_left>:

// B5 and C6
void set_left(int n)
{
	int pwm = n;
	if(n < 0)
    1ed8:	97 ff       	sbrs	r25, 7
    1eda:	06 c0       	rjmp	.+12     	; 0x1ee8 <set_left+0x10>
	{
		pwm = -n;
    1edc:	22 27       	eor	r18, r18
    1ede:	33 27       	eor	r19, r19
    1ee0:	28 1b       	sub	r18, r24
    1ee2:	39 0b       	sbc	r19, r25
		clear(PORTC, 6);
    1ee4:	46 98       	cbi	0x08, 6	; 8
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <set_left+0x14>
	}
	else
	{
		set(PORTC, 6);
    1ee8:	46 9a       	sbi	0x08, 6	; 8
    1eea:	9c 01       	movw	r18, r24
	}
	OCR1A = pwm * 655;
    1eec:	8f e8       	ldi	r24, 0x8F	; 143
    1eee:	92 e0       	ldi	r25, 0x02	; 2
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	24 9f       	mul	r18, r20
    1ef4:	c0 01       	movw	r24, r0
    1ef6:	25 9f       	mul	r18, r21
    1ef8:	90 0d       	add	r25, r0
    1efa:	34 9f       	mul	r19, r20
    1efc:	90 0d       	add	r25, r0
    1efe:	11 24       	eor	r1, r1
    1f00:	90 93 89 00 	sts	0x0089, r25
    1f04:	80 93 88 00 	sts	0x0088, r24

}
    1f08:	08 95       	ret

00001f0a <set_right>:
	
// B6 and C7
void set_right(int n)
{
	int pwm = n;
	if(n < 0)
    1f0a:	97 ff       	sbrs	r25, 7
    1f0c:	06 c0       	rjmp	.+12     	; 0x1f1a <set_right+0x10>
	{
		pwm = -n;
    1f0e:	22 27       	eor	r18, r18
    1f10:	33 27       	eor	r19, r19
    1f12:	28 1b       	sub	r18, r24
    1f14:	39 0b       	sbc	r19, r25
		clear(PORTC, 7);
    1f16:	47 98       	cbi	0x08, 7	; 8
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <set_right+0x14>
	}
	else
	{
		set(PORTC, 7);
    1f1a:	47 9a       	sbi	0x08, 7	; 8
    1f1c:	9c 01       	movw	r18, r24
	}
	OCR1B = pwm * 655;
    1f1e:	8f e8       	ldi	r24, 0x8F	; 143
    1f20:	92 e0       	ldi	r25, 0x02	; 2
    1f22:	ac 01       	movw	r20, r24
    1f24:	24 9f       	mul	r18, r20
    1f26:	c0 01       	movw	r24, r0
    1f28:	25 9f       	mul	r18, r21
    1f2a:	90 0d       	add	r25, r0
    1f2c:	34 9f       	mul	r19, r20
    1f2e:	90 0d       	add	r25, r0
    1f30:	11 24       	eor	r1, r1
    1f32:	90 93 8b 00 	sts	0x008B, r25
    1f36:	80 93 8a 00 	sts	0x008A, r24
}
    1f3a:	08 95       	ret

00001f3c <init_all>:
#include "common_robockey.h"


void init_all()
{
	m_clockdivide(0);
    1f3c:	e1 e6       	ldi	r30, 0x61	; 97
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 e8       	ldi	r24, 0x80	; 128
    1f42:	80 83       	st	Z, r24
    1f44:	10 82       	st	Z, r1
	m_disableJTAG();
    1f46:	85 bf       	out	0x35, r24	; 53
    1f48:	85 bf       	out	0x35, r24	; 53

	

	init_communication(CHANNEL, ADDRESS, PACKET_SIZE);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	66 e2       	ldi	r22, 0x26	; 38
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	4c e0       	ldi	r20, 0x0C	; 12
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	0e 94 4c 10 	call	0x2098	; 0x2098 <init_communication>

	//initializing mWii
	char wii_status = m_wii_open();
    1f5a:	0e 94 bc 1a 	call	0x3578	; 0x3578 <m_wii_open>
	
	

	// set timer clock source
	clear(TCCR1B, CS12);
    1f5e:	e1 e8       	ldi	r30, 0x81	; 129
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8b 7f       	andi	r24, 0xFB	; 251
    1f66:	80 83       	st	Z, r24
	clear(TCCR1B, CS11);
    1f68:	80 81       	ld	r24, Z
    1f6a:	8d 7f       	andi	r24, 0xFD	; 253
    1f6c:	80 83       	st	Z, r24
	set(TCCR1B, CS10);
    1f6e:	80 81       	ld	r24, Z
    1f70:	81 60       	ori	r24, 0x01	; 1
    1f72:	80 83       	st	Z, r24

	// Set to up to ICR1 PWM mode
	ICR1 = 0xffff;
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	90 93 87 00 	sts	0x0087, r25
    1f7c:	80 93 86 00 	sts	0x0086, r24
	set(TCCR1B, WGM13);
    1f80:	80 81       	ld	r24, Z
    1f82:	80 61       	ori	r24, 0x10	; 16
    1f84:	80 83       	st	Z, r24
	set(TCCR1B, WGM12);
    1f86:	80 81       	ld	r24, Z
    1f88:	88 60       	ori	r24, 0x08	; 8
    1f8a:	80 83       	st	Z, r24
	set(TCCR1A, WGM11);
    1f8c:	e0 e8       	ldi	r30, 0x80	; 128
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	82 60       	ori	r24, 0x02	; 2
    1f94:	80 83       	st	Z, r24
	clear(TCCR1A, WGM10);
    1f96:	80 81       	ld	r24, Z
    1f98:	8e 7f       	andi	r24, 0xFE	; 254
    1f9a:	80 83       	st	Z, r24

	// set there to be an output at B5
	set(DDRB, 5);
    1f9c:	25 9a       	sbi	0x04, 5	; 4
	set(TCCR1A, COM1A1);
    1f9e:	80 81       	ld	r24, Z
    1fa0:	80 68       	ori	r24, 0x80	; 128
    1fa2:	80 83       	st	Z, r24
	clear(TCCR1A, COM1A0);
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8f 7b       	andi	r24, 0xBF	; 191
    1fa8:	80 83       	st	Z, r24

	// set there to be an output at B6
	set(DDRB, 6);
    1faa:	26 9a       	sbi	0x04, 6	; 4
	set(TCCR1A, COM1B1);
    1fac:	80 81       	ld	r24, Z
    1fae:	80 62       	ori	r24, 0x20	; 32
    1fb0:	80 83       	st	Z, r24
	clear(TCCR1A, COM1B0);
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8f 7e       	andi	r24, 0xEF	; 239
    1fb6:	80 83       	st	Z, r24

	// don't use the one on pin B7
	clear(TCCR1A, COM1C1);
    1fb8:	80 81       	ld	r24, Z
    1fba:	87 7f       	andi	r24, 0xF7	; 247
    1fbc:	80 83       	st	Z, r24
	clear(TCCR1A, COM1C0);
    1fbe:	80 81       	ld	r24, Z
    1fc0:	8b 7f       	andi	r24, 0xFB	; 251
    1fc2:	80 83       	st	Z, r24

	OCR1A = 0;
    1fc4:	10 92 89 00 	sts	0x0089, r1
    1fc8:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
    1fcc:	10 92 8b 00 	sts	0x008B, r1
    1fd0:	10 92 8a 00 	sts	0x008A, r1

	
	// set the directions pins to enable output
	set(DDRC, 6);
    1fd4:	3e 9a       	sbi	0x07, 6	; 7
	set(DDRC, 7);
    1fd6:	3f 9a       	sbi	0x07, 7	; 7
	
	clear(PORTC, 6);
    1fd8:	46 98       	cbi	0x08, 6	; 8
	clear(PORTC, 7);
    1fda:	47 98       	cbi	0x08, 7	; 8
	
}
    1fdc:	08 95       	ret

00001fde <send_message_to_bot>:
		}
	}
}

void send_message_to_bot(char* c, char address)
{
    1fde:	9c 01       	movw	r18, r24
    1fe0:	86 2f       	mov	r24, r22
	m_rf_send(address, c, packet_length);
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	40 91 74 01 	lds	r20, 0x0174
    1fe8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <m_rf_send>
}
    1fec:	08 95       	ret

00001fee <send_message>:
	wireless_buffer_f = true;
}


void send_message(char* c)
{
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	ec 01       	movw	r28, r24
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
    1ff4:	80 91 72 01 	lds	r24, 0x0172
    1ff8:	90 91 73 01 	lds	r25, 0x0173
    1ffc:	84 97       	sbiw	r24, 0x24	; 36
    1ffe:	31 f0       	breq	.+12     	; 0x200c <send_message+0x1e>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, packet_length);
    2000:	84 e2       	ldi	r24, 0x24	; 36
    2002:	be 01       	movw	r22, r28
    2004:	40 91 74 01 	lds	r20, 0x0174
    2008:	0e 94 64 14 	call	0x28c8	; 0x28c8 <m_rf_send>

void send_message(char* c)
{
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
    200c:	80 91 72 01 	lds	r24, 0x0172
    2010:	90 91 73 01 	lds	r25, 0x0173
    2014:	85 97       	sbiw	r24, 0x25	; 37
    2016:	31 f0       	breq	.+12     	; 0x2024 <send_message+0x36>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, packet_length);
    2018:	85 e2       	ldi	r24, 0x25	; 37
    201a:	be 01       	movw	r22, r28
    201c:	40 91 74 01 	lds	r20, 0x0174
    2020:	0e 94 64 14 	call	0x28c8	; 0x28c8 <m_rf_send>

void send_message(char* c)
{
	for(int i = 0x24; i <= 0x26; i++)
	{
		if(address != i)
    2024:	80 91 72 01 	lds	r24, 0x0172
    2028:	90 91 73 01 	lds	r25, 0x0173
    202c:	86 97       	sbiw	r24, 0x26	; 38
    202e:	31 f0       	breq	.+12     	; 0x203c <send_message+0x4e>
	}
}

void send_message_to_bot(char* c, char address)
{
	m_rf_send(address, c, packet_length);
    2030:	86 e2       	ldi	r24, 0x26	; 38
    2032:	be 01       	movw	r22, r28
    2034:	40 91 74 01 	lds	r20, 0x0174
    2038:	0e 94 64 14 	call	0x28c8	; 0x28c8 <m_rf_send>
		{
			send_message_to_bot(c, i);

		}
	}
}
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	08 95       	ret

00002042 <__vector_3>:




ISR(INT2_vect)
{	
    2042:	1f 92       	push	r1
    2044:	0f 92       	push	r0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	0f 92       	push	r0
    204a:	11 24       	eor	r1, r1
    204c:	2f 93       	push	r18
    204e:	3f 93       	push	r19
    2050:	4f 93       	push	r20
    2052:	5f 93       	push	r21
    2054:	6f 93       	push	r22
    2056:	7f 93       	push	r23
    2058:	8f 93       	push	r24
    205a:	9f 93       	push	r25
    205c:	af 93       	push	r26
    205e:	bf 93       	push	r27
    2060:	ef 93       	push	r30
    2062:	ff 93       	push	r31
	m_rf_read(wireless_buffer, packet_length);
    2064:	84 e6       	ldi	r24, 0x64	; 100
    2066:	91 e0       	ldi	r25, 0x01	; 1
    2068:	60 91 74 01 	lds	r22, 0x0174
    206c:	0e 94 15 14 	call	0x282a	; 0x282a <m_rf_read>
	wireless_buffer_f = true;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	80 93 63 01 	sts	0x0163, r24
}
    2076:	ff 91       	pop	r31
    2078:	ef 91       	pop	r30
    207a:	bf 91       	pop	r27
    207c:	af 91       	pop	r26
    207e:	9f 91       	pop	r25
    2080:	8f 91       	pop	r24
    2082:	7f 91       	pop	r23
    2084:	6f 91       	pop	r22
    2086:	5f 91       	pop	r21
    2088:	4f 91       	pop	r20
    208a:	3f 91       	pop	r19
    208c:	2f 91       	pop	r18
    208e:	0f 90       	pop	r0
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	0f 90       	pop	r0
    2094:	1f 90       	pop	r1
    2096:	18 95       	reti

00002098 <init_communication>:
#include "common_robockey.h"

int channel, address, packet_length;

void init_communication(int c, int a, int l)
{
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	c8 2e       	mov	r12, r24
    20a6:	19 2f       	mov	r17, r25
    20a8:	d6 2e       	mov	r13, r22
    20aa:	07 2f       	mov	r16, r23
    20ac:	7a 01       	movw	r14, r20
	
	m_bus_init();
    20ae:	0e 94 04 14 	call	0x2808	; 0x2808 <m_bus_init>
	
	channel = c;
    20b2:	c0 92 76 01 	sts	0x0176, r12
    20b6:	10 93 77 01 	sts	0x0177, r17
	address = a;
    20ba:	d0 92 72 01 	sts	0x0172, r13
    20be:	00 93 73 01 	sts	0x0173, r16
	packet_length = l;
    20c2:	e0 92 74 01 	sts	0x0174, r14
    20c6:	f0 92 75 01 	sts	0x0175, r15

	m_rf_open(channel, address, packet_length);
    20ca:	8c 2d       	mov	r24, r12
    20cc:	6d 2d       	mov	r22, r13
    20ce:	4e 2d       	mov	r20, r14
    20d0:	0e 94 b1 14 	call	0x2962	; 0x2962 <m_rf_open>
}
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	08 95       	ret

000020e2 <position_demo>:
#include "common_robockey.h"


void position_demo()
{
    20e2:	7f 92       	push	r7
    20e4:	8f 92       	push	r8
    20e6:	9f 92       	push	r9
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	a4 97       	sbiw	r28, 0x24	; 36
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61

	m_usb_init();
    210c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <m_usb_init>
	

	set(DDRD,5);
    2110:	55 9a       	sbi	0x0a, 5	; 10
	//init mWii
	char wii_status = m_wii_open();
    2112:	0e 94 bc 1a 	call	0x3578	; 0x3578 <m_wii_open>
	if(wii_status){
    2116:	88 23       	and	r24, r24
    2118:	21 f0       	breq	.+8      	; 0x2122 <position_demo+0x40>
		m_green(ON);
    211a:	6a 9a       	sbi	0x0d, 2	; 13
    211c:	72 98       	cbi	0x0e, 2	; 14
	    set(PORTD,5);
    211e:	5d 9a       	sbi	0x0b, 5	; 11
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <position_demo+0x42>
	}else
	m_red(ON);
    2122:	6e 9a       	sbi	0x0d, 6	; 13
    2124:	76 98       	cbi	0x0e, 6	; 14
    2126:	02 c0       	rjmp	.+4      	; 0x212c <position_demo+0x4a>

	
	while(!m_usb_isconnected())
	{
		m_green(ON);
    2128:	6a 9a       	sbi	0x0d, 2	; 13
    212a:	72 98       	cbi	0x0e, 2	; 14
	    set(PORTD,5);
	}else
	m_red(ON);

	
	while(!m_usb_isconnected())
    212c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <m_usb_isconnected>
    2130:	88 23       	and	r24, r24
    2132:	d1 f3       	breq	.-12     	; 0x2128 <position_demo+0x46>
	{
		m_green(ON);
	} 
  unsigned int blobs[] = {541,381,0,503,344,0,524,304,0,599,347,0};
    2134:	de 01       	movw	r26, r28
    2136:	1d 96       	adiw	r26, 0x0d	; 13
    2138:	e0 e2       	ldi	r30, 0x20	; 32
    213a:	f1 e0       	ldi	r31, 0x01	; 1
    213c:	88 e1       	ldi	r24, 0x18	; 24
    213e:	01 90       	ld	r0, Z+
    2140:	0d 92       	st	X+, r0
    2142:	81 50       	subi	r24, 0x01	; 1
    2144:	e1 f7       	brne	.-8      	; 0x213e <position_demo+0x5c>
	{
		double x;
		double y;
		double theta;
    if(m_usb_isconnected()){
	  blob_status = m_wii_read(blobs);
    2146:	8e 01       	movw	r16, r28
    2148:	03 5f       	subi	r16, 0xF3	; 243
    214a:	1f 4f       	sbci	r17, 0xFF	; 255

	  if(blob_status){
      set_position(1024/2,768/2);
      

      get_position(blobs,&x,&y,&theta);
    214c:	35 e0       	ldi	r19, 0x05	; 5
    214e:	83 2e       	mov	r8, r19
    2150:	91 2c       	mov	r9, r1
    2152:	8c 0e       	add	r8, r28
    2154:	9d 1e       	adc	r9, r29
    2156:	29 e0       	ldi	r18, 0x09	; 9
    2158:	a2 2e       	mov	r10, r18
    215a:	b1 2c       	mov	r11, r1
    215c:	ac 0e       	add	r10, r28
    215e:	bd 1e       	adc	r11, r29
    2160:	6e 01       	movw	r12, r28
    2162:	08 94       	sec
    2164:	c1 1c       	adc	r12, r1
    2166:	d1 1c       	adc	r13, r1
    2168:	90 e9       	ldi	r25, 0x90	; 144
    216a:	e9 2e       	mov	r14, r25
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	f9 2e       	mov	r15, r25
	  m_usb_tx_int((int) blobs[10]);



   		m_wait(1000);
		  m_red(TOGGLE);
    2170:	80 e4       	ldi	r24, 0x40	; 64
    2172:	78 2e       	mov	r7, r24
	while(1)
	{
		double x;
		double y;
		double theta;
    if(m_usb_isconnected()){
    2174:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <m_usb_isconnected>
    2178:	88 23       	and	r24, r24
    217a:	e1 f3       	breq	.-8      	; 0x2174 <position_demo+0x92>
	  blob_status = m_wii_read(blobs);
    217c:	c8 01       	movw	r24, r16
    217e:	0e 94 2f 1a 	call	0x345e	; 0x345e <m_wii_read>

	  if(blob_status){
    2182:	88 23       	and	r24, r24
    2184:	b9 f3       	breq	.-18     	; 0x2174 <position_demo+0x92>
      set_position(1024/2,768/2);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	60 e8       	ldi	r22, 0x80	; 128
    218c:	71 e0       	ldi	r23, 0x01	; 1
    218e:	0e 94 47 01 	call	0x28e	; 0x28e <set_position>
      

      get_position(blobs,&x,&y,&theta);
    2192:	c8 01       	movw	r24, r16
    2194:	b6 01       	movw	r22, r12
    2196:	a4 01       	movw	r20, r8
    2198:	95 01       	movw	r18, r10
    219a:	0e 94 0a 02 	call	0x414	; 0x414 <get_position>
      m_usb_tx_string("blob4y: ");
      m_usb_tx_int((int) blobs[10]);
      m_usb_tx_string("\n");

	  */
      m_usb_tx_int((int)(x * 100));
    219e:	69 81       	ldd	r22, Y+1	; 0x01
    21a0:	7a 81       	ldd	r23, Y+2	; 0x02
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	48 ec       	ldi	r20, 0xC8	; 200
    21ac:	52 e4       	ldi	r21, 0x42	; 66
    21ae:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    21b2:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
      m_usb_tx_int((int)(y * 100));
    21be:	6d 81       	ldd	r22, Y+5	; 0x05
    21c0:	7e 81       	ldd	r23, Y+6	; 0x06
    21c2:	8f 81       	ldd	r24, Y+7	; 0x07
    21c4:	98 85       	ldd	r25, Y+8	; 0x08
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	48 ec       	ldi	r20, 0xC8	; 200
    21cc:	52 e4       	ldi	r21, 0x42	; 66
    21ce:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    21d2:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
      m_usb_tx_int((int)(theta * 100));
    21de:	69 85       	ldd	r22, Y+9	; 0x09
    21e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    21e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	48 ec       	ldi	r20, 0xC8	; 200
    21ec:	52 e4       	ldi	r21, 0x42	; 66
    21ee:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <__mulsf3>
    21f2:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[0]);
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[1]);
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[3]);
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[4]);
    2216:	8d 89       	ldd	r24, Y+21	; 0x15
    2218:	9e 89       	ldd	r25, Y+22	; 0x16
    221a:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[6]);
    221e:	89 8d       	ldd	r24, Y+25	; 0x19
    2220:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2222:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[7]);
    2226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222a:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[9]);
    222e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2230:	98 a1       	ldd	r25, Y+32	; 0x20
    2232:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	  m_usb_tx_int((int) blobs[10]);
    2236:	89 a1       	ldd	r24, Y+33	; 0x21
    2238:	9a a1       	ldd	r25, Y+34	; 0x22
    223a:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
    223e:	80 e1       	ldi	r24, 0x10	; 16
    2240:	97 e2       	ldi	r25, 0x27	; 39
    2242:	f7 01       	movw	r30, r14
    2244:	31 97       	sbiw	r30, 0x01	; 1
    2246:	f1 f7       	brne	.-4      	; 0x2244 <position_demo+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	d9 f7       	brne	.-10     	; 0x2242 <position_demo+0x160>



   		m_wait(1000);
		  m_red(TOGGLE);
    224c:	6e 9a       	sbi	0x0d, 6	; 13
    224e:	8e b1       	in	r24, 0x0e	; 14
    2250:	87 25       	eor	r24, r7
    2252:	8e b9       	out	0x0e, r24	; 14
    2254:	8f cf       	rjmp	.-226    	; 0x2174 <position_demo+0x92>

00002256 <state_pause>:
}


void state_pause()
{
	set_left(0);
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_left>
	set_right(0);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <set_right>
}
    2266:	08 95       	ret

00002268 <state_play>:
		}
	}
}*/

void state_play()
{
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
	    set(ADCSRA,ADIF);//clearing flag

	    puck_status = 0;

	    if(adc_values[0]>700  && adc_values[0]>adc_values[2] && adc_values[0]>adc_values[3])
	      puck_status = 2;
    2270:	02 e0       	ldi	r16, 0x02	; 2
    2272:	10 e0       	ldi	r17, 0x00	; 0

	    if(adc_values[1]>800 && (adc_values[1]-adc_values[2] > -100 && adc_values[1]-adc_values[2] < 100))
	      puck_status = 0;

	    if(adc_values[2]>800 && (adc_values[1]-adc_values[2] < -100 || adc_values[1]-adc_values[2] > 100) && adc_values[2]>adc_values[1])
	      puck_status = 1;   
    2274:	c1 e0       	ldi	r28, 0x01	; 1
    2276:	d0 e0       	ldi	r29, 0x00	; 0
}*/

void state_play()
{
	    //F4 for acd conversion
	    clear(ADCSRA,ADEN);
    2278:	80 91 7a 00 	lds	r24, 0x007A
    227c:	8f 77       	andi	r24, 0x7F	; 127
    227e:	80 93 7a 00 	sts	0x007A, r24
	    clear(ADCSRB,MUX5);//setting mux to F4
    2282:	80 91 7b 00 	lds	r24, 0x007B
    2286:	8f 7d       	andi	r24, 0xDF	; 223
    2288:	80 93 7b 00 	sts	0x007B, r24
	    set(ADMUX,MUX2);
    228c:	80 91 7c 00 	lds	r24, 0x007C
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	80 93 7c 00 	sts	0x007C, r24
	    clear(ADMUX,MUX1);
    2296:	80 91 7c 00 	lds	r24, 0x007C
    229a:	8d 7f       	andi	r24, 0xFD	; 253
    229c:	80 93 7c 00 	sts	0x007C, r24
	    clear(ADMUX,MUX0);
    22a0:	80 91 7c 00 	lds	r24, 0x007C
    22a4:	8e 7f       	andi	r24, 0xFE	; 254
    22a6:	80 93 7c 00 	sts	0x007C, r24

	    //starting adc for F4
	    set(ADCSRA,ADEN);
    22aa:	80 91 7a 00 	lds	r24, 0x007A
    22ae:	80 68       	ori	r24, 0x80	; 128
    22b0:	80 93 7a 00 	sts	0x007A, r24
	    set(ADCSRA,ADSC);
    22b4:	80 91 7a 00 	lds	r24, 0x007A
    22b8:	80 64       	ori	r24, 0x40	; 64
    22ba:	80 93 7a 00 	sts	0x007A, r24

	    while(!check(ADCSRA,ADIF));
    22be:	80 91 7a 00 	lds	r24, 0x007A
    22c2:	84 ff       	sbrs	r24, 4
    22c4:	fc cf       	rjmp	.-8      	; 0x22be <state_play+0x56>
	    adc_values[1] = ADC;//saving adc value
    22c6:	80 91 78 00 	lds	r24, 0x0078
    22ca:	90 91 79 00 	lds	r25, 0x0079
    22ce:	90 93 9f 01 	sts	0x019F, r25
    22d2:	80 93 9e 01 	sts	0x019E, r24
	    set(ADCSRA,ADIF);//clearing flag
    22d6:	80 91 7a 00 	lds	r24, 0x007A
    22da:	80 61       	ori	r24, 0x10	; 16
    22dc:	80 93 7a 00 	sts	0x007A, r24

  
	    //F6 for acd conversion
	    clear(ADCSRA,ADEN);
    22e0:	80 91 7a 00 	lds	r24, 0x007A
    22e4:	8f 77       	andi	r24, 0x7F	; 127
    22e6:	80 93 7a 00 	sts	0x007A, r24
	    clear(ADCSRB,MUX5);//setting mux to F6
    22ea:	80 91 7b 00 	lds	r24, 0x007B
    22ee:	8f 7d       	andi	r24, 0xDF	; 223
    22f0:	80 93 7b 00 	sts	0x007B, r24
	    set(ADMUX,MUX2);
    22f4:	80 91 7c 00 	lds	r24, 0x007C
    22f8:	84 60       	ori	r24, 0x04	; 4
    22fa:	80 93 7c 00 	sts	0x007C, r24
	    set(ADMUX,MUX1);
    22fe:	80 91 7c 00 	lds	r24, 0x007C
    2302:	82 60       	ori	r24, 0x02	; 2
    2304:	80 93 7c 00 	sts	0x007C, r24
	    clear(ADMUX,MUX0);
    2308:	80 91 7c 00 	lds	r24, 0x007C
    230c:	8e 7f       	andi	r24, 0xFE	; 254
    230e:	80 93 7c 00 	sts	0x007C, r24

	    //starting adc for F6
	    set(ADCSRA,ADEN);
    2312:	80 91 7a 00 	lds	r24, 0x007A
    2316:	80 68       	ori	r24, 0x80	; 128
    2318:	80 93 7a 00 	sts	0x007A, r24
	    set(ADCSRA,ADSC);
    231c:	80 91 7a 00 	lds	r24, 0x007A
    2320:	80 64       	ori	r24, 0x40	; 64
    2322:	80 93 7a 00 	sts	0x007A, r24

	    while(!check(ADCSRA,ADIF));
    2326:	80 91 7a 00 	lds	r24, 0x007A
    232a:	84 ff       	sbrs	r24, 4
    232c:	fc cf       	rjmp	.-8      	; 0x2326 <state_play+0xbe>
	    adc_values[0] = ADC;//saving adc value
    232e:	80 91 78 00 	lds	r24, 0x0078
    2332:	90 91 79 00 	lds	r25, 0x0079
    2336:	90 93 9d 01 	sts	0x019D, r25
    233a:	80 93 9c 01 	sts	0x019C, r24
	    set(ADCSRA,ADIF);//clearing flag
    233e:	80 91 7a 00 	lds	r24, 0x007A
    2342:	80 61       	ori	r24, 0x10	; 16
    2344:	80 93 7a 00 	sts	0x007A, r24
  
	    clear(ADCSRA,ADEN);
    2348:	80 91 7a 00 	lds	r24, 0x007A
    234c:	8f 77       	andi	r24, 0x7F	; 127
    234e:	80 93 7a 00 	sts	0x007A, r24
	    //D6 for acd conversion
	    set(ADCSRB,MUX5);//setting mux to D6
    2352:	80 91 7b 00 	lds	r24, 0x007B
    2356:	80 62       	ori	r24, 0x20	; 32
    2358:	80 93 7b 00 	sts	0x007B, r24
	    clear(ADMUX,MUX2);
    235c:	80 91 7c 00 	lds	r24, 0x007C
    2360:	8b 7f       	andi	r24, 0xFB	; 251
    2362:	80 93 7c 00 	sts	0x007C, r24
	    clear(ADMUX,MUX1);
    2366:	80 91 7c 00 	lds	r24, 0x007C
    236a:	8d 7f       	andi	r24, 0xFD	; 253
    236c:	80 93 7c 00 	sts	0x007C, r24
	    set(ADMUX,MUX0);
    2370:	80 91 7c 00 	lds	r24, 0x007C
    2374:	81 60       	ori	r24, 0x01	; 1
    2376:	80 93 7c 00 	sts	0x007C, r24

	    //starting adc for D6
	    set(ADCSRA,ADEN);
    237a:	80 91 7a 00 	lds	r24, 0x007A
    237e:	80 68       	ori	r24, 0x80	; 128
    2380:	80 93 7a 00 	sts	0x007A, r24
	    set(ADCSRA,ADSC);
    2384:	80 91 7a 00 	lds	r24, 0x007A
    2388:	80 64       	ori	r24, 0x40	; 64
    238a:	80 93 7a 00 	sts	0x007A, r24

	    while(!check(ADCSRA,ADIF));
    238e:	80 91 7a 00 	lds	r24, 0x007A
    2392:	84 ff       	sbrs	r24, 4
    2394:	fc cf       	rjmp	.-8      	; 0x238e <state_play+0x126>
	    adc_values[2] = ADC;//saving adc value
    2396:	80 91 78 00 	lds	r24, 0x0078
    239a:	90 91 79 00 	lds	r25, 0x0079
    239e:	90 93 a1 01 	sts	0x01A1, r25
    23a2:	80 93 a0 01 	sts	0x01A0, r24
	    set(ADCSRA,ADIF);//clearing flag
    23a6:	80 91 7a 00 	lds	r24, 0x007A
    23aa:	80 61       	ori	r24, 0x10	; 16
    23ac:	80 93 7a 00 	sts	0x007A, r24

	    //D4 for acd conversion
	    clear(ADCSRA,ADEN);
    23b0:	80 91 7a 00 	lds	r24, 0x007A
    23b4:	8f 77       	andi	r24, 0x7F	; 127
    23b6:	80 93 7a 00 	sts	0x007A, r24
	    set(ADCSRB,MUX5);//setting mux to D4
    23ba:	80 91 7b 00 	lds	r24, 0x007B
    23be:	80 62       	ori	r24, 0x20	; 32
    23c0:	80 93 7b 00 	sts	0x007B, r24
	    clear(ADMUX,MUX2);
    23c4:	80 91 7c 00 	lds	r24, 0x007C
    23c8:	8b 7f       	andi	r24, 0xFB	; 251
    23ca:	80 93 7c 00 	sts	0x007C, r24
	    clear(ADMUX,MUX1);
    23ce:	80 91 7c 00 	lds	r24, 0x007C
    23d2:	8d 7f       	andi	r24, 0xFD	; 253
    23d4:	80 93 7c 00 	sts	0x007C, r24
	    clear(ADMUX,MUX0);
    23d8:	80 91 7c 00 	lds	r24, 0x007C
    23dc:	8e 7f       	andi	r24, 0xFE	; 254
    23de:	80 93 7c 00 	sts	0x007C, r24

	    //starting adc for D4
	    set(ADCSRA,ADEN);
    23e2:	80 91 7a 00 	lds	r24, 0x007A
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	80 93 7a 00 	sts	0x007A, r24
	    set(ADCSRA,ADSC);
    23ec:	80 91 7a 00 	lds	r24, 0x007A
    23f0:	80 64       	ori	r24, 0x40	; 64
    23f2:	80 93 7a 00 	sts	0x007A, r24

	    while(!check(ADCSRA,ADIF));
    23f6:	80 91 7a 00 	lds	r24, 0x007A
    23fa:	84 ff       	sbrs	r24, 4
    23fc:	fc cf       	rjmp	.-8      	; 0x23f6 <state_play+0x18e>
	    adc_values[3] = ADC;//saving adc value
    23fe:	60 91 78 00 	lds	r22, 0x0078
    2402:	70 91 79 00 	lds	r23, 0x0079
    2406:	70 93 a3 01 	sts	0x01A3, r23
    240a:	60 93 a2 01 	sts	0x01A2, r22
	    set(ADCSRA,ADIF);//clearing flag
    240e:	80 91 7a 00 	lds	r24, 0x007A
    2412:	80 61       	ori	r24, 0x10	; 16
    2414:	80 93 7a 00 	sts	0x007A, r24

	    puck_status = 0;
    2418:	10 92 42 01 	sts	0x0142, r1
    241c:	10 92 41 01 	sts	0x0141, r1

	    if(adc_values[0]>700  && adc_values[0]>adc_values[2] && adc_values[0]>adc_values[3])
    2420:	e0 91 9c 01 	lds	r30, 0x019C
    2424:	f0 91 9d 01 	lds	r31, 0x019D
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	ed 3b       	cpi	r30, 0xBD	; 189
    242c:	f8 07       	cpc	r31, r24
    242e:	74 f0       	brlt	.+28     	; 0x244c <state_play+0x1e4>
    2430:	80 91 a0 01 	lds	r24, 0x01A0
    2434:	90 91 a1 01 	lds	r25, 0x01A1
    2438:	8e 17       	cp	r24, r30
    243a:	9f 07       	cpc	r25, r31
    243c:	3c f4       	brge	.+14     	; 0x244c <state_play+0x1e4>
    243e:	6e 17       	cp	r22, r30
    2440:	7f 07       	cpc	r23, r31
    2442:	24 f4       	brge	.+8      	; 0x244c <state_play+0x1e4>
	      puck_status = 2;
    2444:	10 93 42 01 	sts	0x0142, r17
    2448:	00 93 41 01 	sts	0x0141, r16

	    if(adc_values[1]>800 && (adc_values[1]-adc_values[2] < -100 || adc_values[1]-adc_values[2] > 100) && adc_values[1]>adc_values[3])
    244c:	40 91 9e 01 	lds	r20, 0x019E
    2450:	50 91 9f 01 	lds	r21, 0x019F
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	41 32       	cpi	r20, 0x21	; 33
    2458:	58 07       	cpc	r21, r24
    245a:	dc f0       	brlt	.+54     	; 0x2492 <state_play+0x22a>
    245c:	80 91 a0 01 	lds	r24, 0x01A0
    2460:	90 91 a1 01 	lds	r25, 0x01A1
    2464:	9a 01       	movw	r18, r20
    2466:	28 1b       	sub	r18, r24
    2468:	39 0b       	sbc	r19, r25
    246a:	c9 01       	movw	r24, r18
    246c:	8c 59       	subi	r24, 0x9C	; 156
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	89 3c       	cpi	r24, 0xC9	; 201
    2472:	91 05       	cpc	r25, r1
    2474:	08 f4       	brcc	.+2      	; 0x2478 <state_play+0x210>
    2476:	f9 c0       	rjmp	.+498    	; 0x266a <state_play+0x402>
    2478:	64 17       	cp	r22, r20
    247a:	75 07       	cpc	r23, r21
    247c:	0c f0       	brlt	.+2      	; 0x2480 <state_play+0x218>
    247e:	f5 c0       	rjmp	.+490    	; 0x266a <state_play+0x402>
	      puck_status = 2;
    2480:	10 93 42 01 	sts	0x0142, r17
    2484:	00 93 41 01 	sts	0x0141, r16
    2488:	f0 c0       	rjmp	.+480    	; 0x266a <state_play+0x402>

	    if(adc_values[1]>800 && (adc_values[1]-adc_values[2] > -100 && adc_values[1]-adc_values[2] < 100))
	      puck_status = 0;
    248a:	10 92 42 01 	sts	0x0142, r1
    248e:	10 92 41 01 	sts	0x0141, r1

	    if(adc_values[2]>800 && (adc_values[1]-adc_values[2] < -100 || adc_values[1]-adc_values[2] > 100) && adc_values[2]>adc_values[1])
    2492:	20 91 a0 01 	lds	r18, 0x01A0
    2496:	30 91 a1 01 	lds	r19, 0x01A1
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	21 32       	cpi	r18, 0x21	; 33
    249e:	38 07       	cpc	r19, r24
    24a0:	7c f0       	brlt	.+30     	; 0x24c0 <state_play+0x258>
    24a2:	ca 01       	movw	r24, r20
    24a4:	82 1b       	sub	r24, r18
    24a6:	93 0b       	sbc	r25, r19
    24a8:	8c 59       	subi	r24, 0x9C	; 156
    24aa:	9f 4f       	sbci	r25, 0xFF	; 255
    24ac:	89 3c       	cpi	r24, 0xC9	; 201
    24ae:	91 05       	cpc	r25, r1
    24b0:	38 f0       	brcs	.+14     	; 0x24c0 <state_play+0x258>
    24b2:	42 17       	cp	r20, r18
    24b4:	53 07       	cpc	r21, r19
    24b6:	24 f4       	brge	.+8      	; 0x24c0 <state_play+0x258>
	      puck_status = 1;   
    24b8:	d0 93 42 01 	sts	0x0142, r29
    24bc:	c0 93 41 01 	sts	0x0141, r28

	    if(adc_values[3]>800  && adc_values[3]>adc_values[0] && adc_values[3]>adc_values[1])
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	61 32       	cpi	r22, 0x21	; 33
    24c4:	78 07       	cpc	r23, r24
    24c6:	54 f0       	brlt	.+20     	; 0x24dc <state_play+0x274>
    24c8:	e6 17       	cp	r30, r22
    24ca:	f7 07       	cpc	r31, r23
    24cc:	3c f4       	brge	.+14     	; 0x24dc <state_play+0x274>
    24ce:	46 17       	cp	r20, r22
    24d0:	57 07       	cpc	r21, r23
    24d2:	24 f4       	brge	.+8      	; 0x24dc <state_play+0x274>
	      puck_status = 1;
    24d4:	d0 93 42 01 	sts	0x0142, r29
    24d8:	c0 93 41 01 	sts	0x0141, r28
    
	    switch(puck_status){
    24dc:	80 91 41 01 	lds	r24, 0x0141
    24e0:	90 91 42 01 	lds	r25, 0x0142
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	91 05       	cpc	r25, r1
    24e8:	31 f0       	breq	.+12     	; 0x24f6 <state_play+0x28e>
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	91 05       	cpc	r25, r1
    24ee:	71 f0       	breq	.+28     	; 0x250c <state_play+0x2a4>
    24f0:	89 2b       	or	r24, r25
    24f2:	c9 f0       	breq	.+50     	; 0x2526 <state_play+0x2be>
    24f4:	24 c0       	rjmp	.+72     	; 0x253e <state_play+0x2d6>
	      case 1:
	        set_left(90);
    24f6:	8a e5       	ldi	r24, 0x5A	; 90
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_left>
	        set_right(50);
    24fe:	82 e3       	ldi	r24, 0x32	; 50
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <set_right>
	        m_red(ON);
    2506:	6e 9a       	sbi	0x0d, 6	; 13
    2508:	76 98       	cbi	0x0e, 6	; 14
    250a:	17 c0       	rjmp	.+46     	; 0x253a <state_play+0x2d2>
	        m_green(ON);
	        break;

	      case 2:
	        set_left(-90);
    250c:	86 ea       	ldi	r24, 0xA6	; 166
    250e:	9f ef       	ldi	r25, 0xFF	; 255
    2510:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_left>
	        set_right(-50);
    2514:	8e ec       	ldi	r24, 0xCE	; 206
    2516:	9f ef       	ldi	r25, 0xFF	; 255
    2518:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <set_right>
	        m_red(ON);
    251c:	6e 9a       	sbi	0x0d, 6	; 13
    251e:	76 98       	cbi	0x0e, 6	; 14
	        m_green(OFF);
    2520:	6a 9a       	sbi	0x0d, 2	; 13
    2522:	72 9a       	sbi	0x0e, 2	; 14
    2524:	0c c0       	rjmp	.+24     	; 0x253e <state_play+0x2d6>
	        break;

	      case 0:
	        set_left(0);
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_left>
	        set_right(0);
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <set_right>
	        m_red(OFF);
    2536:	6e 9a       	sbi	0x0d, 6	; 13
    2538:	76 9a       	sbi	0x0e, 6	; 14
	        m_green(ON);
    253a:	6a 9a       	sbi	0x0d, 2	; 13
    253c:	72 98       	cbi	0x0e, 2	; 14
	        break;
	    }

      get_position(blobs, &x, &y, &theta);
    253e:	83 e4       	ldi	r24, 0x43	; 67
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	68 e7       	ldi	r22, 0x78	; 120
    2544:	71 e0       	ldi	r23, 0x01	; 1
    2546:	44 e9       	ldi	r20, 0x94	; 148
    2548:	51 e0       	ldi	r21, 0x01	; 1
    254a:	2c e8       	ldi	r18, 0x8C	; 140
    254c:	31 e0       	ldi	r19, 0x01	; 1
    254e:	0e 94 0a 02 	call	0x414	; 0x414 <get_position>

	    if(m_usb_isconnected()){
    2552:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <m_usb_isconnected>
    2556:	88 23       	and	r24, r24
    2558:	09 f4       	brne	.+2      	; 0x255c <state_play+0x2f4>
    255a:	78 c0       	rjmp	.+240    	; 0x264c <state_play+0x3e4>
	      m_usb_tx_string("\n");
	      m_usb_tx_string("puck status = ");
		  	m_usb_tx_int((int)puck_status);
	      m_usb_tx_string("\n");
	      m_wait(1000);*/
        m_usb_tx_string("X = ");
    255c:	8d e8       	ldi	r24, 0x8D	; 141
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	0e 94 db 18 	call	0x31b6	; 0x31b6 <print_P>
	      m_usb_tx_int((int) x-x_center);
    2564:	60 91 78 01 	lds	r22, 0x0178
    2568:	70 91 79 01 	lds	r23, 0x0179
    256c:	80 91 7a 01 	lds	r24, 0x017A
    2570:	90 91 7b 01 	lds	r25, 0x017B
    2574:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    2578:	88 27       	eor	r24, r24
    257a:	77 fd       	sbrc	r23, 7
    257c:	80 95       	com	r24
    257e:	98 2f       	mov	r25, r24
    2580:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    2584:	20 91 88 01 	lds	r18, 0x0188
    2588:	30 91 89 01 	lds	r19, 0x0189
    258c:	40 91 8a 01 	lds	r20, 0x018A
    2590:	50 91 8b 01 	lds	r21, 0x018B
    2594:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    2598:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	      m_usb_tx_string("\n");
    25a4:	8b e8       	ldi	r24, 0x8B	; 139
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <print_P>
        m_usb_tx_string("Y = ");
    25ac:	86 e8       	ldi	r24, 0x86	; 134
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	0e 94 db 18 	call	0x31b6	; 0x31b6 <print_P>
	      m_usb_tx_int((int) y-y_center);
    25b4:	60 91 94 01 	lds	r22, 0x0194
    25b8:	70 91 95 01 	lds	r23, 0x0195
    25bc:	80 91 96 01 	lds	r24, 0x0196
    25c0:	90 91 97 01 	lds	r25, 0x0197
    25c4:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    25c8:	88 27       	eor	r24, r24
    25ca:	77 fd       	sbrc	r23, 7
    25cc:	80 95       	com	r24
    25ce:	98 2f       	mov	r25, r24
    25d0:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    25d4:	20 91 98 01 	lds	r18, 0x0198
    25d8:	30 91 99 01 	lds	r19, 0x0199
    25dc:	40 91 9a 01 	lds	r20, 0x019A
    25e0:	50 91 9b 01 	lds	r21, 0x019B
    25e4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    25e8:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	      m_usb_tx_string("\n");
    25f4:	84 e8       	ldi	r24, 0x84	; 132
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <print_P>
        m_usb_tx_string("Theta = ");
    25fc:	8b e7       	ldi	r24, 0x7B	; 123
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	0e 94 db 18 	call	0x31b6	; 0x31b6 <print_P>
	      m_usb_tx_int((int) theta-theta_zero);
    2604:	60 91 8c 01 	lds	r22, 0x018C
    2608:	70 91 8d 01 	lds	r23, 0x018D
    260c:	80 91 8e 01 	lds	r24, 0x018E
    2610:	90 91 8f 01 	lds	r25, 0x018F
    2614:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    2618:	88 27       	eor	r24, r24
    261a:	77 fd       	sbrc	r23, 7
    261c:	80 95       	com	r24
    261e:	98 2f       	mov	r25, r24
    2620:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__floatsisf>
    2624:	20 91 90 01 	lds	r18, 0x0190
    2628:	30 91 91 01 	lds	r19, 0x0191
    262c:	40 91 92 01 	lds	r20, 0x0192
    2630:	50 91 93 01 	lds	r21, 0x0193
    2634:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__subsf3>
    2638:	0e 94 b5 1c 	call	0x396a	; 0x396a <__fixsfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	0e 94 af 19 	call	0x335e	; 0x335e <m_usb_tx_int>
	      m_usb_tx_string("\n");
    2644:	89 e7       	ldi	r24, 0x79	; 121
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	0e 94 db 18 	call	0x31b6	; 0x31b6 <print_P>
	    }
      
    
	wireless_buffer_f = false;
    264c:	10 92 63 01 	sts	0x0163, r1
	char inst = wireless_buffer[0];
    2650:	80 91 64 01 	lds	r24, 0x0164
	
	switch(inst) 
    2654:	81 3a       	cpi	r24, 0xA1	; 161
    2656:	09 f4       	brne	.+2      	; 0x265a <state_play+0x3f2>
    2658:	0f ce       	rjmp	.-994    	; 0x2278 <state_play+0x10>
    265a:	84 3a       	cpi	r24, 0xA4	; 164
    265c:	19 f4       	brne	.+6      	; 0x2664 <state_play+0x3fc>
	{
		case 0xA4:
			state_pause();
    265e:	0e 94 2b 11 	call	0x2256	; 0x2256 <state_pause>
    2662:	0a c0       	rjmp	.+20     	; 0x2678 <state_play+0x410>
			break;
		case 0xA1:
			state_play();
			return;
		default:
			state_before_game();
    2664:	0e 94 41 13 	call	0x2682	; 0x2682 <state_before_game>
    2668:	07 c0       	rjmp	.+14     	; 0x2678 <state_play+0x410>
	      puck_status = 2;

	    if(adc_values[1]>800 && (adc_values[1]-adc_values[2] < -100 || adc_values[1]-adc_values[2] > 100) && adc_values[1]>adc_values[3])
	      puck_status = 2;

	    if(adc_values[1]>800 && (adc_values[1]-adc_values[2] > -100 && adc_values[1]-adc_values[2] < 100))
    266a:	2d 59       	subi	r18, 0x9D	; 157
    266c:	3f 4f       	sbci	r19, 0xFF	; 255
    266e:	27 3c       	cpi	r18, 0xC7	; 199
    2670:	31 05       	cpc	r19, r1
    2672:	08 f4       	brcc	.+2      	; 0x2676 <state_play+0x40e>
    2674:	0a cf       	rjmp	.-492    	; 0x248a <state_play+0x222>
    2676:	0d cf       	rjmp	.-486    	; 0x2492 <state_play+0x22a>
			return;
		default:
			state_before_game();
			return;
	}
}
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	08 95       	ret

00002682 <state_before_game>:
    2682:	20 e9       	ldi	r18, 0x90	; 144
    2684:	31 e0       	ldi	r19, 0x01	; 1
	state_before_game();
}

void state_before_game()
{ 		
m_red(ON);
    2686:	6e 9a       	sbi	0x0d, 6	; 13
    2688:	76 98       	cbi	0x0e, 6	; 14
	while(!wireless_buffer_f);
    268a:	80 91 63 01 	lds	r24, 0x0163
    268e:	88 23       	and	r24, r24
    2690:	e1 f3       	breq	.-8      	; 0x268a <state_before_game+0x8>
	m_red(OFF);
    2692:	6e 9a       	sbi	0x0d, 6	; 13
    2694:	76 9a       	sbi	0x0e, 6	; 14
	wireless_buffer_f = false;
    2696:	10 92 63 01 	sts	0x0163, r1
	char inst = wireless_buffer[0];
    269a:	80 91 64 01 	lds	r24, 0x0164
	switch(wireless_buffer[0]) 
    269e:	80 91 64 01 	lds	r24, 0x0164
    26a2:	80 3a       	cpi	r24, 0xA0	; 160
    26a4:	19 f0       	breq	.+6      	; 0x26ac <state_before_game+0x2a>
    26a6:	81 3a       	cpi	r24, 0xA1	; 161
    26a8:	71 f7       	brne	.-36     	; 0x2686 <state_before_game+0x4>
    26aa:	26 c0       	rjmp	.+76     	; 0x26f8 <state_before_game+0x76>
	{
		case 0xA0:
			m_green(ON);
    26ac:	6a 9a       	sbi	0x0d, 2	; 13
    26ae:	72 98       	cbi	0x0e, 2	; 14
			m_red(ON);
    26b0:	6e 9a       	sbi	0x0d, 6	; 13
    26b2:	76 98       	cbi	0x0e, 6	; 14
    26b4:	80 e1       	ldi	r24, 0x10	; 16
    26b6:	97 e2       	ldi	r25, 0x27	; 39
    26b8:	f9 01       	movw	r30, r18
    26ba:	31 97       	sbiw	r30, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <state_before_game+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	d9 f7       	brne	.-10     	; 0x26b8 <state_before_game+0x36>
			m_wait(1000);
			m_green(OFF);
    26c2:	6a 9a       	sbi	0x0d, 2	; 13
    26c4:	72 9a       	sbi	0x0e, 2	; 14
			m_red(OFF);
    26c6:	6e 9a       	sbi	0x0d, 6	; 13
    26c8:	76 9a       	sbi	0x0e, 6	; 14
    26ca:	80 e1       	ldi	r24, 0x10	; 16
    26cc:	97 e2       	ldi	r25, 0x27	; 39
    26ce:	f9 01       	movw	r30, r18
    26d0:	31 97       	sbiw	r30, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <state_before_game+0x4e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	d9 f7       	brne	.-10     	; 0x26ce <state_before_game+0x4c>
			m_wait(1000);
			m_green(ON);
    26d8:	6a 9a       	sbi	0x0d, 2	; 13
    26da:	72 98       	cbi	0x0e, 2	; 14
			m_red(ON);
    26dc:	6e 9a       	sbi	0x0d, 6	; 13
    26de:	76 98       	cbi	0x0e, 6	; 14
    26e0:	80 e1       	ldi	r24, 0x10	; 16
    26e2:	97 e2       	ldi	r25, 0x27	; 39
    26e4:	f9 01       	movw	r30, r18
    26e6:	31 97       	sbiw	r30, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <state_before_game+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	d9 f7       	brne	.-10     	; 0x26e4 <state_before_game+0x62>
			m_wait(1000);
			m_green(OFF);
    26ee:	6a 9a       	sbi	0x0d, 2	; 13
    26f0:	72 9a       	sbi	0x0e, 2	; 14
			m_red(OFF);
    26f2:	6e 9a       	sbi	0x0d, 6	; 13
    26f4:	76 9a       	sbi	0x0e, 6	; 14
    26f6:	c7 cf       	rjmp	.-114    	; 0x2686 <state_before_game+0x4>
			state_before_game();
			break;
		case 0xA1:
			state_play();
    26f8:	0e 94 34 11 	call	0x2268	; 0x2268 <state_play>
			break;
		default:
			state_before_game();
			break;
	}
}
    26fc:	08 95       	ret

000026fe <state_detangle>:
	set_right(0);
}

void state_detangle()
{
	set_left(-30);
    26fe:	82 ee       	ldi	r24, 0xE2	; 226
    2700:	9f ef       	ldi	r25, 0xFF	; 255
    2702:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_left>
	set_right(-30);
    2706:	82 ee       	ldi	r24, 0xE2	; 226
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <set_right>
	while(!wireless_buffer_f);
    270e:	80 91 63 01 	lds	r24, 0x0163
    2712:	88 23       	and	r24, r24
    2714:	e1 f3       	breq	.-8      	; 0x270e <state_detangle+0x10>
	wireless_buffer_f = false;
    2716:	10 92 63 01 	sts	0x0163, r1
	char inst = wireless_buffer[0];
    271a:	80 91 64 01 	lds	r24, 0x0164
	switch(inst)
    271e:	81 3a       	cpi	r24, 0xA1	; 161
    2720:	29 f0       	breq	.+10     	; 0x272c <state_detangle+0x2e>
    2722:	84 3a       	cpi	r24, 0xA4	; 164
    2724:	31 f4       	brne	.+12     	; 0x2732 <state_detangle+0x34>
	{
		case 0xA4:
			state_pause();
    2726:	0e 94 2b 11 	call	0x2256	; 0x2256 <state_pause>
    272a:	08 95       	ret
			return;
		case 0xA1:
			state_play();
    272c:	0e 94 34 11 	call	0x2268	; 0x2268 <state_play>
    2730:	08 95       	ret
			return;
		default:
			state_before_game();
    2732:	0e 94 41 13 	call	0x2682	; 0x2682 <state_before_game>
    2736:	08 95       	ret

00002738 <goalie>:
int adc_values[12];

void goalie(){

  //displaying two flashes to know robot is ready and waiting for start
  m_red(ON);
    2738:	6e 9a       	sbi	0x0d, 6	; 13
    273a:	76 98       	cbi	0x0e, 6	; 14
  m_green(ON);
    273c:	6a 9a       	sbi	0x0d, 2	; 13
    273e:	72 98       	cbi	0x0e, 2	; 14
  wait(.25);
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <wait>
  m_green(OFF);
    2748:	6a 9a       	sbi	0x0d, 2	; 13
    274a:	72 9a       	sbi	0x0e, 2	; 14
  m_red(OFF);
    274c:	6e 9a       	sbi	0x0d, 6	; 13
    274e:	76 9a       	sbi	0x0e, 6	; 14
	wait(.25);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <wait>
  m_red(ON);
    2758:	6e 9a       	sbi	0x0d, 6	; 13
    275a:	76 98       	cbi	0x0e, 6	; 14
  m_green(ON);
    275c:	6a 9a       	sbi	0x0d, 2	; 13
    275e:	72 98       	cbi	0x0e, 2	; 14
  wait(.25);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <wait>
  m_red(OFF);
    2768:	6e 9a       	sbi	0x0d, 6	; 13
    276a:	76 9a       	sbi	0x0e, 6	; 14
	wait(.25);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <wait>

  //initializing center ice
  set_position(1024/2,768/2);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	92 e0       	ldi	r25, 0x02	; 2
    2778:	60 e8       	ldi	r22, 0x80	; 128
    277a:	71 e0       	ldi	r23, 0x01	; 1
    277c:	0e 94 47 01 	call	0x28e	; 0x28e <set_position>
  get_position(blobs, &x_center, &y_center, &theta_zero);
    2780:	83 e4       	ldi	r24, 0x43	; 67
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	68 e8       	ldi	r22, 0x88	; 136
    2786:	71 e0       	ldi	r23, 0x01	; 1
    2788:	48 e9       	ldi	r20, 0x98	; 152
    278a:	51 e0       	ldi	r21, 0x01	; 1
    278c:	20 e9       	ldi	r18, 0x90	; 144
    278e:	31 e0       	ldi	r19, 0x01	; 1
    2790:	0e 94 0a 02 	call	0x414	; 0x414 <get_position>

  // set voltage reference to 5V
  clear(ADMUX, REFS1);
    2794:	ec e7       	ldi	r30, 0x7C	; 124
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8f 77       	andi	r24, 0x7F	; 127
    279c:	80 83       	st	Z, r24
  set(ADMUX, REFS0);
    279e:	80 81       	ld	r24, Z
    27a0:	80 64       	ori	r24, 0x40	; 64
    27a2:	80 83       	st	Z, r24

  m_disableJTAG();//allowing gpio of F pins
    27a4:	80 e8       	ldi	r24, 0x80	; 128
    27a6:	85 bf       	out	0x35, r24	; 53
    27a8:	85 bf       	out	0x35, r24	; 53

  //setting ADC prescaler
  set(ADCSRA,ADPS2);
    27aa:	aa e7       	ldi	r26, 0x7A	; 122
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	8c 91       	ld	r24, X
    27b0:	84 60       	ori	r24, 0x04	; 4
    27b2:	8c 93       	st	X, r24
  set(ADCSRA,ADPS1);
    27b4:	8c 91       	ld	r24, X
    27b6:	82 60       	ori	r24, 0x02	; 2
    27b8:	8c 93       	st	X, r24
  set(ADCSRA,ADPS0);
    27ba:	8c 91       	ld	r24, X
    27bc:	81 60       	ori	r24, 0x01	; 1
    27be:	8c 93       	st	X, r24

  //setting pins to turn off digital circuitry
  set(DIDR0,ADC4D);//setting F4
    27c0:	ee e7       	ldi	r30, 0x7E	; 126
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	80 61       	ori	r24, 0x10	; 16
    27c8:	80 83       	st	Z, r24
  set(DIDR0,ADC6D);//setting F6
    27ca:	80 81       	ld	r24, Z
    27cc:	80 64       	ori	r24, 0x40	; 64
    27ce:	80 83       	st	Z, r24
  set(DIDR2,ADC8D);//setting D4
    27d0:	ed e7       	ldi	r30, 0x7D	; 125
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	81 60       	ori	r24, 0x01	; 1
    27d8:	80 83       	st	Z, r24
  set(DIDR2,ADC9D);//setting D6
    27da:	80 81       	ld	r24, Z
    27dc:	82 60       	ori	r24, 0x02	; 2
    27de:	80 83       	st	Z, r24

  set(ADCSRA,ADATE);//setting triggering to free running
    27e0:	8c 91       	ld	r24, X
    27e2:	80 62       	ori	r24, 0x20	; 32
    27e4:	8c 93       	st	X, r24
  
  //setting pins for output & setting pins high to supply power to phototransistors
  set(DDRF,5);//F5
    27e6:	85 9a       	sbi	0x10, 5	; 16
  set(PORTF,5);
    27e8:	8d 9a       	sbi	0x11, 5	; 17
  set(DDRF,7);//F7
    27ea:	87 9a       	sbi	0x10, 7	; 16
  set(PORTF,7);
    27ec:	8f 9a       	sbi	0x11, 7	; 17
  set(DDRB,3);//B3
    27ee:	23 9a       	sbi	0x04, 3	; 4
  set(PORTB,3);
    27f0:	2b 9a       	sbi	0x05, 3	; 5
  set(DDRD,3);//D3
    27f2:	53 9a       	sbi	0x0a, 3	; 10
  set(PORTD,3);
    27f4:	5b 9a       	sbi	0x0b, 3	; 11

  set(DDRF,0);//setting  pins to turn the sprinner motors
    27f6:	80 9a       	sbi	0x10, 0	; 16
  set(PORTF,0);
    27f8:	88 9a       	sbi	0x11, 0	; 17
  set(DDRF,1);
    27fa:	81 9a       	sbi	0x10, 1	; 16
  set(PORTF,1);
    27fc:	89 9a       	sbi	0x11, 1	; 17

  int adc = 0;//declaring integer for adc status;
  int adc_values[4];//declaring adc array
  
  init_all();//initializing all the rest
    27fe:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <init_all>
    
	state_before_game();
    2802:	0e 94 41 13 	call	0x2682	; 0x2682 <state_before_game>
}
    2806:	08 95       	ret

00002808 <m_bus_init>:
#include "m_bus.h"

void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2808:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    280a:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    280c:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    280e:	8c e0       	ldi	r24, 0x0C	; 12
    2810:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2814:	e9 e6       	ldi	r30, 0x69	; 105
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	80 62       	ori	r24, 0x20	; 32
    281c:	80 83       	st	Z, r24
    281e:	80 81       	ld	r24, Z
    2820:	8f 7e       	andi	r24, 0xEF	; 239
    2822:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2824:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2826:	78 94       	sei
    2828:	08 95       	ret

0000282a <m_rf_read>:
	
	return 1;
}

char m_rf_read(char* buffer, char packet_length)
{
    282a:	9c 01       	movw	r18, r24

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    282c:	84 ea       	ldi	r24, 0xA4	; 164
    282e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2832:	80 91 bc 00 	lds	r24, 0x00BC
    2836:	87 ff       	sbrs	r24, 7
    2838:	fc cf       	rjmp	.-8      	; 0x2832 <m_rf_read+0x8>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    283a:	81 e5       	ldi	r24, 0x51	; 81
    283c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2840:	84 e8       	ldi	r24, 0x84	; 132
    2842:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2846:	80 91 bc 00 	lds	r24, 0x00BC
    284a:	87 ff       	sbrs	r24, 7
    284c:	fc cf       	rjmp	.-8      	; 0x2846 <m_rf_read+0x1c>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    284e:	80 91 b9 00 	lds	r24, 0x00B9
    2852:	88 7f       	andi	r24, 0xF8	; 248
    2854:	88 34       	cpi	r24, 0x48	; 72
    2856:	91 f0       	breq	.+36     	; 0x287c <m_rf_read+0x52>
		return 0; // not connected/listening
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2858:	84 ec       	ldi	r24, 0xC4	; 196
    285a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    285e:	80 91 bc 00 	lds	r24, 0x00BC
    2862:	87 ff       	sbrs	r24, 7
    2864:	fc cf       	rjmp	.-8      	; 0x285e <m_rf_read+0x34>
	bytes = TWDR;
    2866:	80 91 bb 00 	lds	r24, 0x00BB
	if(bytes != packet_length){
    286a:	86 17       	cp	r24, r22
    286c:	39 f4       	brne	.+14     	; 0x287c <m_rf_read+0x52>
    286e:	a0 e0       	ldi	r26, 0x00	; 0
    2870:	b0 e0       	ldi	r27, 0x00	; 0
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	61 50       	subi	r22, 0x01	; 1
    2876:	70 40       	sbci	r23, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2878:	94 ec       	ldi	r25, 0xC4	; 196
    287a:	12 c0       	rjmp	.+36     	; 0x28a0 <m_rf_read+0x76>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    287c:	84 e9       	ldi	r24, 0x94	; 148
    287e:	80 93 bc 00 	sts	0x00BC, r24
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	08 95       	ret
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2886:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    288a:	80 91 bc 00 	lds	r24, 0x00BC
    288e:	87 ff       	sbrs	r24, 7
    2890:	fc cf       	rjmp	.-8      	; 0x288a <m_rf_read+0x60>
		buffer[i] = TWDR;
    2892:	80 91 bb 00 	lds	r24, 0x00BB
    2896:	f9 01       	movw	r30, r18
    2898:	ea 0f       	add	r30, r26
    289a:	fb 1f       	adc	r31, r27
    289c:	80 83       	st	Z, r24
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    289e:	11 96       	adiw	r26, 0x01	; 1
    28a0:	a6 17       	cp	r26, r22
    28a2:	b7 07       	cpc	r27, r23
    28a4:	84 f3       	brlt	.-32     	; 0x2886 <m_rf_read+0x5c>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    28a6:	84 e8       	ldi	r24, 0x84	; 132
    28a8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    28ac:	80 91 bc 00 	lds	r24, 0x00BC
    28b0:	87 ff       	sbrs	r24, 7
    28b2:	fc cf       	rjmp	.-8      	; 0x28ac <m_rf_read+0x82>
	buffer[i++] = TWDR;
    28b4:	80 91 bb 00 	lds	r24, 0x00BB
    28b8:	a2 0f       	add	r26, r18
    28ba:	b3 1f       	adc	r27, r19
    28bc:	8c 93       	st	X, r24
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    28be:	84 e9       	ldi	r24, 0x94	; 148
    28c0:	80 93 bc 00 	sts	0x00BC, r24
    28c4:	81 e0       	ldi	r24, 0x01	; 1

	return 1;
}
    28c6:	08 95       	ret

000028c8 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    28c8:	98 2f       	mov	r25, r24
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    28ca:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    28cc:	84 ea       	ldi	r24, 0xA4	; 164
    28ce:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    28d2:	80 91 bc 00 	lds	r24, 0x00BC
    28d6:	87 ff       	sbrs	r24, 7
    28d8:	fc cf       	rjmp	.-8      	; 0x28d2 <m_rf_send+0xa>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    28da:	80 e5       	ldi	r24, 0x50	; 80
    28dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    28e0:	84 e8       	ldi	r24, 0x84	; 132
    28e2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    28e6:	80 91 bc 00 	lds	r24, 0x00BC
    28ea:	87 ff       	sbrs	r24, 7
    28ec:	fc cf       	rjmp	.-8      	; 0x28e6 <m_rf_send+0x1e>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    28ee:	80 91 b9 00 	lds	r24, 0x00B9
    28f2:	88 7f       	andi	r24, 0xF8	; 248
    28f4:	80 32       	cpi	r24, 0x20	; 32
    28f6:	31 f4       	brne	.+12     	; 0x2904 <m_rf_send+0x3c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    28f8:	84 e9       	ldi	r24, 0x94	; 148
    28fa:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    28fe:	78 94       	sei
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	08 95       	ret
		return 0;
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    290a:	84 e8       	ldi	r24, 0x84	; 132
    290c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2910:	80 91 bc 00 	lds	r24, 0x00BC
    2914:	87 ff       	sbrs	r24, 7
    2916:	fc cf       	rjmp	.-8      	; 0x2910 <m_rf_send+0x48>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    2918:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    291c:	84 e8       	ldi	r24, 0x84	; 132
    291e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2922:	80 91 bc 00 	lds	r24, 0x00BC
    2926:	87 ff       	sbrs	r24, 7
    2928:	fc cf       	rjmp	.-8      	; 0x2922 <m_rf_send+0x5a>
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0

	// SEND DATA
	for(i=0;i<packet_length;i++){
    292e:	50 e0       	ldi	r21, 0x00	; 0
		TWDR = buffer[i];
		TWCR = (1<<TWINT) | (1<<TWEN);
    2930:	94 e8       	ldi	r25, 0x84	; 132
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <m_rf_send+0x88>
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    2934:	fb 01       	movw	r30, r22
    2936:	e2 0f       	add	r30, r18
    2938:	f3 1f       	adc	r31, r19
    293a:	80 81       	ld	r24, Z
    293c:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1<<TWINT) | (1<<TWEN);
    2940:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){};
    2944:	80 91 bc 00 	lds	r24, 0x00BC
    2948:	87 ff       	sbrs	r24, 7
    294a:	fc cf       	rjmp	.-8      	; 0x2944 <m_rf_send+0x7c>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    294c:	2f 5f       	subi	r18, 0xFF	; 255
    294e:	3f 4f       	sbci	r19, 0xFF	; 255
    2950:	24 17       	cp	r18, r20
    2952:	35 07       	cpc	r19, r21
    2954:	7c f3       	brlt	.-34     	; 0x2934 <m_rf_send+0x6c>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2956:	84 e9       	ldi	r24, 0x94	; 148
    2958:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    295c:	78 94       	sei
    295e:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
    2960:	08 95       	ret

00002962 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	18 2f       	mov	r17, r24
    296a:	06 2f       	mov	r16, r22
    296c:	f4 2e       	mov	r15, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    296e:	0e 94 04 14 	call	0x2808	; 0x2808 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2972:	84 ea       	ldi	r24, 0xA4	; 164
    2974:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2978:	80 91 bc 00 	lds	r24, 0x00BC
    297c:	87 ff       	sbrs	r24, 7
    297e:	fc cf       	rjmp	.-8      	; 0x2978 <m_rf_open+0x16>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2980:	80 e5       	ldi	r24, 0x50	; 80
    2982:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2986:	84 e8       	ldi	r24, 0x84	; 132
    2988:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    298c:	80 91 bc 00 	lds	r24, 0x00BC
    2990:	87 ff       	sbrs	r24, 7
    2992:	fc cf       	rjmp	.-8      	; 0x298c <m_rf_open+0x2a>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2994:	80 91 b9 00 	lds	r24, 0x00B9
    2998:	88 7f       	andi	r24, 0xF8	; 248
    299a:	80 32       	cpi	r24, 0x20	; 32
    299c:	29 f4       	brne	.+10     	; 0x29a8 <m_rf_open+0x46>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    299e:	84 e9       	ldi	r24, 0x94	; 148
    29a0:	80 93 bc 00 	sts	0x00BC, r24
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	29 c0       	rjmp	.+82     	; 0x29fa <m_rf_open+0x98>
		return 0;
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    29ae:	84 e8       	ldi	r24, 0x84	; 132
    29b0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29b4:	80 91 bc 00 	lds	r24, 0x00BC
    29b8:	87 ff       	sbrs	r24, 7
    29ba:	fc cf       	rjmp	.-8      	; 0x29b4 <m_rf_open+0x52>
	
	// SEND DATA
	TWDR = channel;
    29bc:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    29c0:	84 e8       	ldi	r24, 0x84	; 132
    29c2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29c6:	80 91 bc 00 	lds	r24, 0x00BC
    29ca:	87 ff       	sbrs	r24, 7
    29cc:	fc cf       	rjmp	.-8      	; 0x29c6 <m_rf_open+0x64>
	
	TWDR = RXaddress;
    29ce:	00 93 bb 00 	sts	0x00BB, r16
	TWCR = (1<<TWINT) | (1<<TWEN);
    29d2:	84 e8       	ldi	r24, 0x84	; 132
    29d4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29d8:	80 91 bc 00 	lds	r24, 0x00BC
    29dc:	87 ff       	sbrs	r24, 7
    29de:	fc cf       	rjmp	.-8      	; 0x29d8 <m_rf_open+0x76>
	
	TWDR = packet_length;
    29e0:	f0 92 bb 00 	sts	0x00BB, r15
	TWCR = (1<<TWINT) | (1<<TWEN);
    29e4:	84 e8       	ldi	r24, 0x84	; 132
    29e6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29ea:	80 91 bc 00 	lds	r24, 0x00BC
    29ee:	87 ff       	sbrs	r24, 7
    29f0:	fc cf       	rjmp	.-8      	; 0x29ea <m_rf_open+0x88>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    29f2:	84 e9       	ldi	r24, 0x94	; 148
    29f4:	80 93 bc 00 	sts	0x00BC, r24
    29f8:	81 e0       	ldi	r24, 0x01	; 1
	
	return 1;
}
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	ff 90       	pop	r15
    2a00:	08 95       	ret

00002a02 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
    2a08:	80 ea       	ldi	r24, 0xA0	; 160
    2a0a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
    2a0e:	82 e1       	ldi	r24, 0x12	; 18
    2a10:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    2a12:	09 b4       	in	r0, 0x29	; 41
    2a14:	00 fe       	sbrs	r0, 0
    2a16:	fd cf       	rjmp	.-6      	; 0x2a12 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
    2a18:	80 e9       	ldi	r24, 0x90	; 144
    2a1a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    2a1e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    2a22:	10 92 5b 01 	sts	0x015B, r1
	cdc_line_rtsdtr = 0;
    2a26:	10 92 5c 01 	sts	0x015C, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
    2a2a:	8c e0       	ldi	r24, 0x0C	; 12
    2a2c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    2a30:	78 94       	sei
}
    2a32:	08 95       	ret

00002a34 <m_usb_isconnected>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
char m_usb_isconnected(void)
{
	return (char)usb_configuration;
    2a34:	80 91 5b 01 	lds	r24, 0x015B
}
    2a38:	08 95       	ret

00002a3a <m_usb_rx_char>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2a3a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2a3c:	f8 94       	cli
	if (!usb_configuration) {
    2a3e:	80 91 5b 01 	lds	r24, 0x015B
    2a42:	88 23       	and	r24, r24
    2a44:	39 f0       	breq	.+14     	; 0x2a54 <m_usb_rx_char+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    2a4c:	80 91 e8 00 	lds	r24, 0x00E8
    2a50:	85 fd       	sbrc	r24, 5
    2a52:	03 c0       	rjmp	.+6      	; 0x2a5a <m_usb_rx_char+0x20>
		// no data in buffer
		SREG = intr_state;
    2a54:	2f bf       	out	0x3f, r18	; 63
    2a56:	9f ef       	ldi	r25, 0xFF	; 255
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <m_usb_rx_char+0x34>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
    2a5a:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
    2a5e:	80 91 e8 00 	lds	r24, 0x00E8
    2a62:	85 fd       	sbrc	r24, 5
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <m_usb_rx_char+0x32>
    2a66:	8b e6       	ldi	r24, 0x6B	; 107
    2a68:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    2a6c:	2f bf       	out	0x3f, r18	; 63
	return (char)c;
}
    2a6e:	89 2f       	mov	r24, r25
    2a70:	08 95       	ret

00002a72 <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
    2a72:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2a74:	f8 94       	cli
	if (usb_configuration) {
    2a76:	80 91 5b 01 	lds	r24, 0x015B
    2a7a:	88 23       	and	r24, r24
    2a7c:	29 f0       	breq	.+10     	; 0x2a88 <m_usb_rx_available+0x16>
		UENUM = CDC_RX_ENDPOINT;
    2a7e:	83 e0       	ldi	r24, 0x03	; 3
    2a80:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
    2a84:	80 91 f2 00 	lds	r24, 0x00F2
	}
	SREG = intr_state;
    2a88:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
    2a8a:	08 95       	ret

00002a8c <m_usb_rx_flush>:
// discard any buffered input
void m_usb_rx_flush(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
    2a8c:	80 91 5b 01 	lds	r24, 0x015B
    2a90:	88 23       	and	r24, r24
    2a92:	71 f0       	breq	.+28     	; 0x2ab0 <m_usb_rx_flush+0x24>
		intr_state = SREG;
    2a94:	9f b7       	in	r25, 0x3f	; 63
		cli();
    2a96:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
    2a98:	83 e0       	ldi	r24, 0x03	; 3
    2a9a:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
    2a9e:	2b e6       	ldi	r18, 0x6B	; 107
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <m_usb_rx_flush+0x1a>
    2aa2:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
    2aa6:	80 91 e8 00 	lds	r24, 0x00E8
    2aaa:	85 fd       	sbrc	r24, 5
    2aac:	fa cf       	rjmp	.-12     	; 0x2aa2 <m_usb_rx_flush+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
    2aae:	9f bf       	out	0x3f, r25	; 63
    2ab0:	08 95       	ret

00002ab2 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
    2ab2:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2ab4:	80 91 5b 01 	lds	r24, 0x015B
    2ab8:	88 23       	and	r24, r24
    2aba:	d9 f1       	breq	.+118    	; 0x2b32 <m_usb_tx_char+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2abc:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2abe:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2ac0:	84 e0       	ldi	r24, 0x04	; 4
    2ac2:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2ac6:	80 91 5e 01 	lds	r24, 0x015E
    2aca:	88 23       	and	r24, r24
    2acc:	41 f0       	breq	.+16     	; 0x2ade <m_usb_tx_char+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
    2ace:	80 91 e8 00 	lds	r24, 0x00E8
    2ad2:	85 fd       	sbrc	r24, 5
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <m_usb_tx_char+0x28>
			SREG = intr_state;
    2ad6:	2f bf       	out	0x3f, r18	; 63
    2ad8:	12 c0       	rjmp	.+36     	; 0x2afe <m_usb_tx_char+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
    2ada:	10 92 5e 01 	sts	0x015E, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2ade:	90 91 e4 00 	lds	r25, 0x00E4
    2ae2:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
    2ae4:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    2ae6:	80 91 e8 00 	lds	r24, 0x00E8
    2aea:	85 fd       	sbrc	r24, 5
    2aec:	13 c0       	rjmp	.+38     	; 0x2b14 <m_usb_tx_char+0x62>
		SREG = intr_state;
    2aee:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    2af0:	80 91 e4 00 	lds	r24, 0x00E4
    2af4:	89 17       	cp	r24, r25
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <m_usb_tx_char+0x50>
			transmit_previous_timeout = 1;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 93 5e 01 	sts	0x015E, r24
    2afe:	8f ef       	ldi	r24, 0xFF	; 255
    2b00:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    2b02:	80 91 5b 01 	lds	r24, 0x015B
    2b06:	88 23       	and	r24, r24
    2b08:	a1 f0       	breq	.+40     	; 0x2b32 <m_usb_tx_char+0x80>
		// get ready to try checking again
		intr_state = SREG;
    2b0a:	2f b7       	in	r18, 0x3f	; 63
		cli();
    2b0c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    2b0e:	30 93 e9 00 	sts	0x00E9, r19
    2b12:	e9 cf       	rjmp	.-46     	; 0x2ae6 <m_usb_tx_char+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    2b14:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2b18:	80 91 e8 00 	lds	r24, 0x00E8
    2b1c:	85 fd       	sbrc	r24, 5
    2b1e:	03 c0       	rjmp	.+6      	; 0x2b26 <m_usb_tx_char+0x74>
    2b20:	8a e3       	ldi	r24, 0x3A	; 58
    2b22:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2b26:	85 e0       	ldi	r24, 0x05	; 5
    2b28:	80 93 5d 01 	sts	0x015D, r24
	SREG = intr_state;
    2b2c:	2f bf       	out	0x3f, r18	; 63
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	08 95       	ret
	return 0;
    2b32:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b34:	08 95       	ret

00002b36 <usb_serial_putchar_nowait>:


// transmit a character, but do not wait if the buffer is full,
//   0 returned on success, -1 on buffer full or error 
int8_t usb_serial_putchar_nowait(uint8_t c)
{
    2b36:	28 2f       	mov	r18, r24
	uint8_t intr_state;

	if (!usb_configuration) return -1;
    2b38:	80 91 5b 01 	lds	r24, 0x015B
    2b3c:	88 23       	and	r24, r24
    2b3e:	51 f0       	breq	.+20     	; 0x2b54 <usb_serial_putchar_nowait+0x1e>
	intr_state = SREG;
    2b40:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2b42:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2b44:	84 e0       	ldi	r24, 0x04	; 4
    2b46:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
    2b4a:	80 91 e8 00 	lds	r24, 0x00E8
    2b4e:	85 fd       	sbrc	r24, 5
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <usb_serial_putchar_nowait+0x22>
		// buffer is full
		SREG = intr_state;
    2b52:	9f bf       	out	0x3f, r25	; 63
    2b54:	8f ef       	ldi	r24, 0xFF	; 255
    2b56:	08 95       	ret
		return -1;
	}
	// actually write the byte into the FIFO
	UEDATX = c;
    2b58:	20 93 f1 00 	sts	0x00F1, r18
		// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2b5c:	80 91 e8 00 	lds	r24, 0x00E8
    2b60:	85 fd       	sbrc	r24, 5
    2b62:	03 c0       	rjmp	.+6      	; 0x2b6a <usb_serial_putchar_nowait+0x34>
    2b64:	8a e3       	ldi	r24, 0x3A	; 58
    2b66:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2b6a:	85 e0       	ldi	r24, 0x05	; 5
    2b6c:	80 93 5d 01 	sts	0x015D, r24
	SREG = intr_state;
    2b70:	9f bf       	out	0x3f, r25	; 63
    2b72:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    2b74:	08 95       	ret

00002b76 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    2b7c:	80 91 5b 01 	lds	r24, 0x015B
    2b80:	88 23       	and	r24, r24
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <usb_serial_write+0x10>
    2b84:	1c c1       	rjmp	.+568    	; 0x2dbe <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
    2b86:	3f b7       	in	r19, 0x3f	; 63
	cli();
    2b88:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
    2b8a:	84 e0       	ldi	r24, 0x04	; 4
    2b8c:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
    2b90:	80 91 5e 01 	lds	r24, 0x015E
    2b94:	88 23       	and	r24, r24
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <usb_serial_write+0x24>
    2b98:	07 c1       	rjmp	.+526    	; 0x2da8 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
    2b9a:	80 91 e8 00 	lds	r24, 0x00E8
    2b9e:	85 fd       	sbrc	r24, 5
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <usb_serial_write+0x30>
			SREG = intr_state;
    2ba2:	3f bf       	out	0x3f, r19	; 63
    2ba4:	0c c1       	rjmp	.+536    	; 0x2dbe <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
    2ba6:	10 92 5e 01 	sts	0x015E, r1
    2baa:	fe c0       	rjmp	.+508    	; 0x2da8 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
    2bac:	90 91 e4 00 	lds	r25, 0x00E4
    2bb0:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
    2bb2:	80 91 e8 00 	lds	r24, 0x00E8
    2bb6:	85 fd       	sbrc	r24, 5
    2bb8:	13 c0       	rjmp	.+38     	; 0x2be0 <usb_serial_write+0x6a>
			SREG = intr_state;
    2bba:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
    2bbc:	80 91 e4 00 	lds	r24, 0x00E4
    2bc0:	89 17       	cp	r24, r25
    2bc2:	21 f4       	brne	.+8      	; 0x2bcc <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 5e 01 	sts	0x015E, r24
    2bca:	f9 c0       	rjmp	.+498    	; 0x2dbe <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
    2bcc:	80 91 5b 01 	lds	r24, 0x015B
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <usb_serial_write+0x60>
    2bd4:	f4 c0       	rjmp	.+488    	; 0x2dbe <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
    2bd6:	3f b7       	in	r19, 0x3f	; 63
			cli();
    2bd8:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
    2bda:	50 93 e9 00 	sts	0x00E9, r21
    2bde:	e9 cf       	rjmp	.-46     	; 0x2bb2 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    2be0:	80 91 f2 00 	lds	r24, 0x00F2
    2be4:	2a 2f       	mov	r18, r26
    2be6:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
    2be8:	82 2f       	mov	r24, r18
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	68 17       	cp	r22, r24
    2bee:	79 07       	cpc	r23, r25
    2bf0:	08 f4       	brcc	.+2      	; 0x2bf4 <usb_serial_write+0x7e>
    2bf2:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
    2bf4:	82 2f       	mov	r24, r18
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	81 34       	cpi	r24, 0x41	; 65
    2bfa:	91 05       	cpc	r25, r1
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <usb_serial_write+0x8a>
    2bfe:	c6 c0       	rjmp	.+396    	; 0x2d8c <usb_serial_write+0x216>
    2c00:	8a 5a       	subi	r24, 0xAA	; 170
    2c02:	9f 4f       	sbci	r25, 0xFF	; 255
    2c04:	fc 01       	movw	r30, r24
    2c06:	ee 0f       	add	r30, r30
    2c08:	ff 1f       	adc	r31, r31
    2c0a:	05 90       	lpm	r0, Z+
    2c0c:	f4 91       	lpm	r31, Z+
    2c0e:	e0 2d       	mov	r30, r0
    2c10:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
    2c12:	89 91       	ld	r24, Y+
    2c14:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
    2c18:	89 91       	ld	r24, Y+
    2c1a:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
    2c1e:	89 91       	ld	r24, Y+
    2c20:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
    2c24:	89 91       	ld	r24, Y+
    2c26:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
    2c2a:	89 91       	ld	r24, Y+
    2c2c:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
    2c30:	89 91       	ld	r24, Y+
    2c32:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
    2c36:	89 91       	ld	r24, Y+
    2c38:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
    2c3c:	89 91       	ld	r24, Y+
    2c3e:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
    2c42:	89 91       	ld	r24, Y+
    2c44:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
    2c48:	89 91       	ld	r24, Y+
    2c4a:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
    2c4e:	89 91       	ld	r24, Y+
    2c50:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
    2c54:	89 91       	ld	r24, Y+
    2c56:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
    2c5a:	89 91       	ld	r24, Y+
    2c5c:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
    2c60:	89 91       	ld	r24, Y+
    2c62:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
    2c66:	89 91       	ld	r24, Y+
    2c68:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
    2c6c:	89 91       	ld	r24, Y+
    2c6e:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
    2c72:	89 91       	ld	r24, Y+
    2c74:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
    2c78:	89 91       	ld	r24, Y+
    2c7a:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
    2c7e:	89 91       	ld	r24, Y+
    2c80:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
    2c84:	89 91       	ld	r24, Y+
    2c86:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
    2c8a:	89 91       	ld	r24, Y+
    2c8c:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
    2c90:	89 91       	ld	r24, Y+
    2c92:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
    2c96:	89 91       	ld	r24, Y+
    2c98:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
    2c9c:	89 91       	ld	r24, Y+
    2c9e:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
    2ca2:	89 91       	ld	r24, Y+
    2ca4:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
    2ca8:	89 91       	ld	r24, Y+
    2caa:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
    2cae:	89 91       	ld	r24, Y+
    2cb0:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
    2cb4:	89 91       	ld	r24, Y+
    2cb6:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
    2cba:	89 91       	ld	r24, Y+
    2cbc:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
    2cc0:	89 91       	ld	r24, Y+
    2cc2:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
    2cc6:	89 91       	ld	r24, Y+
    2cc8:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
    2ccc:	89 91       	ld	r24, Y+
    2cce:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
    2cd2:	89 91       	ld	r24, Y+
    2cd4:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
    2cd8:	89 91       	ld	r24, Y+
    2cda:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
    2cde:	89 91       	ld	r24, Y+
    2ce0:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
    2ce4:	89 91       	ld	r24, Y+
    2ce6:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
    2cea:	89 91       	ld	r24, Y+
    2cec:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
    2cf0:	89 91       	ld	r24, Y+
    2cf2:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
    2cf6:	89 91       	ld	r24, Y+
    2cf8:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
    2cfc:	89 91       	ld	r24, Y+
    2cfe:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
    2d02:	89 91       	ld	r24, Y+
    2d04:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
    2d08:	89 91       	ld	r24, Y+
    2d0a:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
    2d0e:	89 91       	ld	r24, Y+
    2d10:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
    2d14:	89 91       	ld	r24, Y+
    2d16:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
    2d1a:	89 91       	ld	r24, Y+
    2d1c:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
    2d20:	89 91       	ld	r24, Y+
    2d22:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
    2d26:	89 91       	ld	r24, Y+
    2d28:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
    2d2c:	89 91       	ld	r24, Y+
    2d2e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    2d32:	89 91       	ld	r24, Y+
    2d34:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
    2d38:	89 91       	ld	r24, Y+
    2d3a:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
    2d3e:	89 91       	ld	r24, Y+
    2d40:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
    2d44:	89 91       	ld	r24, Y+
    2d46:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
    2d4a:	89 91       	ld	r24, Y+
    2d4c:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
    2d50:	89 91       	ld	r24, Y+
    2d52:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
    2d56:	89 91       	ld	r24, Y+
    2d58:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
    2d5c:	89 91       	ld	r24, Y+
    2d5e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
    2d62:	89 91       	ld	r24, Y+
    2d64:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
    2d68:	89 91       	ld	r24, Y+
    2d6a:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
    2d6e:	89 91       	ld	r24, Y+
    2d70:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
    2d74:	89 91       	ld	r24, Y+
    2d76:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
    2d7a:	89 91       	ld	r24, Y+
    2d7c:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
    2d80:	89 91       	ld	r24, Y+
    2d82:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
    2d86:	89 91       	ld	r24, Y+
    2d88:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
    2d8c:	89 91       	ld	r24, Y+
    2d8e:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2d92:	80 91 e8 00 	lds	r24, 0x00E8
    2d96:	85 fd       	sbrc	r24, 5
    2d98:	02 c0       	rjmp	.+4      	; 0x2d9e <usb_serial_write+0x228>
    2d9a:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
    2d9e:	62 1b       	sub	r22, r18
    2da0:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2da2:	40 93 5d 01 	sts	0x015D, r20
    2da6:	04 c0       	rjmp	.+8      	; 0x2db0 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
    2da8:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    2daa:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    2dac:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    2dae:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    2db0:	61 15       	cp	r22, r1
    2db2:	71 05       	cpc	r23, r1
    2db4:	09 f0       	breq	.+2      	; 0x2db8 <usb_serial_write+0x242>
    2db6:	fa ce       	rjmp	.-524    	; 0x2bac <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    2db8:	3f bf       	out	0x3f, r19	; 63
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	01 c0       	rjmp	.+2      	; 0x2dc0 <usb_serial_write+0x24a>
	return 0;
    2dbe:	8f ef       	ldi	r24, 0xFF	; 255
}
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	08 95       	ret

00002dc6 <m_usb_tx_push>:
// we can do is release the FIFO buffer for when the host wants it
void m_usb_tx_push(void)
{
	uint8_t intr_state;

	intr_state = SREG;
    2dc6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2dc8:	f8 94       	cli
	if (transmit_flush_timer) {
    2dca:	80 91 5d 01 	lds	r24, 0x015D
    2dce:	88 23       	and	r24, r24
    2dd0:	41 f0       	breq	.+16     	; 0x2de2 <m_usb_tx_push+0x1c>
		UENUM = CDC_TX_ENDPOINT;
    2dd2:	84 e0       	ldi	r24, 0x04	; 4
    2dd4:	80 93 e9 00 	sts	0x00E9, r24
		UEINTX = 0x3A;
    2dd8:	8a e3       	ldi	r24, 0x3A	; 58
    2dda:	80 93 e8 00 	sts	0x00E8, r24
		transmit_flush_timer = 0;
    2dde:	10 92 5d 01 	sts	0x015D, r1
	}
	SREG = intr_state;
    2de2:	9f bf       	out	0x3f, r25	; 63
}
    2de4:	08 95       	ret

00002de6 <usb_serial_get_baud>:
// aren't actually used by USB at all (communication is always
// at full USB speed), but they are set by the host so we can
// set them properly if we're converting the USB to a real serial
// communication
uint32_t usb_serial_get_baud(void)
{
    2de6:	60 91 38 01 	lds	r22, 0x0138
    2dea:	70 91 39 01 	lds	r23, 0x0139
	return *(uint32_t *)cdc_line_coding;
}
    2dee:	80 91 3a 01 	lds	r24, 0x013A
    2df2:	90 91 3b 01 	lds	r25, 0x013B
    2df6:	08 95       	ret

00002df8 <usb_serial_get_stopbits>:
uint8_t usb_serial_get_stopbits(void)
{
	return cdc_line_coding[4];
}
    2df8:	80 91 3c 01 	lds	r24, 0x013C
    2dfc:	08 95       	ret

00002dfe <usb_serial_get_paritytype>:
uint8_t usb_serial_get_paritytype(void)
{
	return cdc_line_coding[5];
}
    2dfe:	80 91 3d 01 	lds	r24, 0x013D
    2e02:	08 95       	ret

00002e04 <usb_serial_get_numbits>:
uint8_t usb_serial_get_numbits(void)
{
	return cdc_line_coding[6];
}
    2e04:	80 91 3e 01 	lds	r24, 0x013E
    2e08:	08 95       	ret

00002e0a <usb_serial_get_control>:
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
    2e0a:	80 91 5c 01 	lds	r24, 0x015C
    2e0e:	08 95       	ret

00002e10 <usb_serial_set_control>:
// lost because you weren't listening at the right time, like it
// would in real serial communication.
// TODO: this function is untested.  Does it work?  Please email
// paul@pjrc.com if you have tried it....
int8_t usb_serial_set_control(uint8_t signals)
{
    2e10:	38 2f       	mov	r19, r24
	uint8_t intr_state;

	intr_state = SREG;
    2e12:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2e14:	f8 94       	cli
	if (!usb_configuration) {
    2e16:	80 91 5b 01 	lds	r24, 0x015B
    2e1a:	88 23       	and	r24, r24
    2e1c:	39 f0       	breq	.+14     	; 0x2e2c <usb_serial_set_control+0x1c>
		// we're not enumerated/configured
		SREG = intr_state;
		return -1;
	}

	UENUM = CDC_ACM_ENDPOINT;
    2e1e:	22 e0       	ldi	r18, 0x02	; 2
    2e20:	20 93 e9 00 	sts	0x00E9, r18
	if (!(UEINTX & (1<<RWAL))) {
    2e24:	80 91 e8 00 	lds	r24, 0x00E8
    2e28:	85 fd       	sbrc	r24, 5
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <usb_serial_set_control+0x22>
		// unable to write
		// TODO; should this try to abort the previously
		// buffered message??
		SREG = intr_state;
    2e2c:	9f bf       	out	0x3f, r25	; 63
    2e2e:	8f ef       	ldi	r24, 0xFF	; 255
    2e30:	08 95       	ret
		return -1;
	}
	UEDATX = 0xA1;
    2e32:	81 ea       	ldi	r24, 0xA1	; 161
    2e34:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0x20;
    2e38:	80 e2       	ldi	r24, 0x20	; 32
    2e3a:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
    2e3e:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
    2e42:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0; // TODO: should this be 1 or 0 ???
    2e46:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 0;
    2e4a:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = 2;
    2e4e:	20 93 f1 00 	sts	0x00F1, r18
	UEDATX = 0;
    2e52:	10 92 f1 00 	sts	0x00F1, r1
	UEDATX = signals;
    2e56:	30 93 f1 00 	sts	0x00F1, r19
	UEDATX = 0;
    2e5a:	10 92 f1 00 	sts	0x00F1, r1
	UEINTX = 0x3A;
    2e5e:	8a e3       	ldi	r24, 0x3A	; 58
    2e60:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    2e64:	9f bf       	out	0x3f, r25	; 63
    2e66:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    2e68:	08 95       	ret

00002e6a <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2e6a:	1f 92       	push	r1
    2e6c:	0f 92       	push	r0
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	0f 92       	push	r0
    2e72:	11 24       	eor	r1, r1
    2e74:	8f 93       	push	r24
    2e76:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    2e78:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    2e7c:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    2e80:	98 2f       	mov	r25, r24
    2e82:	83 ff       	sbrs	r24, 3
    2e84:	11 c0       	rjmp	.+34     	; 0x2ea8 <__vector_10+0x3e>
		UENUM = 0;
    2e86:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    2e90:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2e94:	82 e1       	ldi	r24, 0x12	; 18
    2e96:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    2e9a:	88 e0       	ldi	r24, 0x08	; 8
    2e9c:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    2ea0:	10 92 5b 01 	sts	0x015B, r1
		cdc_line_rtsdtr = 0;
    2ea4:	10 92 5c 01 	sts	0x015C, r1
        }
	if (intbits & (1<<SOFI)) {
    2ea8:	92 ff       	sbrs	r25, 2
    2eaa:	13 c0       	rjmp	.+38     	; 0x2ed2 <__vector_10+0x68>
		if (usb_configuration) {
    2eac:	80 91 5b 01 	lds	r24, 0x015B
    2eb0:	88 23       	and	r24, r24
    2eb2:	79 f0       	breq	.+30     	; 0x2ed2 <__vector_10+0x68>
			t = transmit_flush_timer;
    2eb4:	80 91 5d 01 	lds	r24, 0x015D
			if (t) {
    2eb8:	88 23       	and	r24, r24
    2eba:	59 f0       	breq	.+22     	; 0x2ed2 <__vector_10+0x68>
				transmit_flush_timer = --t;
    2ebc:	81 50       	subi	r24, 0x01	; 1
    2ebe:	80 93 5d 01 	sts	0x015D, r24
				if (!t) {
    2ec2:	88 23       	and	r24, r24
    2ec4:	31 f4       	brne	.+12     	; 0x2ed2 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
    2ec6:	84 e0       	ldi	r24, 0x04	; 4
    2ec8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2ecc:	8a e3       	ldi	r24, 0x3A	; 58
    2ece:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2ed2:	9f 91       	pop	r25
    2ed4:	8f 91       	pop	r24
    2ed6:	0f 90       	pop	r0
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	0f 90       	pop	r0
    2edc:	1f 90       	pop	r1
    2ede:	18 95       	reti

00002ee0 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	0f 92       	push	r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	2f 93       	push	r18
    2ef0:	3f 93       	push	r19
    2ef2:	4f 93       	push	r20
    2ef4:	5f 93       	push	r21
    2ef6:	6f 93       	push	r22
    2ef8:	7f 93       	push	r23
    2efa:	8f 93       	push	r24
    2efc:	9f 93       	push	r25
    2efe:	af 93       	push	r26
    2f00:	bf 93       	push	r27
    2f02:	ef 93       	push	r30
    2f04:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2f06:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2f0a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2f0e:	83 ff       	sbrs	r24, 3
    2f10:	3c c1       	rjmp	.+632    	; 0x318a <__vector_11+0x2aa>
                bmRequestType = UEDATX;
    2f12:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    2f16:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    2f1a:	80 91 f1 00 	lds	r24, 0x00F1
    2f1e:	68 2f       	mov	r22, r24
    2f20:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    2f22:	20 91 f1 00 	lds	r18, 0x00F1
    2f26:	92 2f       	mov	r25, r18
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	68 2b       	or	r22, r24
    2f2c:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    2f2e:	80 91 f1 00 	lds	r24, 0x00F1
    2f32:	a8 2f       	mov	r26, r24
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    2f36:	20 91 f1 00 	lds	r18, 0x00F1
    2f3a:	92 2f       	mov	r25, r18
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	a8 2b       	or	r26, r24
    2f40:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    2f42:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    2f46:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2f4a:	82 ef       	ldi	r24, 0xF2	; 242
    2f4c:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    2f50:	36 30       	cpi	r19, 0x06	; 6
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <__vector_11+0x76>
    2f54:	5a c0       	rjmp	.+180    	; 0x300a <__vector_11+0x12a>
    2f56:	29 e9       	ldi	r18, 0x99	; 153
    2f58:	31 e0       	ldi	r19, 0x01	; 1
    2f5a:	a9 01       	movw	r20, r18
    2f5c:	45 50       	subi	r20, 0x05	; 5
    2f5e:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    2f60:	f9 01       	movw	r30, r18
    2f62:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    2f64:	85 91       	lpm	r24, Z+
    2f66:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    2f68:	86 17       	cp	r24, r22
    2f6a:	97 07       	cpc	r25, r23
    2f6c:	01 f5       	brne	.+64     	; 0x2fae <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    2f6e:	fa 01       	movw	r30, r20
    2f70:	85 91       	lpm	r24, Z+
    2f72:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    2f74:	8a 17       	cp	r24, r26
    2f76:	9b 07       	cpc	r25, r27
    2f78:	d1 f4       	brne	.+52     	; 0x2fae <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    2f7a:	9a 01       	movw	r18, r20
    2f7c:	2e 5f       	subi	r18, 0xFE	; 254
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2f80:	f9 01       	movw	r30, r18
    2f82:	65 91       	lpm	r22, Z+
    2f84:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    2f86:	2e 5f       	subi	r18, 0xFE	; 254
    2f88:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8a:	f9 01       	movw	r30, r18
    2f8c:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    2f8e:	21 2f       	mov	r18, r17
    2f90:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2f92:	90 2f       	mov	r25, r16
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	28 2b       	or	r18, r24
    2f98:	39 2b       	or	r19, r25
    2f9a:	2f 3f       	cpi	r18, 0xFF	; 255
    2f9c:	31 05       	cpc	r19, r1
    2f9e:	19 f0       	breq	.+6      	; 0x2fa6 <__vector_11+0xc6>
    2fa0:	10 f0       	brcs	.+4      	; 0x2fa6 <__vector_11+0xc6>
    2fa2:	2f ef       	ldi	r18, 0xFF	; 255
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	24 17       	cp	r18, r20
    2fa8:	58 f4       	brcc	.+22     	; 0x2fc0 <__vector_11+0xe0>
    2faa:	42 2f       	mov	r20, r18
    2fac:	09 c0       	rjmp	.+18     	; 0x2fc0 <__vector_11+0xe0>
    2fae:	29 5f       	subi	r18, 0xF9	; 249
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	49 5f       	subi	r20, 0xF9	; 249
    2fb4:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2fb6:	f1 e0       	ldi	r31, 0x01	; 1
    2fb8:	23 3c       	cpi	r18, 0xC3	; 195
    2fba:	3f 07       	cpc	r19, r31
    2fbc:	89 f6       	brne	.-94     	; 0x2f60 <__vector_11+0x80>
    2fbe:	e5 c0       	rjmp	.+458    	; 0x318a <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2fc0:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2fc2:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	c9 01       	movw	r24, r18
    2fcc:	85 70       	andi	r24, 0x05	; 5
    2fce:	90 70       	andi	r25, 0x00	; 0
    2fd0:	89 2b       	or	r24, r25
    2fd2:	b9 f3       	breq	.-18     	; 0x2fc2 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    2fd4:	22 fd       	sbrc	r18, 2
    2fd6:	dc c0       	rjmp	.+440    	; 0x3190 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2fd8:	34 2f       	mov	r19, r20
    2fda:	41 31       	cpi	r20, 0x11	; 17
    2fdc:	08 f0       	brcs	.+2      	; 0x2fe0 <__vector_11+0x100>
    2fde:	30 e1       	ldi	r19, 0x10	; 16
    2fe0:	23 2f       	mov	r18, r19
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	06 c0       	rjmp	.+12     	; 0x2ff2 <__vector_11+0x112>
				for (i = n; i; i--) {
    2fe6:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    2fe8:	01 96       	adiw	r24, 0x01	; 1
    2fea:	e4 91       	lpm	r30, Z+
    2fec:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2ff0:	21 50       	subi	r18, 0x01	; 1
    2ff2:	22 23       	and	r18, r18
    2ff4:	c1 f7       	brne	.-16     	; 0x2fe6 <__vector_11+0x106>
    2ff6:	63 0f       	add	r22, r19
    2ff8:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2ffa:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ffc:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    3000:	44 23       	and	r20, r20
    3002:	f9 f6       	brne	.-66     	; 0x2fc2 <__vector_11+0xe2>
    3004:	30 31       	cpi	r19, 0x10	; 16
    3006:	e9 f2       	breq	.-70     	; 0x2fc2 <__vector_11+0xe2>
    3008:	c3 c0       	rjmp	.+390    	; 0x3190 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    300a:	35 30       	cpi	r19, 0x05	; 5
    300c:	61 f4       	brne	.+24     	; 0x3026 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    300e:	8e ef       	ldi	r24, 0xFE	; 254
    3010:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3014:	80 91 e8 00 	lds	r24, 0x00E8
    3018:	80 ff       	sbrs	r24, 0
    301a:	fc cf       	rjmp	.-8      	; 0x3014 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    301c:	86 2f       	mov	r24, r22
    301e:	80 68       	ori	r24, 0x80	; 128
    3020:	80 93 e3 00 	sts	0x00E3, r24
    3024:	b5 c0       	rjmp	.+362    	; 0x3190 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    3026:	39 30       	cpi	r19, 0x09	; 9
    3028:	51 f5       	brne	.+84     	; 0x307e <__vector_11+0x19e>
    302a:	44 23       	and	r20, r20
    302c:	09 f0       	breq	.+2      	; 0x3030 <__vector_11+0x150>
    302e:	ad c0       	rjmp	.+346    	; 0x318a <__vector_11+0x2aa>
			usb_configuration = wValue;
    3030:	60 93 5b 01 	sts	0x015B, r22
			cdc_line_rtsdtr = 0;
    3034:	10 92 5c 01 	sts	0x015C, r1
			transmit_flush_timer = 0;
    3038:	10 92 5d 01 	sts	0x015D, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    303c:	8e ef       	ldi	r24, 0xFE	; 254
    303e:	80 93 e8 00 	sts	0x00E8, r24
    3042:	8c eb       	ldi	r24, 0xBC	; 188
    3044:	91 e0       	ldi	r25, 0x01	; 1
    3046:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    3048:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    304c:	fc 01       	movw	r30, r24
    304e:	01 96       	adiw	r24, 0x01	; 1
    3050:	e4 91       	lpm	r30, Z+
				UECONX = en;
    3052:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    3056:	ee 23       	and	r30, r30
    3058:	69 f0       	breq	.+26     	; 0x3074 <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
    305a:	ac 01       	movw	r20, r24
    305c:	4f 5f       	subi	r20, 0xFF	; 255
    305e:	5f 4f       	sbci	r21, 0xFF	; 255
    3060:	fc 01       	movw	r30, r24
    3062:	84 91       	lpm	r24, Z+
    3064:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    3068:	ca 01       	movw	r24, r20
    306a:	01 96       	adiw	r24, 0x01	; 1
    306c:	fa 01       	movw	r30, r20
    306e:	34 91       	lpm	r19, Z+
    3070:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    3074:	2f 5f       	subi	r18, 0xFF	; 255
    3076:	25 30       	cpi	r18, 0x05	; 5
    3078:	39 f7       	brne	.-50     	; 0x3048 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    307a:	8e e1       	ldi	r24, 0x1E	; 30
    307c:	81 c0       	rjmp	.+258    	; 0x3180 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    307e:	38 30       	cpi	r19, 0x08	; 8
    3080:	61 f4       	brne	.+24     	; 0x309a <__vector_11+0x1ba>
    3082:	40 38       	cpi	r20, 0x80	; 128
    3084:	09 f0       	breq	.+2      	; 0x3088 <__vector_11+0x1a8>
    3086:	81 c0       	rjmp	.+258    	; 0x318a <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3088:	80 91 e8 00 	lds	r24, 0x00E8
    308c:	80 ff       	sbrs	r24, 0
    308e:	fc cf       	rjmp	.-8      	; 0x3088 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    3090:	80 91 5b 01 	lds	r24, 0x015B
    3094:	80 93 f1 00 	sts	0x00F1, r24
    3098:	50 c0       	rjmp	.+160    	; 0x313a <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    309a:	31 32       	cpi	r19, 0x21	; 33
    309c:	89 f4       	brne	.+34     	; 0x30c0 <__vector_11+0x1e0>
    309e:	41 3a       	cpi	r20, 0xA1	; 161
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <__vector_11+0x1c4>
    30a2:	73 c0       	rjmp	.+230    	; 0x318a <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    30a4:	80 91 e8 00 	lds	r24, 0x00E8
    30a8:	80 ff       	sbrs	r24, 0
    30aa:	fc cf       	rjmp	.-8      	; 0x30a4 <__vector_11+0x1c4>
    30ac:	e8 e3       	ldi	r30, 0x38	; 56
    30ae:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    30b0:	81 91       	ld	r24, Z+
    30b2:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	ef 33       	cpi	r30, 0x3F	; 63
    30ba:	f8 07       	cpc	r31, r24
    30bc:	c9 f7       	brne	.-14     	; 0x30b0 <__vector_11+0x1d0>
    30be:	3d c0       	rjmp	.+122    	; 0x313a <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    30c0:	30 32       	cpi	r19, 0x20	; 32
    30c2:	a1 f4       	brne	.+40     	; 0x30ec <__vector_11+0x20c>
    30c4:	41 32       	cpi	r20, 0x21	; 33
    30c6:	09 f0       	breq	.+2      	; 0x30ca <__vector_11+0x1ea>
    30c8:	60 c0       	rjmp	.+192    	; 0x318a <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    30ca:	80 91 e8 00 	lds	r24, 0x00E8
    30ce:	82 ff       	sbrs	r24, 2
    30d0:	fc cf       	rjmp	.-8      	; 0x30ca <__vector_11+0x1ea>
    30d2:	e8 e3       	ldi	r30, 0x38	; 56
    30d4:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    30d6:	80 91 f1 00 	lds	r24, 0x00F1
    30da:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	ef 33       	cpi	r30, 0x3F	; 63
    30e0:	f8 07       	cpc	r31, r24
    30e2:	c9 f7       	brne	.-14     	; 0x30d6 <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    30e4:	8b ef       	ldi	r24, 0xFB	; 251
    30e6:	80 93 e8 00 	sts	0x00E8, r24
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    30ec:	32 32       	cpi	r19, 0x22	; 34
    30ee:	51 f4       	brne	.+20     	; 0x3104 <__vector_11+0x224>
    30f0:	41 32       	cpi	r20, 0x21	; 33
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <__vector_11+0x216>
    30f4:	4a c0       	rjmp	.+148    	; 0x318a <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    30f6:	60 93 5c 01 	sts	0x015C, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    30fa:	80 91 e8 00 	lds	r24, 0x00E8
    30fe:	80 ff       	sbrs	r24, 0
    3100:	fc cf       	rjmp	.-8      	; 0x30fa <__vector_11+0x21a>
    3102:	1b c0       	rjmp	.+54     	; 0x313a <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    3104:	33 23       	and	r19, r19
    3106:	e9 f4       	brne	.+58     	; 0x3142 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    3108:	80 91 e8 00 	lds	r24, 0x00E8
    310c:	80 ff       	sbrs	r24, 0
    310e:	fc cf       	rjmp	.-8      	; 0x3108 <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    3110:	42 38       	cpi	r20, 0x82	; 130
    3112:	11 f0       	breq	.+4      	; 0x3118 <__vector_11+0x238>
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	0d c0       	rjmp	.+26     	; 0x3132 <__vector_11+0x252>
				UENUM = wIndex;
    3118:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    311c:	80 91 eb 00 	lds	r24, 0x00EB
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	25 e0       	ldi	r18, 0x05	; 5
    3124:	96 95       	lsr	r25
    3126:	87 95       	ror	r24
    3128:	2a 95       	dec	r18
    312a:	e1 f7       	brne	.-8      	; 0x3124 <__vector_11+0x244>
    312c:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    312e:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    3132:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    3136:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    313a:	8e ef       	ldi	r24, 0xFE	; 254
    313c:	80 93 e8 00 	sts	0x00E8, r24
    3140:	27 c0       	rjmp	.+78     	; 0x3190 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    3142:	31 30       	cpi	r19, 0x01	; 1
    3144:	11 f0       	breq	.+4      	; 0x314a <__vector_11+0x26a>
    3146:	33 30       	cpi	r19, 0x03	; 3
    3148:	01 f5       	brne	.+64     	; 0x318a <__vector_11+0x2aa>
    314a:	42 30       	cpi	r20, 0x02	; 2
    314c:	f1 f4       	brne	.+60     	; 0x318a <__vector_11+0x2aa>
    314e:	67 2b       	or	r22, r23
    3150:	e1 f4       	brne	.+56     	; 0x318a <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    3152:	2a 2f       	mov	r18, r26
    3154:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    3156:	82 2f       	mov	r24, r18
    3158:	81 50       	subi	r24, 0x01	; 1
    315a:	84 30       	cpi	r24, 0x04	; 4
    315c:	b0 f4       	brcc	.+44     	; 0x318a <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    315e:	8e ef       	ldi	r24, 0xFE	; 254
    3160:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    3164:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    3168:	33 30       	cpi	r19, 0x03	; 3
    316a:	79 f0       	breq	.+30     	; 0x318a <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    316c:	89 e1       	ldi	r24, 0x19	; 25
    316e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <__vector_11+0x29c>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	2a 95       	dec	r18
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <__vector_11+0x298>
    3180:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    3184:	10 92 ea 00 	sts	0x00EA, r1
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    318a:	81 e2       	ldi	r24, 0x21	; 33
    318c:	80 93 eb 00 	sts	0x00EB, r24
}
    3190:	ff 91       	pop	r31
    3192:	ef 91       	pop	r30
    3194:	bf 91       	pop	r27
    3196:	af 91       	pop	r26
    3198:	9f 91       	pop	r25
    319a:	8f 91       	pop	r24
    319c:	7f 91       	pop	r23
    319e:	6f 91       	pop	r22
    31a0:	5f 91       	pop	r21
    31a2:	4f 91       	pop	r20
    31a4:	3f 91       	pop	r19
    31a6:	2f 91       	pop	r18
    31a8:	1f 91       	pop	r17
    31aa:	0f 91       	pop	r16
    31ac:	0f 90       	pop	r0
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	0f 90       	pop	r0
    31b2:	1f 90       	pop	r1
    31b4:	18 95       	reti

000031b6 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	ec 01       	movw	r28, r24
    31be:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    31c0:	21 96       	adiw	r28, 0x01	; 1
    31c2:	14 91       	lpm	r17, Z+
		if (!c) break;
    31c4:	11 23       	and	r17, r17
    31c6:	49 f0       	breq	.+18     	; 0x31da <print_P+0x24>
		if (c == '\n') usb_tx_char('\r');
    31c8:	1a 30       	cpi	r17, 0x0A	; 10
    31ca:	19 f4       	brne	.+6      	; 0x31d2 <print_P+0x1c>
    31cc:	8d e0       	ldi	r24, 0x0D	; 13
    31ce:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>
		usb_tx_char(c);
    31d2:	81 2f       	mov	r24, r17
    31d4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>
    31d8:	f2 cf       	rjmp	.-28     	; 0x31be <print_P+0x8>
	}
}
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	08 95       	ret

000031e2 <phex1>:

void phex1(unsigned char c)
{
    31e2:	98 2f       	mov	r25, r24
	usb_tx_char(c + ((c < 10) ? '0' : 'A' - 10));
    31e4:	8a 30       	cpi	r24, 0x0A	; 10
    31e6:	10 f0       	brcs	.+4      	; 0x31ec <phex1+0xa>
    31e8:	87 e3       	ldi	r24, 0x37	; 55
    31ea:	01 c0       	rjmp	.+2      	; 0x31ee <phex1+0xc>
    31ec:	80 e3       	ldi	r24, 0x30	; 48
    31ee:	89 0f       	add	r24, r25
    31f0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>
}
    31f4:	08 95       	ret

000031f6 <phex>:

void phex(unsigned char c)
{
    31f6:	1f 93       	push	r17
    31f8:	18 2f       	mov	r17, r24
	phex1(c >> 4);
    31fa:	82 95       	swap	r24
    31fc:	8f 70       	andi	r24, 0x0F	; 15
    31fe:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <phex1>
	phex1(c & 15);
    3202:	81 2f       	mov	r24, r17
    3204:	8f 70       	andi	r24, 0x0F	; 15
    3206:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <phex1>
}
    320a:	1f 91       	pop	r17
    320c:	08 95       	ret

0000320e <m_usb_tx_hex>:

void m_usb_tx_hex(unsigned int i)
{
    320e:	1f 93       	push	r17
    3210:	18 2f       	mov	r17, r24
	phex(i >> 8);
    3212:	89 2f       	mov	r24, r25
    3214:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <phex>
	phex(i);
    3218:	81 2f       	mov	r24, r17
    321a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <phex>
}
    321e:	1f 91       	pop	r17
    3220:	08 95       	ret

00003222 <m_usb_tx_hex8>:

void m_usb_tx_hex8(unsigned char i)
{
	phex(i);
    3222:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <phex>
}
    3226:	08 95       	ret

00003228 <m_usb_tx_ulong>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_ulong(unsigned long i)
{
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	2a 97       	sbiw	r28, 0x0a	; 10
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	de bf       	out	0x3e, r29	; 62
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	cd bf       	out	0x3d, r28	; 61
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
    3244:	8e 01       	movw	r16, r28
    3246:	0f 5f       	subi	r16, 0xFF	; 255
    3248:	1f 4f       	sbci	r17, 0xFF	; 255
    324a:	2a e0       	ldi	r18, 0x0A	; 10
    324c:	f8 01       	movw	r30, r16
    324e:	11 92       	st	Z+, r1
    3250:	2a 95       	dec	r18
    3252:	e9 f7       	brne	.-6      	; 0x324e <m_usb_tx_ulong+0x26>
	ultoa(i,string,10);
    3254:	a8 01       	movw	r20, r16
    3256:	2a e0       	ldi	r18, 0x0A	; 10
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <ultoa>
	for(i=0;i<10;i++){
    325e:	3b e0       	ldi	r19, 0x0B	; 11
    3260:	e3 2e       	mov	r14, r19
    3262:	f1 2c       	mov	r15, r1
    3264:	ec 0e       	add	r14, r28
    3266:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    3268:	f8 01       	movw	r30, r16
    326a:	81 91       	ld	r24, Z+
    326c:	8f 01       	movw	r16, r30
    326e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>

void m_usb_tx_ulong(unsigned long i)
{
	char string[10] = {0,0,0,0,0,0,0,0,0,0};
	ultoa(i,string,10);
	for(i=0;i<10;i++){
    3272:	0e 15       	cp	r16, r14
    3274:	1f 05       	cpc	r17, r15
    3276:	c1 f7       	brne	.-16     	; 0x3268 <m_usb_tx_ulong+0x40>
		m_usb_tx_char(string[i]);
	}
}
    3278:	2a 96       	adiw	r28, 0x0a	; 10
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	ff 90       	pop	r15
    328e:	ef 90       	pop	r14
    3290:	08 95       	ret

00003292 <m_usb_tx_long>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_long(long i)
{
    3292:	ef 92       	push	r14
    3294:	ff 92       	push	r15
    3296:	0f 93       	push	r16
    3298:	1f 93       	push	r17
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	2b 97       	sbiw	r28, 0x0b	; 11
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    32ae:	8e 01       	movw	r16, r28
    32b0:	0f 5f       	subi	r16, 0xFF	; 255
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	2b e0       	ldi	r18, 0x0B	; 11
    32b6:	f8 01       	movw	r30, r16
    32b8:	11 92       	st	Z+, r1
    32ba:	2a 95       	dec	r18
    32bc:	e9 f7       	brne	.-6      	; 0x32b8 <m_usb_tx_long+0x26>
	ltoa(i,string,10);
    32be:	a8 01       	movw	r20, r16
    32c0:	2a e0       	ldi	r18, 0x0A	; 10
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ltoa>
	for(i=0;i<11;i++){
    32c8:	4c e0       	ldi	r20, 0x0C	; 12
    32ca:	e4 2e       	mov	r14, r20
    32cc:	f1 2c       	mov	r15, r1
    32ce:	ec 0e       	add	r14, r28
    32d0:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    32d2:	f8 01       	movw	r30, r16
    32d4:	81 91       	ld	r24, Z+
    32d6:	8f 01       	movw	r16, r30
    32d8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    32dc:	0e 15       	cp	r16, r14
    32de:	1f 05       	cpc	r17, r15
    32e0:	c1 f7       	brne	.-16     	; 0x32d2 <m_usb_tx_long+0x40>
		m_usb_tx_char(string[i]);
	}
}
    32e2:	2b 96       	adiw	r28, 0x0b	; 11
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	08 95       	ret

000032fc <m_usb_tx_uint>:
		m_usb_tx_char(string[i]);
	}
}

void m_usb_tx_uint(unsigned int i)
{
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	00 d0       	rcall	.+0      	; 0x330a <m_usb_tx_uint+0xe>
    330a:	00 d0       	rcall	.+0      	; 0x330c <m_usb_tx_uint+0x10>
    330c:	0f 92       	push	r0
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
	char string[5] = {0,0,0,0,0};
    3312:	8e 01       	movw	r16, r28
    3314:	0f 5f       	subi	r16, 0xFF	; 255
    3316:	1f 4f       	sbci	r17, 0xFF	; 255
    3318:	25 e0       	ldi	r18, 0x05	; 5
    331a:	f8 01       	movw	r30, r16
    331c:	11 92       	st	Z+, r1
    331e:	2a 95       	dec	r18
    3320:	e9 f7       	brne	.-6      	; 0x331c <m_usb_tx_uint+0x20>
	utoa(i,string,10);
    3322:	b8 01       	movw	r22, r16
    3324:	4a e0       	ldi	r20, 0x0A	; 10
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <utoa>
	for(i=0;i<5;i++){
    332c:	56 e0       	ldi	r21, 0x06	; 6
    332e:	e5 2e       	mov	r14, r21
    3330:	f1 2c       	mov	r15, r1
    3332:	ec 0e       	add	r14, r28
    3334:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    3336:	f8 01       	movw	r30, r16
    3338:	81 91       	ld	r24, Z+
    333a:	8f 01       	movw	r16, r30
    333c:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>

void m_usb_tx_uint(unsigned int i)
{
	char string[5] = {0,0,0,0,0};
	utoa(i,string,10);
	for(i=0;i<5;i++){
    3340:	0e 15       	cp	r16, r14
    3342:	1f 05       	cpc	r17, r15
    3344:	c1 f7       	brne	.-16     	; 0x3336 <m_usb_tx_uint+0x3a>
		m_usb_tx_char(string[i]);
	}
}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	1f 91       	pop	r17
    3356:	0f 91       	pop	r16
    3358:	ff 90       	pop	r15
    335a:	ef 90       	pop	r14
    335c:	08 95       	ret

0000335e <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    335e:	ef 92       	push	r14
    3360:	ff 92       	push	r15
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	00 d0       	rcall	.+0      	; 0x336c <m_usb_tx_int+0xe>
    336c:	00 d0       	rcall	.+0      	; 0x336e <m_usb_tx_int+0x10>
    336e:	00 d0       	rcall	.+0      	; 0x3370 <m_usb_tx_int+0x12>
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
	char string[6] = {0,0,0,0,0,0};
    3374:	8e 01       	movw	r16, r28
    3376:	0f 5f       	subi	r16, 0xFF	; 255
    3378:	1f 4f       	sbci	r17, 0xFF	; 255
    337a:	26 e0       	ldi	r18, 0x06	; 6
    337c:	f8 01       	movw	r30, r16
    337e:	11 92       	st	Z+, r1
    3380:	2a 95       	dec	r18
    3382:	e9 f7       	brne	.-6      	; 0x337e <m_usb_tx_int+0x20>
	itoa(i,string,10);
    3384:	b8 01       	movw	r22, r16
    3386:	4a e0       	ldi	r20, 0x0A	; 10
    3388:	50 e0       	ldi	r21, 0x00	; 0
    338a:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <itoa>
	for(i=0;i<6;i++){
    338e:	67 e0       	ldi	r22, 0x07	; 7
    3390:	e6 2e       	mov	r14, r22
    3392:	f1 2c       	mov	r15, r1
    3394:	ec 0e       	add	r14, r28
    3396:	fd 1e       	adc	r15, r29
		m_usb_tx_char(string[i]);
    3398:	f8 01       	movw	r30, r16
    339a:	81 91       	ld	r24, Z+
    339c:	8f 01       	movw	r16, r30
    339e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[6] = {0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<6;i++){
    33a2:	0e 15       	cp	r16, r14
    33a4:	1f 05       	cpc	r17, r15
    33a6:	c1 f7       	brne	.-16     	; 0x3398 <m_usb_tx_int+0x3a>
		m_usb_tx_char(string[i]);
	}
}
    33a8:	26 96       	adiw	r28, 0x06	; 6
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	ff 90       	pop	r15
    33be:	ef 90       	pop	r14
    33c0:	08 95       	ret

000033c2 <twi_wait>:
		return 0;					// comm failure
	}
}

unsigned char twi_wait(void)
{
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int wait=0;
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    33c6:	80 91 bc 00 	lds	r24, 0x00BC
    33ca:	87 fd       	sbrc	r24, 7
    33cc:	06 c0       	rjmp	.+12     	; 0x33da <twi_wait+0x18>
    33ce:	2f 5f       	subi	r18, 0xFF	; 255
    33d0:	3f 4f       	sbci	r19, 0xFF	; 255
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	29 3e       	cpi	r18, 0xE9	; 233
    33d6:	38 07       	cpc	r19, r24
    33d8:	b1 f7       	brne	.-20     	; 0x33c6 <twi_wait+0x4>
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	28 5e       	subi	r18, 0xE8	; 232
    33de:	33 40       	sbci	r19, 0x03	; 3
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <twi_wait+0x22>
    33e2:	81 e0       	ldi	r24, 0x01	; 1
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    33e4:	08 95       	ret

000033e6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    33e6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    33ea:	84 e8       	ldi	r24, 0x84	; 132
    33ec:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    33f0:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <twi_wait>
    33f4:	88 23       	and	r24, r24
    33f6:	19 f0       	breq	.+6      	; 0x33fe <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    33f8:	80 91 b9 00 	lds	r24, 0x00B9
    33fc:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    33fe:	08 95       	ret

00003400 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    3400:	1f 93       	push	r17
    3402:	18 2f       	mov	r17, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    3404:	84 ea       	ldi	r24, 0xA4	; 164
    3406:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    340a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <twi_wait>
    340e:	88 23       	and	r24, r24
    3410:	69 f0       	breq	.+26     	; 0x342c <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    3412:	11 0f       	add	r17, r17
    3414:	81 2f       	mov	r24, r17
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    341c:	88 34       	cpi	r24, 0x48	; 72
    341e:	11 f0       	breq	.+4      	; 0x3424 <start_read+0x24>
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	04 c0       	rjmp	.+8      	; 0x342c <start_read+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3424:	84 e9       	ldi	r24, 0x94	; 148
    3426:	80 93 bc 00 	sts	0x00BC, r24
    342a:	80 e0       	ldi	r24, 0x00	; 0
		return 0;	// failure
	}	
	return 1;	// success
}	
    342c:	1f 91       	pop	r17
    342e:	08 95       	ret

00003430 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    3430:	1f 93       	push	r17
    3432:	18 2f       	mov	r17, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    3434:	84 ea       	ldi	r24, 0xA4	; 164
    3436:	80 93 bc 00 	sts	0x00BC, r24
	if(!twi_wait())
    343a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <twi_wait>
    343e:	88 23       	and	r24, r24
    3440:	61 f0       	breq	.+24     	; 0x345a <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    3442:	81 2f       	mov	r24, r17
    3444:	88 0f       	add	r24, r24
    3446:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    344a:	80 32       	cpi	r24, 0x20	; 32
    344c:	11 f0       	breq	.+4      	; 0x3452 <start_write+0x22>
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	04 c0       	rjmp	.+8      	; 0x345a <start_write+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    3452:	84 e9       	ldi	r24, 0x94	; 148
    3454:	80 93 bc 00 	sts	0x00BC, r24
    3458:	80 e0       	ldi	r24, 0x00	; 0
		return 0;	// failure
	}	
	return 1;	// success
}	
    345a:	1f 91       	pop	r17
    345c:	08 95       	ret

0000345e <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	df 93       	push	r29
    3464:	cf 93       	push	r28
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	60 97       	sbiw	r28, 0x10	; 16
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	18 2f       	mov	r17, r24
    3478:	09 2f       	mov	r16, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    347a:	88 e5       	ldi	r24, 0x58	; 88
    347c:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    3480:	88 23       	and	r24, r24
    3482:	09 f4       	brne	.+2      	; 0x3486 <m_wii_read+0x28>
    3484:	69 c0       	rjmp	.+210    	; 0x3558 <m_wii_read+0xfa>
	if(!send_byte(0x36)){return 0;}
    3486:	86 e3       	ldi	r24, 0x36	; 54
    3488:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    348c:	88 23       	and	r24, r24
    348e:	09 f4       	brne	.+2      	; 0x3492 <m_wii_read+0x34>
    3490:	63 c0       	rjmp	.+198    	; 0x3558 <m_wii_read+0xfa>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3492:	84 e9       	ldi	r24, 0x94	; 148
    3494:	80 93 bc 00 	sts	0x00BC, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3498:	85 e8       	ldi	r24, 0x85	; 133
    349a:	8a 95       	dec	r24
    349c:	f1 f7       	brne	.-4      	; 0x349a <m_wii_read+0x3c>
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    349e:	88 e5       	ldi	r24, 0x58	; 88
    34a0:	0e 94 00 1a 	call	0x3400	; 0x3400 <start_read>
    34a4:	88 23       	and	r24, r24
    34a6:	09 f4       	brne	.+2      	; 0x34aa <m_wii_read+0x4c>
    34a8:	57 c0       	rjmp	.+174    	; 0x3558 <m_wii_read+0xfa>
}

char m_wii_read(unsigned int* blob_data)
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    34aa:	fe 01       	movw	r30, r28
    34ac:	31 96       	adiw	r30, 0x01	; 1
    34ae:	80 e1       	ldi	r24, 0x10	; 16
    34b0:	df 01       	movw	r26, r30
    34b2:	1d 92       	st	X+, r1
    34b4:	8a 95       	dec	r24
    34b6:	e9 f7       	brne	.-6      	; 0x34b2 <m_wii_read+0x54>
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    34b8:	94 ec       	ldi	r25, 0xC4	; 196
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    34ba:	9e 01       	movw	r18, r28
    34bc:	20 5f       	subi	r18, 0xF0	; 240
    34be:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    34c0:	90 93 bc 00 	sts	0x00BC, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    34c4:	80 91 bc 00 	lds	r24, 0x00BC
    34c8:	87 ff       	sbrs	r24, 7
    34ca:	fc cf       	rjmp	.-8      	; 0x34c4 <m_wii_read+0x66>
		temp[i] = TWDR;
    34cc:	80 91 bb 00 	lds	r24, 0x00BB
    34d0:	81 93       	st	Z+, r24
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    34d2:	e2 17       	cp	r30, r18
    34d4:	f3 07       	cpc	r31, r19
    34d6:	a1 f7       	brne	.-24     	; 0x34c0 <m_wii_read+0x62>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    34d8:	84 e8       	ldi	r24, 0x84	; 132
    34da:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    34de:	80 91 bc 00 	lds	r24, 0x00BC
    34e2:	87 ff       	sbrs	r24, 7
    34e4:	fc cf       	rjmp	.-8      	; 0x34de <m_wii_read+0x80>
	temp[15] = TWDR;
    34e6:	80 91 bb 00 	lds	r24, 0x00BB
    34ea:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    34ec:	84 e9       	ldi	r24, 0x94	; 148
    34ee:	80 93 bc 00 	sts	0x00BC, r24
    34f2:	de 01       	movw	r26, r28
    34f4:	12 96       	adiw	r26, 0x02	; 2
    34f6:	21 2f       	mov	r18, r17
    34f8:	30 2f       	mov	r19, r16
    34fa:	c9 01       	movw	r24, r18
    34fc:	fc 01       	movw	r30, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    34fe:	be 01       	movw	r22, r28
    3500:	62 5f       	subi	r22, 0xF2	; 242
    3502:	7f 4f       	sbci	r23, 0xFF	; 255
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    3504:	12 96       	adiw	r26, 0x02	; 2
    3506:	2c 91       	ld	r18, X
    3508:	12 97       	sbiw	r26, 0x02	; 2
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	c9 01       	movw	r24, r18
    350e:	80 73       	andi	r24, 0x30	; 48
    3510:	90 70       	andi	r25, 0x00	; 0
    3512:	54 e0       	ldi	r21, 0x04	; 4
    3514:	88 0f       	add	r24, r24
    3516:	99 1f       	adc	r25, r25
    3518:	5a 95       	dec	r21
    351a:	e1 f7       	brne	.-8      	; 0x3514 <m_wii_read+0xb6>
    351c:	4c 91       	ld	r20, X
    351e:	84 0f       	add	r24, r20
    3520:	91 1d       	adc	r25, r1
    3522:	91 83       	std	Z+1, r25	; 0x01
    3524:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    3526:	c9 01       	movw	r24, r18
    3528:	80 7c       	andi	r24, 0xC0	; 192
    352a:	90 70       	andi	r25, 0x00	; 0
    352c:	88 0f       	add	r24, r24
    352e:	99 1f       	adc	r25, r25
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	11 96       	adiw	r26, 0x01	; 1
    3536:	4c 91       	ld	r20, X
    3538:	11 97       	sbiw	r26, 0x01	; 1
    353a:	84 0f       	add	r24, r20
    353c:	91 1d       	adc	r25, r1
    353e:	93 83       	std	Z+3, r25	; 0x03
    3540:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    3542:	2f 70       	andi	r18, 0x0F	; 15
    3544:	30 70       	andi	r19, 0x00	; 0
    3546:	35 83       	std	Z+5, r19	; 0x05
    3548:	24 83       	std	Z+4, r18	; 0x04
    354a:	13 96       	adiw	r26, 0x03	; 3
    354c:	36 96       	adiw	r30, 0x06	; 6
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    354e:	a6 17       	cp	r26, r22
    3550:	b7 07       	cpc	r27, r23
    3552:	c1 f6       	brne	.-80     	; 0x3504 <m_wii_read+0xa6>
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	01 c0       	rjmp	.+2      	; 0x355a <m_wii_read+0xfc>
    3558:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    355a:	60 96       	adiw	r28, 0x10	; 16
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	08 95       	ret

00003570 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3570:	84 e9       	ldi	r24, 0x94	; 148
    3572:	80 93 bc 00 	sts	0x00BC, r24
    3576:	08 95       	ret

00003578 <m_wii_open>:
unsigned char send_byte(unsigned char byte);
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
	m_bus_init();
    357e:	0e 94 04 14 	call	0x2808	; 0x2808 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    3582:	88 e5       	ldi	r24, 0x58	; 88
    3584:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    3588:	88 23       	and	r24, r24
    358a:	09 f4       	brne	.+2      	; 0x358e <m_wii_open+0x16>
    358c:	b3 c0       	rjmp	.+358    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x30)){return 0;}
    358e:	80 e3       	ldi	r24, 0x30	; 48
    3590:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    3594:	88 23       	and	r24, r24
    3596:	09 f4       	brne	.+2      	; 0x359a <m_wii_open+0x22>
    3598:	ad c0       	rjmp	.+346    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x01)){return 0;}
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    35a0:	88 23       	and	r24, r24
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <m_wii_open+0x2e>
    35a4:	a7 c0       	rjmp	.+334    	; 0x36f4 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    35a6:	84 e9       	ldi	r24, 0x94	; 148
    35a8:	80 93 bc 00 	sts	0x00BC, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ac:	80 e4       	ldi	r24, 0x40	; 64
    35ae:	9c e9       	ldi	r25, 0x9C	; 156
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <m_wii_open+0x38>
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    35b4:	88 e5       	ldi	r24, 0x58	; 88
    35b6:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    35ba:	88 23       	and	r24, r24
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <m_wii_open+0x48>
    35be:	9a c0       	rjmp	.+308    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    35c6:	88 23       	and	r24, r24
    35c8:	09 f4       	brne	.+2      	; 0x35cc <m_wii_open+0x54>
    35ca:	94 c0       	rjmp	.+296    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    35d2:	88 23       	and	r24, r24
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <m_wii_open+0x60>
    35d6:	8e c0       	rjmp	.+284    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    35de:	88 23       	and	r24, r24
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <m_wii_open+0x6c>
    35e2:	88 c0       	rjmp	.+272    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    35ea:	88 23       	and	r24, r24
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <m_wii_open+0x78>
    35ee:	82 c0       	rjmp	.+260    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    35f6:	88 23       	and	r24, r24
    35f8:	09 f4       	brne	.+2      	; 0x35fc <m_wii_open+0x84>
    35fa:	7c c0       	rjmp	.+248    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    3602:	88 23       	and	r24, r24
    3604:	09 f4       	brne	.+2      	; 0x3608 <m_wii_open+0x90>
    3606:	76 c0       	rjmp	.+236    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    360e:	88 23       	and	r24, r24
    3610:	09 f4       	brne	.+2      	; 0x3614 <m_wii_open+0x9c>
    3612:	70 c0       	rjmp	.+224    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x90)){return 0;} // p0
    3614:	80 e9       	ldi	r24, 0x90	; 144
    3616:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    361a:	88 23       	and	r24, r24
    361c:	09 f4       	brne	.+2      	; 0x3620 <m_wii_open+0xa8>
    361e:	6a c0       	rjmp	.+212    	; 0x36f4 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3620:	14 e9       	ldi	r17, 0x94	; 148
    3622:	10 93 bc 00 	sts	0x00BC, r17
    3626:	c0 e4       	ldi	r28, 0x40	; 64
    3628:	dc e9       	ldi	r29, 0x9C	; 156
    362a:	ce 01       	movw	r24, r28
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	f1 f7       	brne	.-4      	; 0x362c <m_wii_open+0xb4>
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    3630:	88 e5       	ldi	r24, 0x58	; 88
    3632:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    3636:	88 23       	and	r24, r24
    3638:	09 f4       	brne	.+2      	; 0x363c <m_wii_open+0xc4>
    363a:	5c c0       	rjmp	.+184    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x07)){return 0;}
    363c:	87 e0       	ldi	r24, 0x07	; 7
    363e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    3642:	88 23       	and	r24, r24
    3644:	09 f4       	brne	.+2      	; 0x3648 <m_wii_open+0xd0>
    3646:	56 c0       	rjmp	.+172    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;}
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    364e:	88 23       	and	r24, r24
    3650:	09 f4       	brne	.+2      	; 0x3654 <m_wii_open+0xdc>
    3652:	50 c0       	rjmp	.+160    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x41)){return 0;} // p1
    3654:	81 e4       	ldi	r24, 0x41	; 65
    3656:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    365a:	88 23       	and	r24, r24
    365c:	09 f4       	brne	.+2      	; 0x3660 <m_wii_open+0xe8>
    365e:	4a c0       	rjmp	.+148    	; 0x36f4 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3660:	10 93 bc 00 	sts	0x00BC, r17
    3664:	ce 01       	movw	r24, r28
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <m_wii_open+0xee>
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    366a:	88 e5       	ldi	r24, 0x58	; 88
    366c:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    3670:	88 23       	and	r24, r24
    3672:	09 f4       	brne	.+2      	; 0x3676 <m_wii_open+0xfe>
    3674:	3f c0       	rjmp	.+126    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x1A)){return 0;}
    3676:	8a e1       	ldi	r24, 0x1A	; 26
    3678:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    367c:	88 23       	and	r24, r24
    367e:	09 f4       	brne	.+2      	; 0x3682 <m_wii_open+0x10a>
    3680:	39 c0       	rjmp	.+114    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x40)){return 0;} // p2
    3682:	80 e4       	ldi	r24, 0x40	; 64
    3684:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    3688:	88 23       	and	r24, r24
    368a:	a1 f1       	breq	.+104    	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x00)){return 0;} // p3
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    3692:	88 23       	and	r24, r24
    3694:	79 f1       	breq	.+94     	; 0x36f4 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    3696:	10 93 bc 00 	sts	0x00BC, r17
    369a:	ce 01       	movw	r24, r28
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	f1 f7       	brne	.-4      	; 0x369c <m_wii_open+0x124>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    36a0:	88 e5       	ldi	r24, 0x58	; 88
    36a2:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    36a6:	88 23       	and	r24, r24
    36a8:	29 f1       	breq	.+74     	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x33)){return 0;}
    36aa:	83 e3       	ldi	r24, 0x33	; 51
    36ac:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    36b0:	88 23       	and	r24, r24
    36b2:	01 f1       	breq	.+64     	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x03)){return 0;}
    36b4:	83 e0       	ldi	r24, 0x03	; 3
    36b6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    36ba:	88 23       	and	r24, r24
    36bc:	d9 f0       	breq	.+54     	; 0x36f4 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    36be:	10 93 bc 00 	sts	0x00BC, r17
    36c2:	ce 01       	movw	r24, r28
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	f1 f7       	brne	.-4      	; 0x36c4 <m_wii_open+0x14c>
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    36c8:	88 e5       	ldi	r24, 0x58	; 88
    36ca:	0e 94 18 1a 	call	0x3430	; 0x3430 <start_write>
    36ce:	88 23       	and	r24, r24
    36d0:	89 f0       	breq	.+34     	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x30)){return 0;}
    36d2:	80 e3       	ldi	r24, 0x30	; 48
    36d4:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    36d8:	88 23       	and	r24, r24
    36da:	61 f0       	breq	.+24     	; 0x36f4 <m_wii_open+0x17c>
	if(!send_byte(0x08)){return 0;}
    36dc:	88 e0       	ldi	r24, 0x08	; 8
    36de:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <send_byte>
    36e2:	88 23       	and	r24, r24
    36e4:	39 f0       	breq	.+14     	; 0x36f4 <m_wii_open+0x17c>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    36e6:	10 93 bc 00 	sts	0x00BC, r17
    36ea:	ce 01       	movw	r24, r28
    36ec:	01 97       	sbiw	r24, 0x01	; 1
    36ee:	f1 f7       	brne	.-4      	; 0x36ec <m_wii_open+0x174>
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	01 c0       	rjmp	.+2      	; 0x36f6 <m_wii_open+0x17e>
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    36f4:	80 e0       	ldi	r24, 0x00	; 0
}
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	1f 91       	pop	r17
    36fc:	08 95       	ret

000036fe <__subsf3>:
    36fe:	50 58       	subi	r21, 0x80	; 128

00003700 <__addsf3>:
    3700:	bb 27       	eor	r27, r27
    3702:	aa 27       	eor	r26, r26
    3704:	0e d0       	rcall	.+28     	; 0x3722 <__addsf3x>
    3706:	27 c2       	rjmp	.+1102   	; 0x3b56 <__fp_round>
    3708:	f0 d1       	rcall	.+992    	; 0x3aea <__fp_pscA>
    370a:	30 f0       	brcs	.+12     	; 0x3718 <__addsf3+0x18>
    370c:	f5 d1       	rcall	.+1002   	; 0x3af8 <__fp_pscB>
    370e:	20 f0       	brcs	.+8      	; 0x3718 <__addsf3+0x18>
    3710:	31 f4       	brne	.+12     	; 0x371e <__addsf3+0x1e>
    3712:	9f 3f       	cpi	r25, 0xFF	; 255
    3714:	11 f4       	brne	.+4      	; 0x371a <__addsf3+0x1a>
    3716:	1e f4       	brtc	.+6      	; 0x371e <__addsf3+0x1e>
    3718:	c0 c1       	rjmp	.+896    	; 0x3a9a <__fp_nan>
    371a:	0e f4       	brtc	.+2      	; 0x371e <__addsf3+0x1e>
    371c:	e0 95       	com	r30
    371e:	e7 fb       	bst	r30, 7
    3720:	b6 c1       	rjmp	.+876    	; 0x3a8e <__fp_inf>

00003722 <__addsf3x>:
    3722:	e9 2f       	mov	r30, r25
    3724:	3a d2       	rcall	.+1140   	; 0x3b9a <__fp_split3>
    3726:	80 f3       	brcs	.-32     	; 0x3708 <__addsf3+0x8>
    3728:	ba 17       	cp	r27, r26
    372a:	62 07       	cpc	r22, r18
    372c:	73 07       	cpc	r23, r19
    372e:	84 07       	cpc	r24, r20
    3730:	95 07       	cpc	r25, r21
    3732:	18 f0       	brcs	.+6      	; 0x373a <__addsf3x+0x18>
    3734:	71 f4       	brne	.+28     	; 0x3752 <__addsf3x+0x30>
    3736:	9e f5       	brtc	.+102    	; 0x379e <__addsf3x+0x7c>
    3738:	52 c2       	rjmp	.+1188   	; 0x3bde <__fp_zero>
    373a:	0e f4       	brtc	.+2      	; 0x373e <__addsf3x+0x1c>
    373c:	e0 95       	com	r30
    373e:	0b 2e       	mov	r0, r27
    3740:	ba 2f       	mov	r27, r26
    3742:	a0 2d       	mov	r26, r0
    3744:	0b 01       	movw	r0, r22
    3746:	b9 01       	movw	r22, r18
    3748:	90 01       	movw	r18, r0
    374a:	0c 01       	movw	r0, r24
    374c:	ca 01       	movw	r24, r20
    374e:	a0 01       	movw	r20, r0
    3750:	11 24       	eor	r1, r1
    3752:	ff 27       	eor	r31, r31
    3754:	59 1b       	sub	r21, r25
    3756:	99 f0       	breq	.+38     	; 0x377e <__addsf3x+0x5c>
    3758:	59 3f       	cpi	r21, 0xF9	; 249
    375a:	50 f4       	brcc	.+20     	; 0x3770 <__addsf3x+0x4e>
    375c:	50 3e       	cpi	r21, 0xE0	; 224
    375e:	68 f1       	brcs	.+90     	; 0x37ba <__addsf3x+0x98>
    3760:	1a 16       	cp	r1, r26
    3762:	f0 40       	sbci	r31, 0x00	; 0
    3764:	a2 2f       	mov	r26, r18
    3766:	23 2f       	mov	r18, r19
    3768:	34 2f       	mov	r19, r20
    376a:	44 27       	eor	r20, r20
    376c:	58 5f       	subi	r21, 0xF8	; 248
    376e:	f3 cf       	rjmp	.-26     	; 0x3756 <__addsf3x+0x34>
    3770:	46 95       	lsr	r20
    3772:	37 95       	ror	r19
    3774:	27 95       	ror	r18
    3776:	a7 95       	ror	r26
    3778:	f0 40       	sbci	r31, 0x00	; 0
    377a:	53 95       	inc	r21
    377c:	c9 f7       	brne	.-14     	; 0x3770 <__addsf3x+0x4e>
    377e:	7e f4       	brtc	.+30     	; 0x379e <__addsf3x+0x7c>
    3780:	1f 16       	cp	r1, r31
    3782:	ba 0b       	sbc	r27, r26
    3784:	62 0b       	sbc	r22, r18
    3786:	73 0b       	sbc	r23, r19
    3788:	84 0b       	sbc	r24, r20
    378a:	ba f0       	brmi	.+46     	; 0x37ba <__addsf3x+0x98>
    378c:	91 50       	subi	r25, 0x01	; 1
    378e:	a1 f0       	breq	.+40     	; 0x37b8 <__addsf3x+0x96>
    3790:	ff 0f       	add	r31, r31
    3792:	bb 1f       	adc	r27, r27
    3794:	66 1f       	adc	r22, r22
    3796:	77 1f       	adc	r23, r23
    3798:	88 1f       	adc	r24, r24
    379a:	c2 f7       	brpl	.-16     	; 0x378c <__addsf3x+0x6a>
    379c:	0e c0       	rjmp	.+28     	; 0x37ba <__addsf3x+0x98>
    379e:	ba 0f       	add	r27, r26
    37a0:	62 1f       	adc	r22, r18
    37a2:	73 1f       	adc	r23, r19
    37a4:	84 1f       	adc	r24, r20
    37a6:	48 f4       	brcc	.+18     	; 0x37ba <__addsf3x+0x98>
    37a8:	87 95       	ror	r24
    37aa:	77 95       	ror	r23
    37ac:	67 95       	ror	r22
    37ae:	b7 95       	ror	r27
    37b0:	f7 95       	ror	r31
    37b2:	9e 3f       	cpi	r25, 0xFE	; 254
    37b4:	08 f0       	brcs	.+2      	; 0x37b8 <__addsf3x+0x96>
    37b6:	b3 cf       	rjmp	.-154    	; 0x371e <__addsf3+0x1e>
    37b8:	93 95       	inc	r25
    37ba:	88 0f       	add	r24, r24
    37bc:	08 f0       	brcs	.+2      	; 0x37c0 <__addsf3x+0x9e>
    37be:	99 27       	eor	r25, r25
    37c0:	ee 0f       	add	r30, r30
    37c2:	97 95       	ror	r25
    37c4:	87 95       	ror	r24
    37c6:	08 95       	ret
    37c8:	90 d1       	rcall	.+800    	; 0x3aea <__fp_pscA>
    37ca:	58 f0       	brcs	.+22     	; 0x37e2 <__addsf3x+0xc0>
    37cc:	80 e8       	ldi	r24, 0x80	; 128
    37ce:	91 e0       	ldi	r25, 0x01	; 1
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <__addsf3x+0xb2>
    37d2:	9e ef       	ldi	r25, 0xFE	; 254
    37d4:	91 d1       	rcall	.+802    	; 0x3af8 <__fp_pscB>
    37d6:	28 f0       	brcs	.+10     	; 0x37e2 <__addsf3x+0xc0>
    37d8:	40 e8       	ldi	r20, 0x80	; 128
    37da:	51 e0       	ldi	r21, 0x01	; 1
    37dc:	59 f4       	brne	.+22     	; 0x37f4 <atan2+0xe>
    37de:	5e ef       	ldi	r21, 0xFE	; 254
    37e0:	09 c0       	rjmp	.+18     	; 0x37f4 <atan2+0xe>
    37e2:	5b c1       	rjmp	.+694    	; 0x3a9a <__fp_nan>
    37e4:	fc c1       	rjmp	.+1016   	; 0x3bde <__fp_zero>

000037e6 <atan2>:
    37e6:	e9 2f       	mov	r30, r25
    37e8:	e0 78       	andi	r30, 0x80	; 128
    37ea:	d7 d1       	rcall	.+942    	; 0x3b9a <__fp_split3>
    37ec:	68 f3       	brcs	.-38     	; 0x37c8 <__addsf3x+0xa6>
    37ee:	09 2e       	mov	r0, r25
    37f0:	05 2a       	or	r0, r21
    37f2:	c1 f3       	breq	.-16     	; 0x37e4 <__addsf3x+0xc2>
    37f4:	26 17       	cp	r18, r22
    37f6:	37 07       	cpc	r19, r23
    37f8:	48 07       	cpc	r20, r24
    37fa:	59 07       	cpc	r21, r25
    37fc:	38 f0       	brcs	.+14     	; 0x380c <atan2+0x26>
    37fe:	0e 2e       	mov	r0, r30
    3800:	07 f8       	bld	r0, 7
    3802:	e0 25       	eor	r30, r0
    3804:	69 f0       	breq	.+26     	; 0x3820 <atan2+0x3a>
    3806:	e0 25       	eor	r30, r0
    3808:	e0 64       	ori	r30, 0x40	; 64
    380a:	0a c0       	rjmp	.+20     	; 0x3820 <atan2+0x3a>
    380c:	ef 63       	ori	r30, 0x3F	; 63
    380e:	07 f8       	bld	r0, 7
    3810:	00 94       	com	r0
    3812:	07 fa       	bst	r0, 7
    3814:	db 01       	movw	r26, r22
    3816:	b9 01       	movw	r22, r18
    3818:	9d 01       	movw	r18, r26
    381a:	dc 01       	movw	r26, r24
    381c:	ca 01       	movw	r24, r20
    381e:	ad 01       	movw	r20, r26
    3820:	ef 93       	push	r30
    3822:	4a d0       	rcall	.+148    	; 0x38b8 <__divsf3_pse>
    3824:	98 d1       	rcall	.+816    	; 0x3b56 <__fp_round>
    3826:	0a d0       	rcall	.+20     	; 0x383c <atan>
    3828:	5f 91       	pop	r21
    382a:	55 23       	and	r21, r21
    382c:	31 f0       	breq	.+12     	; 0x383a <atan2+0x54>
    382e:	2b ed       	ldi	r18, 0xDB	; 219
    3830:	3f e0       	ldi	r19, 0x0F	; 15
    3832:	49 e4       	ldi	r20, 0x49	; 73
    3834:	50 fd       	sbrc	r21, 0
    3836:	49 ec       	ldi	r20, 0xC9	; 201
    3838:	63 cf       	rjmp	.-314    	; 0x3700 <__addsf3>
    383a:	08 95       	ret

0000383c <atan>:
    383c:	df 93       	push	r29
    383e:	dd 27       	eor	r29, r29
    3840:	b9 2f       	mov	r27, r25
    3842:	bf 77       	andi	r27, 0x7F	; 127
    3844:	40 e8       	ldi	r20, 0x80	; 128
    3846:	5f e3       	ldi	r21, 0x3F	; 63
    3848:	16 16       	cp	r1, r22
    384a:	17 06       	cpc	r1, r23
    384c:	48 07       	cpc	r20, r24
    384e:	5b 07       	cpc	r21, r27
    3850:	10 f4       	brcc	.+4      	; 0x3856 <atan+0x1a>
    3852:	d9 2f       	mov	r29, r25
    3854:	cb d1       	rcall	.+918    	; 0x3bec <inverse>
    3856:	9f 93       	push	r25
    3858:	8f 93       	push	r24
    385a:	7f 93       	push	r23
    385c:	6f 93       	push	r22
    385e:	78 d2       	rcall	.+1264   	; 0x3d50 <square>
    3860:	ee e2       	ldi	r30, 0x2E	; 46
    3862:	f1 e0       	ldi	r31, 0x01	; 1
    3864:	1d d1       	rcall	.+570    	; 0x3aa0 <__fp_powser>
    3866:	77 d1       	rcall	.+750    	; 0x3b56 <__fp_round>
    3868:	2f 91       	pop	r18
    386a:	3f 91       	pop	r19
    386c:	4f 91       	pop	r20
    386e:	5f 91       	pop	r21
    3870:	d0 d1       	rcall	.+928    	; 0x3c12 <__mulsf3x>
    3872:	dd 23       	and	r29, r29
    3874:	49 f0       	breq	.+18     	; 0x3888 <atan+0x4c>
    3876:	90 58       	subi	r25, 0x80	; 128
    3878:	a2 ea       	ldi	r26, 0xA2	; 162
    387a:	2a ed       	ldi	r18, 0xDA	; 218
    387c:	3f e0       	ldi	r19, 0x0F	; 15
    387e:	49 ec       	ldi	r20, 0xC9	; 201
    3880:	5f e3       	ldi	r21, 0x3F	; 63
    3882:	d0 78       	andi	r29, 0x80	; 128
    3884:	5d 27       	eor	r21, r29
    3886:	4d df       	rcall	.-358    	; 0x3722 <__addsf3x>
    3888:	df 91       	pop	r29
    388a:	65 c1       	rjmp	.+714    	; 0x3b56 <__fp_round>

0000388c <__cmpsf2>:
    388c:	dc d0       	rcall	.+440    	; 0x3a46 <__fp_cmp>
    388e:	08 f4       	brcc	.+2      	; 0x3892 <__cmpsf2+0x6>
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	08 95       	ret

00003894 <cos>:
    3894:	39 d1       	rcall	.+626    	; 0x3b08 <__fp_rempio2>
    3896:	e3 95       	inc	r30
    3898:	6f c1       	rjmp	.+734    	; 0x3b78 <__fp_sinus>

0000389a <__divsf3>:
    389a:	0c d0       	rcall	.+24     	; 0x38b4 <__divsf3x>
    389c:	5c c1       	rjmp	.+696    	; 0x3b56 <__fp_round>
    389e:	2c d1       	rcall	.+600    	; 0x3af8 <__fp_pscB>
    38a0:	40 f0       	brcs	.+16     	; 0x38b2 <__divsf3+0x18>
    38a2:	23 d1       	rcall	.+582    	; 0x3aea <__fp_pscA>
    38a4:	30 f0       	brcs	.+12     	; 0x38b2 <__divsf3+0x18>
    38a6:	21 f4       	brne	.+8      	; 0x38b0 <__divsf3+0x16>
    38a8:	5f 3f       	cpi	r21, 0xFF	; 255
    38aa:	19 f0       	breq	.+6      	; 0x38b2 <__divsf3+0x18>
    38ac:	f0 c0       	rjmp	.+480    	; 0x3a8e <__fp_inf>
    38ae:	51 11       	cpse	r21, r1
    38b0:	97 c1       	rjmp	.+814    	; 0x3be0 <__fp_szero>
    38b2:	f3 c0       	rjmp	.+486    	; 0x3a9a <__fp_nan>

000038b4 <__divsf3x>:
    38b4:	72 d1       	rcall	.+740    	; 0x3b9a <__fp_split3>
    38b6:	98 f3       	brcs	.-26     	; 0x389e <__divsf3+0x4>

000038b8 <__divsf3_pse>:
    38b8:	99 23       	and	r25, r25
    38ba:	c9 f3       	breq	.-14     	; 0x38ae <__divsf3+0x14>
    38bc:	55 23       	and	r21, r21
    38be:	b1 f3       	breq	.-20     	; 0x38ac <__divsf3+0x12>
    38c0:	95 1b       	sub	r25, r21
    38c2:	55 0b       	sbc	r21, r21
    38c4:	bb 27       	eor	r27, r27
    38c6:	aa 27       	eor	r26, r26
    38c8:	62 17       	cp	r22, r18
    38ca:	73 07       	cpc	r23, r19
    38cc:	84 07       	cpc	r24, r20
    38ce:	38 f0       	brcs	.+14     	; 0x38de <__divsf3_pse+0x26>
    38d0:	9f 5f       	subi	r25, 0xFF	; 255
    38d2:	5f 4f       	sbci	r21, 0xFF	; 255
    38d4:	22 0f       	add	r18, r18
    38d6:	33 1f       	adc	r19, r19
    38d8:	44 1f       	adc	r20, r20
    38da:	aa 1f       	adc	r26, r26
    38dc:	a9 f3       	breq	.-22     	; 0x38c8 <__divsf3_pse+0x10>
    38de:	33 d0       	rcall	.+102    	; 0x3946 <__divsf3_pse+0x8e>
    38e0:	0e 2e       	mov	r0, r30
    38e2:	3a f0       	brmi	.+14     	; 0x38f2 <__divsf3_pse+0x3a>
    38e4:	e0 e8       	ldi	r30, 0x80	; 128
    38e6:	30 d0       	rcall	.+96     	; 0x3948 <__divsf3_pse+0x90>
    38e8:	91 50       	subi	r25, 0x01	; 1
    38ea:	50 40       	sbci	r21, 0x00	; 0
    38ec:	e6 95       	lsr	r30
    38ee:	00 1c       	adc	r0, r0
    38f0:	ca f7       	brpl	.-14     	; 0x38e4 <__divsf3_pse+0x2c>
    38f2:	29 d0       	rcall	.+82     	; 0x3946 <__divsf3_pse+0x8e>
    38f4:	fe 2f       	mov	r31, r30
    38f6:	27 d0       	rcall	.+78     	; 0x3946 <__divsf3_pse+0x8e>
    38f8:	66 0f       	add	r22, r22
    38fa:	77 1f       	adc	r23, r23
    38fc:	88 1f       	adc	r24, r24
    38fe:	bb 1f       	adc	r27, r27
    3900:	26 17       	cp	r18, r22
    3902:	37 07       	cpc	r19, r23
    3904:	48 07       	cpc	r20, r24
    3906:	ab 07       	cpc	r26, r27
    3908:	b0 e8       	ldi	r27, 0x80	; 128
    390a:	09 f0       	breq	.+2      	; 0x390e <__divsf3_pse+0x56>
    390c:	bb 0b       	sbc	r27, r27
    390e:	80 2d       	mov	r24, r0
    3910:	bf 01       	movw	r22, r30
    3912:	ff 27       	eor	r31, r31
    3914:	93 58       	subi	r25, 0x83	; 131
    3916:	5f 4f       	sbci	r21, 0xFF	; 255
    3918:	2a f0       	brmi	.+10     	; 0x3924 <__divsf3_pse+0x6c>
    391a:	9e 3f       	cpi	r25, 0xFE	; 254
    391c:	51 05       	cpc	r21, r1
    391e:	68 f0       	brcs	.+26     	; 0x393a <__divsf3_pse+0x82>
    3920:	b6 c0       	rjmp	.+364    	; 0x3a8e <__fp_inf>
    3922:	5e c1       	rjmp	.+700    	; 0x3be0 <__fp_szero>
    3924:	5f 3f       	cpi	r21, 0xFF	; 255
    3926:	ec f3       	brlt	.-6      	; 0x3922 <__divsf3_pse+0x6a>
    3928:	98 3e       	cpi	r25, 0xE8	; 232
    392a:	dc f3       	brlt	.-10     	; 0x3922 <__divsf3_pse+0x6a>
    392c:	86 95       	lsr	r24
    392e:	77 95       	ror	r23
    3930:	67 95       	ror	r22
    3932:	b7 95       	ror	r27
    3934:	f7 95       	ror	r31
    3936:	9f 5f       	subi	r25, 0xFF	; 255
    3938:	c9 f7       	brne	.-14     	; 0x392c <__divsf3_pse+0x74>
    393a:	88 0f       	add	r24, r24
    393c:	91 1d       	adc	r25, r1
    393e:	96 95       	lsr	r25
    3940:	87 95       	ror	r24
    3942:	97 f9       	bld	r25, 7
    3944:	08 95       	ret
    3946:	e1 e0       	ldi	r30, 0x01	; 1
    3948:	66 0f       	add	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	88 1f       	adc	r24, r24
    394e:	bb 1f       	adc	r27, r27
    3950:	62 17       	cp	r22, r18
    3952:	73 07       	cpc	r23, r19
    3954:	84 07       	cpc	r24, r20
    3956:	ba 07       	cpc	r27, r26
    3958:	20 f0       	brcs	.+8      	; 0x3962 <__divsf3_pse+0xaa>
    395a:	62 1b       	sub	r22, r18
    395c:	73 0b       	sbc	r23, r19
    395e:	84 0b       	sbc	r24, r20
    3960:	ba 0b       	sbc	r27, r26
    3962:	ee 1f       	adc	r30, r30
    3964:	88 f7       	brcc	.-30     	; 0x3948 <__divsf3_pse+0x90>
    3966:	e0 95       	com	r30
    3968:	08 95       	ret

0000396a <__fixsfsi>:
    396a:	04 d0       	rcall	.+8      	; 0x3974 <__fixunssfsi>
    396c:	68 94       	set
    396e:	b1 11       	cpse	r27, r1
    3970:	37 c1       	rjmp	.+622    	; 0x3be0 <__fp_szero>
    3972:	08 95       	ret

00003974 <__fixunssfsi>:
    3974:	1a d1       	rcall	.+564    	; 0x3baa <__fp_splitA>
    3976:	88 f0       	brcs	.+34     	; 0x399a <__fixunssfsi+0x26>
    3978:	9f 57       	subi	r25, 0x7F	; 127
    397a:	90 f0       	brcs	.+36     	; 0x39a0 <__fixunssfsi+0x2c>
    397c:	b9 2f       	mov	r27, r25
    397e:	99 27       	eor	r25, r25
    3980:	b7 51       	subi	r27, 0x17	; 23
    3982:	a0 f0       	brcs	.+40     	; 0x39ac <__fixunssfsi+0x38>
    3984:	d1 f0       	breq	.+52     	; 0x39ba <__fixunssfsi+0x46>
    3986:	66 0f       	add	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	88 1f       	adc	r24, r24
    398c:	99 1f       	adc	r25, r25
    398e:	1a f0       	brmi	.+6      	; 0x3996 <__fixunssfsi+0x22>
    3990:	ba 95       	dec	r27
    3992:	c9 f7       	brne	.-14     	; 0x3986 <__fixunssfsi+0x12>
    3994:	12 c0       	rjmp	.+36     	; 0x39ba <__fixunssfsi+0x46>
    3996:	b1 30       	cpi	r27, 0x01	; 1
    3998:	81 f0       	breq	.+32     	; 0x39ba <__fixunssfsi+0x46>
    399a:	21 d1       	rcall	.+578    	; 0x3bde <__fp_zero>
    399c:	b1 e0       	ldi	r27, 0x01	; 1
    399e:	08 95       	ret
    39a0:	1e c1       	rjmp	.+572    	; 0x3bde <__fp_zero>
    39a2:	67 2f       	mov	r22, r23
    39a4:	78 2f       	mov	r23, r24
    39a6:	88 27       	eor	r24, r24
    39a8:	b8 5f       	subi	r27, 0xF8	; 248
    39aa:	39 f0       	breq	.+14     	; 0x39ba <__fixunssfsi+0x46>
    39ac:	b9 3f       	cpi	r27, 0xF9	; 249
    39ae:	cc f3       	brlt	.-14     	; 0x39a2 <__fixunssfsi+0x2e>
    39b0:	86 95       	lsr	r24
    39b2:	77 95       	ror	r23
    39b4:	67 95       	ror	r22
    39b6:	b3 95       	inc	r27
    39b8:	d9 f7       	brne	.-10     	; 0x39b0 <__fixunssfsi+0x3c>
    39ba:	3e f4       	brtc	.+14     	; 0x39ca <__fixunssfsi+0x56>
    39bc:	90 95       	com	r25
    39be:	80 95       	com	r24
    39c0:	70 95       	com	r23
    39c2:	61 95       	neg	r22
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	8f 4f       	sbci	r24, 0xFF	; 255
    39c8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ca:	08 95       	ret

000039cc <__floatunsisf>:
    39cc:	e8 94       	clt
    39ce:	09 c0       	rjmp	.+18     	; 0x39e2 <__floatsisf+0x12>

000039d0 <__floatsisf>:
    39d0:	97 fb       	bst	r25, 7
    39d2:	3e f4       	brtc	.+14     	; 0x39e2 <__floatsisf+0x12>
    39d4:	90 95       	com	r25
    39d6:	80 95       	com	r24
    39d8:	70 95       	com	r23
    39da:	61 95       	neg	r22
    39dc:	7f 4f       	sbci	r23, 0xFF	; 255
    39de:	8f 4f       	sbci	r24, 0xFF	; 255
    39e0:	9f 4f       	sbci	r25, 0xFF	; 255
    39e2:	99 23       	and	r25, r25
    39e4:	a9 f0       	breq	.+42     	; 0x3a10 <__floatsisf+0x40>
    39e6:	f9 2f       	mov	r31, r25
    39e8:	96 e9       	ldi	r25, 0x96	; 150
    39ea:	bb 27       	eor	r27, r27
    39ec:	93 95       	inc	r25
    39ee:	f6 95       	lsr	r31
    39f0:	87 95       	ror	r24
    39f2:	77 95       	ror	r23
    39f4:	67 95       	ror	r22
    39f6:	b7 95       	ror	r27
    39f8:	f1 11       	cpse	r31, r1
    39fa:	f8 cf       	rjmp	.-16     	; 0x39ec <__floatsisf+0x1c>
    39fc:	fa f4       	brpl	.+62     	; 0x3a3c <__floatsisf+0x6c>
    39fe:	bb 0f       	add	r27, r27
    3a00:	11 f4       	brne	.+4      	; 0x3a06 <__floatsisf+0x36>
    3a02:	60 ff       	sbrs	r22, 0
    3a04:	1b c0       	rjmp	.+54     	; 0x3a3c <__floatsisf+0x6c>
    3a06:	6f 5f       	subi	r22, 0xFF	; 255
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0e:	16 c0       	rjmp	.+44     	; 0x3a3c <__floatsisf+0x6c>
    3a10:	88 23       	and	r24, r24
    3a12:	11 f0       	breq	.+4      	; 0x3a18 <__floatsisf+0x48>
    3a14:	96 e9       	ldi	r25, 0x96	; 150
    3a16:	11 c0       	rjmp	.+34     	; 0x3a3a <__floatsisf+0x6a>
    3a18:	77 23       	and	r23, r23
    3a1a:	21 f0       	breq	.+8      	; 0x3a24 <__floatsisf+0x54>
    3a1c:	9e e8       	ldi	r25, 0x8E	; 142
    3a1e:	87 2f       	mov	r24, r23
    3a20:	76 2f       	mov	r23, r22
    3a22:	05 c0       	rjmp	.+10     	; 0x3a2e <__floatsisf+0x5e>
    3a24:	66 23       	and	r22, r22
    3a26:	71 f0       	breq	.+28     	; 0x3a44 <__floatsisf+0x74>
    3a28:	96 e8       	ldi	r25, 0x86	; 134
    3a2a:	86 2f       	mov	r24, r22
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	2a f0       	brmi	.+10     	; 0x3a3c <__floatsisf+0x6c>
    3a32:	9a 95       	dec	r25
    3a34:	66 0f       	add	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	88 1f       	adc	r24, r24
    3a3a:	da f7       	brpl	.-10     	; 0x3a32 <__floatsisf+0x62>
    3a3c:	88 0f       	add	r24, r24
    3a3e:	96 95       	lsr	r25
    3a40:	87 95       	ror	r24
    3a42:	97 f9       	bld	r25, 7
    3a44:	08 95       	ret

00003a46 <__fp_cmp>:
    3a46:	99 0f       	add	r25, r25
    3a48:	00 08       	sbc	r0, r0
    3a4a:	55 0f       	add	r21, r21
    3a4c:	aa 0b       	sbc	r26, r26
    3a4e:	e0 e8       	ldi	r30, 0x80	; 128
    3a50:	fe ef       	ldi	r31, 0xFE	; 254
    3a52:	16 16       	cp	r1, r22
    3a54:	17 06       	cpc	r1, r23
    3a56:	e8 07       	cpc	r30, r24
    3a58:	f9 07       	cpc	r31, r25
    3a5a:	c0 f0       	brcs	.+48     	; 0x3a8c <__fp_cmp+0x46>
    3a5c:	12 16       	cp	r1, r18
    3a5e:	13 06       	cpc	r1, r19
    3a60:	e4 07       	cpc	r30, r20
    3a62:	f5 07       	cpc	r31, r21
    3a64:	98 f0       	brcs	.+38     	; 0x3a8c <__fp_cmp+0x46>
    3a66:	62 1b       	sub	r22, r18
    3a68:	73 0b       	sbc	r23, r19
    3a6a:	84 0b       	sbc	r24, r20
    3a6c:	95 0b       	sbc	r25, r21
    3a6e:	39 f4       	brne	.+14     	; 0x3a7e <__fp_cmp+0x38>
    3a70:	0a 26       	eor	r0, r26
    3a72:	61 f0       	breq	.+24     	; 0x3a8c <__fp_cmp+0x46>
    3a74:	23 2b       	or	r18, r19
    3a76:	24 2b       	or	r18, r20
    3a78:	25 2b       	or	r18, r21
    3a7a:	21 f4       	brne	.+8      	; 0x3a84 <__fp_cmp+0x3e>
    3a7c:	08 95       	ret
    3a7e:	0a 26       	eor	r0, r26
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <__fp_cmp+0x3e>
    3a82:	a1 40       	sbci	r26, 0x01	; 1
    3a84:	a6 95       	lsr	r26
    3a86:	8f ef       	ldi	r24, 0xFF	; 255
    3a88:	81 1d       	adc	r24, r1
    3a8a:	81 1d       	adc	r24, r1
    3a8c:	08 95       	ret

00003a8e <__fp_inf>:
    3a8e:	97 f9       	bld	r25, 7
    3a90:	9f 67       	ori	r25, 0x7F	; 127
    3a92:	80 e8       	ldi	r24, 0x80	; 128
    3a94:	70 e0       	ldi	r23, 0x00	; 0
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	08 95       	ret

00003a9a <__fp_nan>:
    3a9a:	9f ef       	ldi	r25, 0xFF	; 255
    3a9c:	80 ec       	ldi	r24, 0xC0	; 192
    3a9e:	08 95       	ret

00003aa0 <__fp_powser>:
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	1f 93       	push	r17
    3aa6:	0f 93       	push	r16
    3aa8:	ff 92       	push	r15
    3aaa:	ef 92       	push	r14
    3aac:	df 92       	push	r13
    3aae:	7b 01       	movw	r14, r22
    3ab0:	8c 01       	movw	r16, r24
    3ab2:	68 94       	set
    3ab4:	05 c0       	rjmp	.+10     	; 0x3ac0 <__fp_powser+0x20>
    3ab6:	da 2e       	mov	r13, r26
    3ab8:	ef 01       	movw	r28, r30
    3aba:	ab d0       	rcall	.+342    	; 0x3c12 <__mulsf3x>
    3abc:	fe 01       	movw	r30, r28
    3abe:	e8 94       	clt
    3ac0:	a5 91       	lpm	r26, Z+
    3ac2:	25 91       	lpm	r18, Z+
    3ac4:	35 91       	lpm	r19, Z+
    3ac6:	45 91       	lpm	r20, Z+
    3ac8:	55 91       	lpm	r21, Z+
    3aca:	ae f3       	brts	.-22     	; 0x3ab6 <__fp_powser+0x16>
    3acc:	ef 01       	movw	r28, r30
    3ace:	29 de       	rcall	.-942    	; 0x3722 <__addsf3x>
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	97 01       	movw	r18, r14
    3ad4:	a8 01       	movw	r20, r16
    3ad6:	da 94       	dec	r13
    3ad8:	79 f7       	brne	.-34     	; 0x3ab8 <__fp_powser+0x18>
    3ada:	df 90       	pop	r13
    3adc:	ef 90       	pop	r14
    3ade:	ff 90       	pop	r15
    3ae0:	0f 91       	pop	r16
    3ae2:	1f 91       	pop	r17
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <__fp_pscA>:
    3aea:	00 24       	eor	r0, r0
    3aec:	0a 94       	dec	r0
    3aee:	16 16       	cp	r1, r22
    3af0:	17 06       	cpc	r1, r23
    3af2:	18 06       	cpc	r1, r24
    3af4:	09 06       	cpc	r0, r25
    3af6:	08 95       	ret

00003af8 <__fp_pscB>:
    3af8:	00 24       	eor	r0, r0
    3afa:	0a 94       	dec	r0
    3afc:	12 16       	cp	r1, r18
    3afe:	13 06       	cpc	r1, r19
    3b00:	14 06       	cpc	r1, r20
    3b02:	05 06       	cpc	r0, r21
    3b04:	08 95       	ret
    3b06:	c9 cf       	rjmp	.-110    	; 0x3a9a <__fp_nan>

00003b08 <__fp_rempio2>:
    3b08:	50 d0       	rcall	.+160    	; 0x3baa <__fp_splitA>
    3b0a:	e8 f3       	brcs	.-6      	; 0x3b06 <__fp_pscB+0xe>
    3b0c:	e8 94       	clt
    3b0e:	e0 e0       	ldi	r30, 0x00	; 0
    3b10:	bb 27       	eor	r27, r27
    3b12:	9f 57       	subi	r25, 0x7F	; 127
    3b14:	f0 f0       	brcs	.+60     	; 0x3b52 <__fp_rempio2+0x4a>
    3b16:	2a ed       	ldi	r18, 0xDA	; 218
    3b18:	3f e0       	ldi	r19, 0x0F	; 15
    3b1a:	49 ec       	ldi	r20, 0xC9	; 201
    3b1c:	06 c0       	rjmp	.+12     	; 0x3b2a <__fp_rempio2+0x22>
    3b1e:	ee 0f       	add	r30, r30
    3b20:	bb 0f       	add	r27, r27
    3b22:	66 1f       	adc	r22, r22
    3b24:	77 1f       	adc	r23, r23
    3b26:	88 1f       	adc	r24, r24
    3b28:	28 f0       	brcs	.+10     	; 0x3b34 <__fp_rempio2+0x2c>
    3b2a:	b2 3a       	cpi	r27, 0xA2	; 162
    3b2c:	62 07       	cpc	r22, r18
    3b2e:	73 07       	cpc	r23, r19
    3b30:	84 07       	cpc	r24, r20
    3b32:	28 f0       	brcs	.+10     	; 0x3b3e <__fp_rempio2+0x36>
    3b34:	b2 5a       	subi	r27, 0xA2	; 162
    3b36:	62 0b       	sbc	r22, r18
    3b38:	73 0b       	sbc	r23, r19
    3b3a:	84 0b       	sbc	r24, r20
    3b3c:	e3 95       	inc	r30
    3b3e:	9a 95       	dec	r25
    3b40:	72 f7       	brpl	.-36     	; 0x3b1e <__fp_rempio2+0x16>
    3b42:	80 38       	cpi	r24, 0x80	; 128
    3b44:	30 f4       	brcc	.+12     	; 0x3b52 <__fp_rempio2+0x4a>
    3b46:	9a 95       	dec	r25
    3b48:	bb 0f       	add	r27, r27
    3b4a:	66 1f       	adc	r22, r22
    3b4c:	77 1f       	adc	r23, r23
    3b4e:	88 1f       	adc	r24, r24
    3b50:	d2 f7       	brpl	.-12     	; 0x3b46 <__fp_rempio2+0x3e>
    3b52:	90 48       	sbci	r25, 0x80	; 128
    3b54:	02 c1       	rjmp	.+516    	; 0x3d5a <__fp_mpack_finite>

00003b56 <__fp_round>:
    3b56:	09 2e       	mov	r0, r25
    3b58:	03 94       	inc	r0
    3b5a:	00 0c       	add	r0, r0
    3b5c:	11 f4       	brne	.+4      	; 0x3b62 <__fp_round+0xc>
    3b5e:	88 23       	and	r24, r24
    3b60:	52 f0       	brmi	.+20     	; 0x3b76 <__fp_round+0x20>
    3b62:	bb 0f       	add	r27, r27
    3b64:	40 f4       	brcc	.+16     	; 0x3b76 <__fp_round+0x20>
    3b66:	bf 2b       	or	r27, r31
    3b68:	11 f4       	brne	.+4      	; 0x3b6e <__fp_round+0x18>
    3b6a:	60 ff       	sbrs	r22, 0
    3b6c:	04 c0       	rjmp	.+8      	; 0x3b76 <__fp_round+0x20>
    3b6e:	6f 5f       	subi	r22, 0xFF	; 255
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	8f 4f       	sbci	r24, 0xFF	; 255
    3b74:	9f 4f       	sbci	r25, 0xFF	; 255
    3b76:	08 95       	ret

00003b78 <__fp_sinus>:
    3b78:	ef 93       	push	r30
    3b7a:	e0 ff       	sbrs	r30, 0
    3b7c:	06 c0       	rjmp	.+12     	; 0x3b8a <__fp_sinus+0x12>
    3b7e:	a2 ea       	ldi	r26, 0xA2	; 162
    3b80:	2a ed       	ldi	r18, 0xDA	; 218
    3b82:	3f e0       	ldi	r19, 0x0F	; 15
    3b84:	49 ec       	ldi	r20, 0xC9	; 201
    3b86:	5f eb       	ldi	r21, 0xBF	; 191
    3b88:	cc dd       	rcall	.-1128   	; 0x3722 <__addsf3x>
    3b8a:	e5 df       	rcall	.-54     	; 0x3b56 <__fp_round>
    3b8c:	0f 90       	pop	r0
    3b8e:	03 94       	inc	r0
    3b90:	01 fc       	sbrc	r0, 1
    3b92:	90 58       	subi	r25, 0x80	; 128
    3b94:	eb e5       	ldi	r30, 0x5B	; 91
    3b96:	f1 e0       	ldi	r31, 0x01	; 1
    3b98:	f3 c0       	rjmp	.+486    	; 0x3d80 <__fp_powsodd>

00003b9a <__fp_split3>:
    3b9a:	57 fd       	sbrc	r21, 7
    3b9c:	90 58       	subi	r25, 0x80	; 128
    3b9e:	44 0f       	add	r20, r20
    3ba0:	55 1f       	adc	r21, r21
    3ba2:	59 f0       	breq	.+22     	; 0x3bba <__fp_splitA+0x10>
    3ba4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ba6:	71 f0       	breq	.+28     	; 0x3bc4 <__fp_splitA+0x1a>
    3ba8:	47 95       	ror	r20

00003baa <__fp_splitA>:
    3baa:	88 0f       	add	r24, r24
    3bac:	97 fb       	bst	r25, 7
    3bae:	99 1f       	adc	r25, r25
    3bb0:	61 f0       	breq	.+24     	; 0x3bca <__fp_splitA+0x20>
    3bb2:	9f 3f       	cpi	r25, 0xFF	; 255
    3bb4:	79 f0       	breq	.+30     	; 0x3bd4 <__fp_splitA+0x2a>
    3bb6:	87 95       	ror	r24
    3bb8:	08 95       	ret
    3bba:	12 16       	cp	r1, r18
    3bbc:	13 06       	cpc	r1, r19
    3bbe:	14 06       	cpc	r1, r20
    3bc0:	55 1f       	adc	r21, r21
    3bc2:	f2 cf       	rjmp	.-28     	; 0x3ba8 <__fp_split3+0xe>
    3bc4:	46 95       	lsr	r20
    3bc6:	f1 df       	rcall	.-30     	; 0x3baa <__fp_splitA>
    3bc8:	08 c0       	rjmp	.+16     	; 0x3bda <__fp_splitA+0x30>
    3bca:	16 16       	cp	r1, r22
    3bcc:	17 06       	cpc	r1, r23
    3bce:	18 06       	cpc	r1, r24
    3bd0:	99 1f       	adc	r25, r25
    3bd2:	f1 cf       	rjmp	.-30     	; 0x3bb6 <__fp_splitA+0xc>
    3bd4:	86 95       	lsr	r24
    3bd6:	71 05       	cpc	r23, r1
    3bd8:	61 05       	cpc	r22, r1
    3bda:	08 94       	sec
    3bdc:	08 95       	ret

00003bde <__fp_zero>:
    3bde:	e8 94       	clt

00003be0 <__fp_szero>:
    3be0:	bb 27       	eor	r27, r27
    3be2:	66 27       	eor	r22, r22
    3be4:	77 27       	eor	r23, r23
    3be6:	cb 01       	movw	r24, r22
    3be8:	97 f9       	bld	r25, 7
    3bea:	08 95       	ret

00003bec <inverse>:
    3bec:	9b 01       	movw	r18, r22
    3bee:	ac 01       	movw	r20, r24
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	80 e8       	ldi	r24, 0x80	; 128
    3bf6:	9f e3       	ldi	r25, 0x3F	; 63
    3bf8:	50 ce       	rjmp	.-864    	; 0x389a <__divsf3>

00003bfa <__mulsf3>:
    3bfa:	0b d0       	rcall	.+22     	; 0x3c12 <__mulsf3x>
    3bfc:	ac cf       	rjmp	.-168    	; 0x3b56 <__fp_round>
    3bfe:	75 df       	rcall	.-278    	; 0x3aea <__fp_pscA>
    3c00:	28 f0       	brcs	.+10     	; 0x3c0c <__mulsf3+0x12>
    3c02:	7a df       	rcall	.-268    	; 0x3af8 <__fp_pscB>
    3c04:	18 f0       	brcs	.+6      	; 0x3c0c <__mulsf3+0x12>
    3c06:	95 23       	and	r25, r21
    3c08:	09 f0       	breq	.+2      	; 0x3c0c <__mulsf3+0x12>
    3c0a:	41 cf       	rjmp	.-382    	; 0x3a8e <__fp_inf>
    3c0c:	46 cf       	rjmp	.-372    	; 0x3a9a <__fp_nan>
    3c0e:	11 24       	eor	r1, r1
    3c10:	e7 cf       	rjmp	.-50     	; 0x3be0 <__fp_szero>

00003c12 <__mulsf3x>:
    3c12:	c3 df       	rcall	.-122    	; 0x3b9a <__fp_split3>
    3c14:	a0 f3       	brcs	.-24     	; 0x3bfe <__mulsf3+0x4>

00003c16 <__mulsf3_pse>:
    3c16:	95 9f       	mul	r25, r21
    3c18:	d1 f3       	breq	.-12     	; 0x3c0e <__mulsf3+0x14>
    3c1a:	95 0f       	add	r25, r21
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	55 1f       	adc	r21, r21
    3c20:	62 9f       	mul	r22, r18
    3c22:	f0 01       	movw	r30, r0
    3c24:	72 9f       	mul	r23, r18
    3c26:	bb 27       	eor	r27, r27
    3c28:	f0 0d       	add	r31, r0
    3c2a:	b1 1d       	adc	r27, r1
    3c2c:	63 9f       	mul	r22, r19
    3c2e:	aa 27       	eor	r26, r26
    3c30:	f0 0d       	add	r31, r0
    3c32:	b1 1d       	adc	r27, r1
    3c34:	aa 1f       	adc	r26, r26
    3c36:	64 9f       	mul	r22, r20
    3c38:	66 27       	eor	r22, r22
    3c3a:	b0 0d       	add	r27, r0
    3c3c:	a1 1d       	adc	r26, r1
    3c3e:	66 1f       	adc	r22, r22
    3c40:	82 9f       	mul	r24, r18
    3c42:	22 27       	eor	r18, r18
    3c44:	b0 0d       	add	r27, r0
    3c46:	a1 1d       	adc	r26, r1
    3c48:	62 1f       	adc	r22, r18
    3c4a:	73 9f       	mul	r23, r19
    3c4c:	b0 0d       	add	r27, r0
    3c4e:	a1 1d       	adc	r26, r1
    3c50:	62 1f       	adc	r22, r18
    3c52:	83 9f       	mul	r24, r19
    3c54:	a0 0d       	add	r26, r0
    3c56:	61 1d       	adc	r22, r1
    3c58:	22 1f       	adc	r18, r18
    3c5a:	74 9f       	mul	r23, r20
    3c5c:	33 27       	eor	r19, r19
    3c5e:	a0 0d       	add	r26, r0
    3c60:	61 1d       	adc	r22, r1
    3c62:	23 1f       	adc	r18, r19
    3c64:	84 9f       	mul	r24, r20
    3c66:	60 0d       	add	r22, r0
    3c68:	21 1d       	adc	r18, r1
    3c6a:	82 2f       	mov	r24, r18
    3c6c:	76 2f       	mov	r23, r22
    3c6e:	6a 2f       	mov	r22, r26
    3c70:	11 24       	eor	r1, r1
    3c72:	9f 57       	subi	r25, 0x7F	; 127
    3c74:	50 40       	sbci	r21, 0x00	; 0
    3c76:	8a f0       	brmi	.+34     	; 0x3c9a <__mulsf3_pse+0x84>
    3c78:	e1 f0       	breq	.+56     	; 0x3cb2 <__mulsf3_pse+0x9c>
    3c7a:	88 23       	and	r24, r24
    3c7c:	4a f0       	brmi	.+18     	; 0x3c90 <__mulsf3_pse+0x7a>
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	bb 1f       	adc	r27, r27
    3c84:	66 1f       	adc	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	88 1f       	adc	r24, r24
    3c8a:	91 50       	subi	r25, 0x01	; 1
    3c8c:	50 40       	sbci	r21, 0x00	; 0
    3c8e:	a9 f7       	brne	.-22     	; 0x3c7a <__mulsf3_pse+0x64>
    3c90:	9e 3f       	cpi	r25, 0xFE	; 254
    3c92:	51 05       	cpc	r21, r1
    3c94:	70 f0       	brcs	.+28     	; 0x3cb2 <__mulsf3_pse+0x9c>
    3c96:	fb ce       	rjmp	.-522    	; 0x3a8e <__fp_inf>
    3c98:	a3 cf       	rjmp	.-186    	; 0x3be0 <__fp_szero>
    3c9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3c9c:	ec f3       	brlt	.-6      	; 0x3c98 <__mulsf3_pse+0x82>
    3c9e:	98 3e       	cpi	r25, 0xE8	; 232
    3ca0:	dc f3       	brlt	.-10     	; 0x3c98 <__mulsf3_pse+0x82>
    3ca2:	86 95       	lsr	r24
    3ca4:	77 95       	ror	r23
    3ca6:	67 95       	ror	r22
    3ca8:	b7 95       	ror	r27
    3caa:	f7 95       	ror	r31
    3cac:	e7 95       	ror	r30
    3cae:	9f 5f       	subi	r25, 0xFF	; 255
    3cb0:	c1 f7       	brne	.-16     	; 0x3ca2 <__mulsf3_pse+0x8c>
    3cb2:	fe 2b       	or	r31, r30
    3cb4:	88 0f       	add	r24, r24
    3cb6:	91 1d       	adc	r25, r1
    3cb8:	96 95       	lsr	r25
    3cba:	87 95       	ror	r24
    3cbc:	97 f9       	bld	r25, 7
    3cbe:	08 95       	ret

00003cc0 <sin>:
    3cc0:	9f 93       	push	r25
    3cc2:	22 df       	rcall	.-444    	; 0x3b08 <__fp_rempio2>
    3cc4:	0f 90       	pop	r0
    3cc6:	07 fc       	sbrc	r0, 7
    3cc8:	ee 5f       	subi	r30, 0xFE	; 254
    3cca:	56 cf       	rjmp	.-340    	; 0x3b78 <__fp_sinus>
    3ccc:	11 f4       	brne	.+4      	; 0x3cd2 <sin+0x12>
    3cce:	0e f4       	brtc	.+2      	; 0x3cd2 <sin+0x12>
    3cd0:	e4 ce       	rjmp	.-568    	; 0x3a9a <__fp_nan>
    3cd2:	41 c0       	rjmp	.+130    	; 0x3d56 <__fp_mpack>

00003cd4 <sqrt>:
    3cd4:	6a df       	rcall	.-300    	; 0x3baa <__fp_splitA>
    3cd6:	d0 f3       	brcs	.-12     	; 0x3ccc <sin+0xc>
    3cd8:	99 23       	and	r25, r25
    3cda:	d9 f3       	breq	.-10     	; 0x3cd2 <sin+0x12>
    3cdc:	ce f3       	brts	.-14     	; 0x3cd0 <sin+0x10>
    3cde:	9f 57       	subi	r25, 0x7F	; 127
    3ce0:	55 0b       	sbc	r21, r21
    3ce2:	87 ff       	sbrs	r24, 7
    3ce4:	46 d0       	rcall	.+140    	; 0x3d72 <__fp_norm2>
    3ce6:	00 24       	eor	r0, r0
    3ce8:	a0 e6       	ldi	r26, 0x60	; 96
    3cea:	40 ea       	ldi	r20, 0xA0	; 160
    3cec:	90 01       	movw	r18, r0
    3cee:	80 58       	subi	r24, 0x80	; 128
    3cf0:	56 95       	lsr	r21
    3cf2:	97 95       	ror	r25
    3cf4:	28 f4       	brcc	.+10     	; 0x3d00 <sqrt+0x2c>
    3cf6:	80 5c       	subi	r24, 0xC0	; 192
    3cf8:	66 0f       	add	r22, r22
    3cfa:	77 1f       	adc	r23, r23
    3cfc:	88 1f       	adc	r24, r24
    3cfe:	20 f0       	brcs	.+8      	; 0x3d08 <sqrt+0x34>
    3d00:	26 17       	cp	r18, r22
    3d02:	37 07       	cpc	r19, r23
    3d04:	48 07       	cpc	r20, r24
    3d06:	30 f4       	brcc	.+12     	; 0x3d14 <sqrt+0x40>
    3d08:	62 1b       	sub	r22, r18
    3d0a:	73 0b       	sbc	r23, r19
    3d0c:	84 0b       	sbc	r24, r20
    3d0e:	20 29       	or	r18, r0
    3d10:	31 29       	or	r19, r1
    3d12:	4a 2b       	or	r20, r26
    3d14:	a6 95       	lsr	r26
    3d16:	17 94       	ror	r1
    3d18:	07 94       	ror	r0
    3d1a:	20 25       	eor	r18, r0
    3d1c:	31 25       	eor	r19, r1
    3d1e:	4a 27       	eor	r20, r26
    3d20:	58 f7       	brcc	.-42     	; 0x3cf8 <sqrt+0x24>
    3d22:	66 0f       	add	r22, r22
    3d24:	77 1f       	adc	r23, r23
    3d26:	88 1f       	adc	r24, r24
    3d28:	20 f0       	brcs	.+8      	; 0x3d32 <sqrt+0x5e>
    3d2a:	26 17       	cp	r18, r22
    3d2c:	37 07       	cpc	r19, r23
    3d2e:	48 07       	cpc	r20, r24
    3d30:	30 f4       	brcc	.+12     	; 0x3d3e <sqrt+0x6a>
    3d32:	62 0b       	sbc	r22, r18
    3d34:	73 0b       	sbc	r23, r19
    3d36:	84 0b       	sbc	r24, r20
    3d38:	20 0d       	add	r18, r0
    3d3a:	31 1d       	adc	r19, r1
    3d3c:	41 1d       	adc	r20, r1
    3d3e:	a0 95       	com	r26
    3d40:	81 f7       	brne	.-32     	; 0x3d22 <sqrt+0x4e>
    3d42:	b9 01       	movw	r22, r18
    3d44:	84 2f       	mov	r24, r20
    3d46:	91 58       	subi	r25, 0x81	; 129
    3d48:	88 0f       	add	r24, r24
    3d4a:	96 95       	lsr	r25
    3d4c:	87 95       	ror	r24
    3d4e:	08 95       	ret

00003d50 <square>:
    3d50:	9b 01       	movw	r18, r22
    3d52:	ac 01       	movw	r20, r24
    3d54:	52 cf       	rjmp	.-348    	; 0x3bfa <__mulsf3>

00003d56 <__fp_mpack>:
    3d56:	9f 3f       	cpi	r25, 0xFF	; 255
    3d58:	31 f0       	breq	.+12     	; 0x3d66 <__fp_mpack_finite+0xc>

00003d5a <__fp_mpack_finite>:
    3d5a:	91 50       	subi	r25, 0x01	; 1
    3d5c:	20 f4       	brcc	.+8      	; 0x3d66 <__fp_mpack_finite+0xc>
    3d5e:	87 95       	ror	r24
    3d60:	77 95       	ror	r23
    3d62:	67 95       	ror	r22
    3d64:	b7 95       	ror	r27
    3d66:	88 0f       	add	r24, r24
    3d68:	91 1d       	adc	r25, r1
    3d6a:	96 95       	lsr	r25
    3d6c:	87 95       	ror	r24
    3d6e:	97 f9       	bld	r25, 7
    3d70:	08 95       	ret

00003d72 <__fp_norm2>:
    3d72:	91 50       	subi	r25, 0x01	; 1
    3d74:	50 40       	sbci	r21, 0x00	; 0
    3d76:	66 0f       	add	r22, r22
    3d78:	77 1f       	adc	r23, r23
    3d7a:	88 1f       	adc	r24, r24
    3d7c:	d2 f7       	brpl	.-12     	; 0x3d72 <__fp_norm2>
    3d7e:	08 95       	ret

00003d80 <__fp_powsodd>:
    3d80:	9f 93       	push	r25
    3d82:	8f 93       	push	r24
    3d84:	7f 93       	push	r23
    3d86:	6f 93       	push	r22
    3d88:	ff 93       	push	r31
    3d8a:	ef 93       	push	r30
    3d8c:	9b 01       	movw	r18, r22
    3d8e:	ac 01       	movw	r20, r24
    3d90:	34 df       	rcall	.-408    	; 0x3bfa <__mulsf3>
    3d92:	ef 91       	pop	r30
    3d94:	ff 91       	pop	r31
    3d96:	84 de       	rcall	.-760    	; 0x3aa0 <__fp_powser>
    3d98:	2f 91       	pop	r18
    3d9a:	3f 91       	pop	r19
    3d9c:	4f 91       	pop	r20
    3d9e:	5f 91       	pop	r21
    3da0:	2c cf       	rjmp	.-424    	; 0x3bfa <__mulsf3>

00003da2 <itoa>:
    3da2:	fb 01       	movw	r30, r22
    3da4:	9f 01       	movw	r18, r30
    3da6:	e8 94       	clt
    3da8:	42 30       	cpi	r20, 0x02	; 2
    3daa:	c4 f0       	brlt	.+48     	; 0x3ddc <itoa+0x3a>
    3dac:	45 32       	cpi	r20, 0x25	; 37
    3dae:	b4 f4       	brge	.+44     	; 0x3ddc <itoa+0x3a>
    3db0:	4a 30       	cpi	r20, 0x0A	; 10
    3db2:	29 f4       	brne	.+10     	; 0x3dbe <itoa+0x1c>
    3db4:	97 fb       	bst	r25, 7
    3db6:	1e f4       	brtc	.+6      	; 0x3dbe <itoa+0x1c>
    3db8:	90 95       	com	r25
    3dba:	81 95       	neg	r24
    3dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbe:	64 2f       	mov	r22, r20
    3dc0:	77 27       	eor	r23, r23
    3dc2:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__udivmodhi4>
    3dc6:	80 5d       	subi	r24, 0xD0	; 208
    3dc8:	8a 33       	cpi	r24, 0x3A	; 58
    3dca:	0c f0       	brlt	.+2      	; 0x3dce <itoa+0x2c>
    3dcc:	89 5d       	subi	r24, 0xD9	; 217
    3dce:	81 93       	st	Z+, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	a1 f7       	brne	.-24     	; 0x3dbe <itoa+0x1c>
    3dd6:	16 f4       	brtc	.+4      	; 0x3ddc <itoa+0x3a>
    3dd8:	5d e2       	ldi	r21, 0x2D	; 45
    3dda:	51 93       	st	Z+, r21
    3ddc:	10 82       	st	Z, r1
    3dde:	c9 01       	movw	r24, r18
    3de0:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <strrev>

00003de4 <ltoa>:
    3de4:	fa 01       	movw	r30, r20
    3de6:	cf 93       	push	r28
    3de8:	ff 93       	push	r31
    3dea:	ef 93       	push	r30
    3dec:	22 30       	cpi	r18, 0x02	; 2
    3dee:	44 f1       	brlt	.+80     	; 0x3e40 <ltoa+0x5c>
    3df0:	25 32       	cpi	r18, 0x25	; 37
    3df2:	34 f5       	brge	.+76     	; 0x3e40 <ltoa+0x5c>
    3df4:	c2 2f       	mov	r28, r18
    3df6:	e8 94       	clt
    3df8:	ca 30       	cpi	r28, 0x0A	; 10
    3dfa:	49 f4       	brne	.+18     	; 0x3e0e <ltoa+0x2a>
    3dfc:	97 fb       	bst	r25, 7
    3dfe:	3e f4       	brtc	.+14     	; 0x3e0e <ltoa+0x2a>
    3e00:	90 95       	com	r25
    3e02:	80 95       	com	r24
    3e04:	70 95       	com	r23
    3e06:	61 95       	neg	r22
    3e08:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0e:	2c 2f       	mov	r18, r28
    3e10:	33 27       	eor	r19, r19
    3e12:	44 27       	eor	r20, r20
    3e14:	55 27       	eor	r21, r21
    3e16:	ff 93       	push	r31
    3e18:	ef 93       	push	r30
    3e1a:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodsi4>
    3e1e:	ef 91       	pop	r30
    3e20:	ff 91       	pop	r31
    3e22:	60 5d       	subi	r22, 0xD0	; 208
    3e24:	6a 33       	cpi	r22, 0x3A	; 58
    3e26:	0c f0       	brlt	.+2      	; 0x3e2a <ltoa+0x46>
    3e28:	69 5d       	subi	r22, 0xD9	; 217
    3e2a:	61 93       	st	Z+, r22
    3e2c:	b9 01       	movw	r22, r18
    3e2e:	ca 01       	movw	r24, r20
    3e30:	60 50       	subi	r22, 0x00	; 0
    3e32:	70 40       	sbci	r23, 0x00	; 0
    3e34:	80 40       	sbci	r24, 0x00	; 0
    3e36:	90 40       	sbci	r25, 0x00	; 0
    3e38:	51 f7       	brne	.-44     	; 0x3e0e <ltoa+0x2a>
    3e3a:	16 f4       	brtc	.+4      	; 0x3e40 <ltoa+0x5c>
    3e3c:	cd e2       	ldi	r28, 0x2D	; 45
    3e3e:	c1 93       	st	Z+, r28
    3e40:	10 82       	st	Z, r1
    3e42:	8f 91       	pop	r24
    3e44:	9f 91       	pop	r25
    3e46:	cf 91       	pop	r28
    3e48:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <strrev>

00003e4c <ultoa>:
    3e4c:	fa 01       	movw	r30, r20
    3e4e:	cf 93       	push	r28
    3e50:	ff 93       	push	r31
    3e52:	ef 93       	push	r30
    3e54:	22 30       	cpi	r18, 0x02	; 2
    3e56:	cc f0       	brlt	.+50     	; 0x3e8a <ultoa+0x3e>
    3e58:	25 32       	cpi	r18, 0x25	; 37
    3e5a:	bc f4       	brge	.+46     	; 0x3e8a <ultoa+0x3e>
    3e5c:	c2 2f       	mov	r28, r18
    3e5e:	2c 2f       	mov	r18, r28
    3e60:	33 27       	eor	r19, r19
    3e62:	44 27       	eor	r20, r20
    3e64:	55 27       	eor	r21, r21
    3e66:	ff 93       	push	r31
    3e68:	ef 93       	push	r30
    3e6a:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__udivmodsi4>
    3e6e:	ef 91       	pop	r30
    3e70:	ff 91       	pop	r31
    3e72:	60 5d       	subi	r22, 0xD0	; 208
    3e74:	6a 33       	cpi	r22, 0x3A	; 58
    3e76:	0c f0       	brlt	.+2      	; 0x3e7a <ultoa+0x2e>
    3e78:	69 5d       	subi	r22, 0xD9	; 217
    3e7a:	61 93       	st	Z+, r22
    3e7c:	b9 01       	movw	r22, r18
    3e7e:	ca 01       	movw	r24, r20
    3e80:	60 50       	subi	r22, 0x00	; 0
    3e82:	70 40       	sbci	r23, 0x00	; 0
    3e84:	80 40       	sbci	r24, 0x00	; 0
    3e86:	90 40       	sbci	r25, 0x00	; 0
    3e88:	51 f7       	brne	.-44     	; 0x3e5e <ultoa+0x12>
    3e8a:	10 82       	st	Z, r1
    3e8c:	8f 91       	pop	r24
    3e8e:	9f 91       	pop	r25
    3e90:	cf 91       	pop	r28
    3e92:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <strrev>

00003e96 <utoa>:
    3e96:	fb 01       	movw	r30, r22
    3e98:	9f 01       	movw	r18, r30
    3e9a:	42 30       	cpi	r20, 0x02	; 2
    3e9c:	74 f0       	brlt	.+28     	; 0x3eba <utoa+0x24>
    3e9e:	45 32       	cpi	r20, 0x25	; 37
    3ea0:	64 f4       	brge	.+24     	; 0x3eba <utoa+0x24>
    3ea2:	64 2f       	mov	r22, r20
    3ea4:	77 27       	eor	r23, r23
    3ea6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__udivmodhi4>
    3eaa:	80 5d       	subi	r24, 0xD0	; 208
    3eac:	8a 33       	cpi	r24, 0x3A	; 58
    3eae:	0c f0       	brlt	.+2      	; 0x3eb2 <utoa+0x1c>
    3eb0:	89 5d       	subi	r24, 0xD9	; 217
    3eb2:	81 93       	st	Z+, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	a1 f7       	brne	.-24     	; 0x3ea2 <utoa+0xc>
    3eba:	10 82       	st	Z, r1
    3ebc:	c9 01       	movw	r24, r18
    3ebe:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <strrev>

00003ec2 <strrev>:
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	67 2f       	mov	r22, r23
    3ec8:	71 91       	ld	r23, Z+
    3eca:	77 23       	and	r23, r23
    3ecc:	e1 f7       	brne	.-8      	; 0x3ec6 <strrev+0x4>
    3ece:	32 97       	sbiw	r30, 0x02	; 2
    3ed0:	04 c0       	rjmp	.+8      	; 0x3eda <strrev+0x18>
    3ed2:	7c 91       	ld	r23, X
    3ed4:	6d 93       	st	X+, r22
    3ed6:	70 83       	st	Z, r23
    3ed8:	62 91       	ld	r22, -Z
    3eda:	ae 17       	cp	r26, r30
    3edc:	bf 07       	cpc	r27, r31
    3ede:	c8 f3       	brcs	.-14     	; 0x3ed2 <strrev+0x10>
    3ee0:	08 95       	ret

00003ee2 <__udivmodhi4>:
    3ee2:	aa 1b       	sub	r26, r26
    3ee4:	bb 1b       	sub	r27, r27
    3ee6:	51 e1       	ldi	r21, 0x11	; 17
    3ee8:	07 c0       	rjmp	.+14     	; 0x3ef8 <__udivmodhi4_ep>

00003eea <__udivmodhi4_loop>:
    3eea:	aa 1f       	adc	r26, r26
    3eec:	bb 1f       	adc	r27, r27
    3eee:	a6 17       	cp	r26, r22
    3ef0:	b7 07       	cpc	r27, r23
    3ef2:	10 f0       	brcs	.+4      	; 0x3ef8 <__udivmodhi4_ep>
    3ef4:	a6 1b       	sub	r26, r22
    3ef6:	b7 0b       	sbc	r27, r23

00003ef8 <__udivmodhi4_ep>:
    3ef8:	88 1f       	adc	r24, r24
    3efa:	99 1f       	adc	r25, r25
    3efc:	5a 95       	dec	r21
    3efe:	a9 f7       	brne	.-22     	; 0x3eea <__udivmodhi4_loop>
    3f00:	80 95       	com	r24
    3f02:	90 95       	com	r25
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	08 95       	ret

00003f0a <__udivmodsi4>:
    3f0a:	a1 e2       	ldi	r26, 0x21	; 33
    3f0c:	1a 2e       	mov	r1, r26
    3f0e:	aa 1b       	sub	r26, r26
    3f10:	bb 1b       	sub	r27, r27
    3f12:	fd 01       	movw	r30, r26
    3f14:	0d c0       	rjmp	.+26     	; 0x3f30 <__udivmodsi4_ep>

00003f16 <__udivmodsi4_loop>:
    3f16:	aa 1f       	adc	r26, r26
    3f18:	bb 1f       	adc	r27, r27
    3f1a:	ee 1f       	adc	r30, r30
    3f1c:	ff 1f       	adc	r31, r31
    3f1e:	a2 17       	cp	r26, r18
    3f20:	b3 07       	cpc	r27, r19
    3f22:	e4 07       	cpc	r30, r20
    3f24:	f5 07       	cpc	r31, r21
    3f26:	20 f0       	brcs	.+8      	; 0x3f30 <__udivmodsi4_ep>
    3f28:	a2 1b       	sub	r26, r18
    3f2a:	b3 0b       	sbc	r27, r19
    3f2c:	e4 0b       	sbc	r30, r20
    3f2e:	f5 0b       	sbc	r31, r21

00003f30 <__udivmodsi4_ep>:
    3f30:	66 1f       	adc	r22, r22
    3f32:	77 1f       	adc	r23, r23
    3f34:	88 1f       	adc	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	1a 94       	dec	r1
    3f3a:	69 f7       	brne	.-38     	; 0x3f16 <__udivmodsi4_loop>
    3f3c:	60 95       	com	r22
    3f3e:	70 95       	com	r23
    3f40:	80 95       	com	r24
    3f42:	90 95       	com	r25
    3f44:	9b 01       	movw	r18, r22
    3f46:	ac 01       	movw	r20, r24
    3f48:	bd 01       	movw	r22, r26
    3f4a:	cf 01       	movw	r24, r30
    3f4c:	08 95       	ret

00003f4e <_exit>:
    3f4e:	f8 94       	cli

00003f50 <__stop_program>:
    3f50:	ff cf       	rjmp	.-2      	; 0x3f50 <__stop_program>
